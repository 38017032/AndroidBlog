<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Android博客]]></title>
  <subtitle><![CDATA[读万卷书]]></subtitle>
  <link href="http://likebamboo.com/AndroidBlog/atom.xml" rel="self"/>
  <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog//"/>
  <updated>2015-07-11T16:13:20.000Z</updated>
  <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog//</id>
  
  <author>
    <name><![CDATA[likebamboo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[还在用Toast？你Out啦，试试Snackbar吧！]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/11/welcome-snackbar-goodbye-toast/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/11/welcome-snackbar-goodbye-toast/</id>
    <published>2015-07-10T16:00:00.000Z</published>
    <updated>2015-07-11T16:13:20.000Z</updated>
    <content type="html"><![CDATA[<p>欢迎来到Android design support library系列教程第二部分，第一部分我们讨论了<a href="http://www.technotalkative.com/part-1-floating-action-button/" target="_blank" rel="external">Floating action button</a>的一些attributes 和 常见issues。</p>
<p>今天我们讨论一下另一个组件”Snackbar”.<br><a id="more"></a><br>Welcome Snackbar, Goodbye Toast!</p>
<blockquote>
<p>“Providing lightweight, quick feedback about an operation is a perfect opportunity to use a snackbar.”</p>
</blockquote>
<p>Snackbar是design support library中另一个组件，使用Snackbar我们可以在屏幕底部(大多时候)快速弹出消息，它和Toast非常相似，但是它更灵活一些。</p>
<ul>
<li>当它显示一段时间后或用户与屏幕交互时它会自动消失。</li>
<li>可以自定义action-可选操作。</li>
<li>swiping it off the screen可以让FAB消失</li>
<li>它是context sensitive message(自己理解吧),所以这些消息是UI screen的一部分并且它是显示在所有屏幕其它元素之上(屏幕最顶层)，并不是像Toast一样覆盖在屏幕上。</li>
<li>同一时间只能显示一个snackbar。</li>
</ul>
<p>Snackbar基本上继承了和Toast一样的方法和属性，例如LENGTH_LONG 和 LENGTH_SHORT用于设置显示时长。</p>
<h2 id="如何使用">如何使用</h2><p>我们看一下如何使用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Snackbar.make(view, message, duration)</span><br><span class="line">       .setAction(action message, click listener)</span><br><span class="line">       .show();</span><br></pre></td></tr></table></figure>
<h3 id="方法:">方法:</h3><ul>
<li><em><font color="red">make()</font></em>  – 生成Snackbar消息</li>
<li><em><font color="red">setAction()</font></em>  – 设置action</li>
<li><em><font color="red">make()</font></em>  – 显示Snackbar消息</li>
</ul>
<h3 id="属性:">属性:</h3><ul>
<li>make()方法的第一个参数是一个view, snackbar会试着寻找一个父view来hold这个view. Snackbar将遍历整个view tree 来寻找一个合适的父view，它可能是一个coordinatorLayout也可能是window decor’s content view,随便哪一个都行。</li>
<li>正如上面所提到，duration参数和Toast中的duration参数类似，只能是LENGTH_SHORT 或 LENGTH_LONG，不能是其它任何随机数。</li>
</ul>
<h3 id="示例:">示例:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Snackbar.make(rootlayout, <span class="string">"Hello SnackBar!"</span>, Snackbar.LENGTH_SHORT)</span><br><span class="line">       .setAction(<span class="string">"Undo"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">           <span class="annotation">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">               <span class="comment">// Perform anything for the action selected</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       .show();</span><br></pre></td></tr></table></figure>
<p>部局文件中rootlayout是framelayout并且添加了FAB(Floating action button)，看一下FAB示例：<br>点击FAB查看结果：<br><img src="http://www.technotalkative.com/wp-content/uploads/2015/06/Snackbar-framelayout1.gif" alt=""><br>程序没问题，但是对于用户体验来说并不太好，它应该向上移一些，如下图所示：</p>
<blockquote>
<p>Having a CoordinatorLayout in your view hierarchy allows Snackbar to enable certain features, such as swipe-to-dismiss and automatically moving of widgets like FloatingActionButton.</p>
</blockquote>
<p>我们在该系列文章的下一部分讨论CoordinatorLayout。<br><img src="http://www.technotalkative.com/wp-content/uploads/2015/06/Snackbar-with-CoordinatorLayout1.gif" alt=""></p>
<h3 id="配置Snackbar可选操作">配置Snackbar可选操作</h3><p>我们可以使用额外的可选操作来配置snackbar，比如<em><font color="red">setActionTextColor</font></em> 和 <em><font color="red">setDuration</font></em>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Snackbar.make(rootlayout, <span class="string">"Hello SnackBar!"</span>, Snackbar.LENGTH_SHORT)</span><br><span class="line">       .setAction(<span class="string">"Undo"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">           <span class="annotation">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">               <span class="comment">// Perform anything for the action selected</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       .setActionTextColor(R.color.material_blue)</span><br><span class="line">       .setDuration(<span class="number">4000</span>).show();</span><br></pre></td></tr></table></figure>
<p>下载示例代码：<a href="https://github.com/PareshMayani/DesignSupportLibraryExamples" target="_blank" rel="external">https://github.com/PareshMayani/DesignSupportLibraryExamples</a></p>
<p>参考文档：<br><a href="https://developer.android.com/reference/android/support/design/widget/Snackbar.html" target="_blank" rel="external">https://developer.android.com/reference/android/support/design/widget/Snackbar.html</a></p>
<h3 id="总结">总结</h3><p>在这部分文章中，我们讨论了Snackbar，它和TOAST很相似，但是它更灵活一些。Snackbar中可以定义action，当用户与屏幕交互时或者显示一段时间后会自动消失。<br>通过 CoordinatorLayout我们可以看到更多的effects 和 behaviours，在该系列文章中后续会讨论它。</p>
<blockquote>
<ul>
<li>原文链接 : <a href="http://www.technotalkative.com/part-2-welcome-snackbar-goodbye-toast/" target="_blank" rel="external">Welcome Snackbar, Goodbye Toast!</a></li>
<li>原文作者 : <a href="http://en.gravatar.com/pareshnmayani" target="_blank" rel="external">Paresh Mayani</a></li>
<li><a href="http://www.devtf.cn" target="_blank" rel="external">译文出自 :  开发技术前线 www.devtf.cn</a></li>
<li>译者 : <a href="https://github.com/objectlife" target="_blank" rel="external">objectlife</a> </li>
<li>校对者: <a href="https://github.com/bboyfeiyu" target="_blank" rel="external">Mr.Simple</a> </li>
<li>状态 : 完成</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>欢迎来到Android design support library系列教程第二部分，第一部分我们讨论了<a href="http://www.technotalkative.com/part-1-floating-action-button/">Floating action button</a>的一些attributes 和 常见issues。</p>
<p>今天我们讨论一下另一个组件”Snackbar”.<br>]]>
    
    </summary>
    
      <category term="SupportLibrary" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/SupportLibrary/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何提高你的代码质量]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/10/how-to-improve-quality-and-syntax-of-your-android-code/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/10/how-to-improve-quality-and-syntax-of-your-android-code/</id>
    <published>2015-07-09T16:00:00.000Z</published>
    <updated>2015-07-11T16:14:22.000Z</updated>
    <content type="html"><![CDATA[<p>在这篇文章中，我将通过不同的自动化工具如CheckStyle，FindBugs，PMD以及Android Lint来介绍(如何)提高你的安卓代码质量。通过自动化的方式检查你的代码非常有用，尤其当你在一个团队中工作，为了在你的代码中保持严格的语法格式以及避免很多坏习惯和错误。我将仔细地介绍如何在你空闲的时候直接运用这些工具通过Gradle构建脚本以及如何配置它们。<br><a id="more"></a></p>
<h3 id="Fork该示例">Fork该示例</h3><p>我强烈建议你拷贝下<a href="https://github.com/vincentbrison/vb-android-app-quality.git" target="_blank" rel="external">这个项目工程</a>，尽管我将介绍的案例都是来自它。与此同时，你将能够测试下自己对这些工具的了解情况。</p>
<h3 id="关于Gradle任务">关于Gradle任务</h3><p>Gradle任务的概念(在Gradle中的含义)是理解该篇文章(以及如何以一种通用的方式写Gradle脚本)的基础。我强烈建议你去看下这两篇关于Gradle任务的文档（<a href="https://docs.gradle.org/current/userguide/tutorial_using_tasks.html" target="_blank" rel="external">这篇</a>和<a href="https://docs.gradle.org/current/userguide/more_about_tasks.html" target="_blank" rel="external">这篇</a>）。这个文档包含了大量的例子，因此它非常容易开始学习。现在，我假定你拷贝了我的Repo，你导入这个工程到你的Android Studio，并且你熟悉Gradle任务。如果不是，别担心，我将尽我最大的努力让我的讲解更有意义。</p>
<h3 id="关于示例项目的层次结构">关于示例项目的层次结构</h3><p>你可以将gradle脚本文件分割成很多文件，我现在已经有3个gradle文件：</p>
<ul>
<li><a href="https://github.com/vincentbrison/vb-android-app-quality/blob/master/build.gradle" target="_blank" rel="external">根文件夹中的文件</a>，这些文件或多或少都是关于这个项目的配置的(用的哪个Maven Repos，用的哪个版本的Gradle)。</li>
<li><a href="https://github.com/vincentbrison/vb-android-app-quality/blob/master/app/build.gradle" target="_blank" rel="external">App子文件夹中的文件</a>,这些文件是典型的用于创建安卓应用的gradle文件。</li>
<li><a href="https://github.com/vincentbrison/vb-android-app-quality/blob/master/config/quality.gradle" target="_blank" rel="external">config子文件夹中的文件</a>，这里的文件才是我们关系的重点，因为我用这里的文件保存和配置项目中的所有工具。</li>
</ul>
<h2 id="Checkstyle">Checkstyle</h2><p><a href="http://checkstyle.sourceforge.net/" target="_blank" rel="external"><img src="http://checkstyle.sourceforge.net/images/logo.png" alt="Checkstyle"></a></p>
<h3 id="简介">简介</h3><p>“Checkstyle是一个开发工具用来帮助程序员编写符合代码规范的Java代码。它能自动检查Java代码为空闲的人进行这项无聊(但重要)的任务。”</p>
<p>正如Checkstyle的开发者所言，这个工具能够帮助你在项目中定义和维持一个非常精确和灵活的代码规范形式。当你启动CheckStyle，它会根据所提供的配置文件分析你的Java代码并告诉你发现的所有错误。</p>
<h3 id="Gradle的形式">Gradle的形式</h3><p>下面的代码向你展示了在你的项目中使用Checkstyle的最基本的配置(如Gradle任务):</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> <span class="keyword">checkstyle</span>(type: <span class="keyword">Checkstyle</span>) &#123;</span><br><span class="line">    configFile <span class="keyword">file</span>(<span class="string">"$&#123;project.rootDir&#125;/config/quality/checkstyle/checkstyle.xml"</span>) <span class="comment">// Where my checkstyle config is...</span></span><br><span class="line">    configProperties.checkstyleSuppressionsPath = <span class="keyword">file</span>(<span class="string">"$&#123;project.rootDir&#125;/config/quality/checkstyle/suppressions.xml"</span>).absolutePath <span class="comment">// Where is my suppressions file for checkstyle is...</span></span><br><span class="line">    <span class="keyword">source</span> <span class="string">'src'</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">'**/*.java'</span></span><br><span class="line">    <span class="keyword">exclude</span> <span class="string">'**/gen/**'</span></span><br><span class="line">    <span class="keyword">classpath</span> = files()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以，基本上这个任务会根据checkstyle.xml和suppressions.xml分析你的代码。通过Android Studio执行它仅仅需要从工具面的CheckStyle来启动它。</p>
<p><img src="http://vincentbrison.com/wp-content/uploads/2014/07/checkstyle.jpg" alt="gradle panel"><br>     How to execute your gradle task checkstyle</p>
<p>启动CheckStyle之后，你讲收到一个报告用于展示在你项目中发现的每个错误。这是非常直接的方式。</p>
<p>如果你想在checkstyle上做更多的配置，可以参考<a href="https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html" target="_blank" rel="external">这篇文档</a>。</p>
<h3 id="Checkstyle的使用技巧">Checkstyle的使用技巧</h3><p>Checkstyle会发现大量的问题，特别是在你运用了大量的规则配置，如同你设置了一个非常精确的语法。尽管我通过Gradle使用checkstyle，例如在我进行推送之前，我仍然推荐你为IntellJ/Android Studio使用checkstyle插件(你可以通过Android Studio的工作面板文件/设置/插件直接安装插件)。这种方式下，你可以根据那些为Gradle配置的相同文件在你的工程中使用checkstyle，但是远不止这些，你可以直接在Android Studio中获取带有超链接结果，这些结果通过超链接在你的代码中对应，这是非常有用的(Gradle的这种方式仍然很重要的，因为你可以使用它自动构建系统，如Jenkins)。</p>
<h2 id="Findbugs">Findbugs</h2><p><a href="http://findbugs.sourceforge.net/" target="_blank" rel="external"><img src="http://findbugs.sourceforge.net/umdFindbugs.png" alt="Findbugs"></a></p>
<h3 id="简介-1">简介</h3><p>Findbugs是否需要一个简介呢？我想它的名称已经让人顾名思义了。“FindBugs使用静态分析方法为出现bug模式检查Java字节码”。FindBugs基本上只需要一个程序来做分析的字节码，所以这是非常容易使用。它能检测到常见的错误，如错误的布尔运算符。FindBugs也能够检测到由于误解语言特点的错误，如Java参数调整（这不是真的有可能因为它的参数是传值）。</p>
<h3 id="Gradle的形式-1">Gradle的形式</h3><p>下面的代码向你展示了在你的项目中使用Findbugs的最基本的配置(以Gradle任务为例):<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> findbugs(type: FindBugs) &#123;</span><br><span class="line">     ignoreFailures = <span class="keyword">false</span></span><br><span class="line">     effort = <span class="string">"max"</span></span><br><span class="line">     reportLevel = <span class="string">"high"</span></span><br><span class="line">     excludeFilter = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"$&#123;project.rootDir&#125;/config/quality/findbugs/findbugs-filter.xml"</span>)</span><br><span class="line">     classes = files(<span class="string">"$&#123;project.rootDir&#125;/app/build/classes"</span>)</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">source</span> <span class="string">'src'</span></span><br><span class="line">     <span class="keyword">include</span> <span class="string">'**/*.java'</span></span><br><span class="line">     <span class="keyword">exclude</span> <span class="string">'**/gen/**'</span></span><br><span class="line">     </span><br><span class="line">     reports &#123;</span><br><span class="line">         xml.enabled = <span class="keyword">false</span></span><br><span class="line">         html.enabled = <span class="keyword">true</span></span><br><span class="line">         xml &#123;</span><br><span class="line">             destination <span class="string">"$project.buildDir/reports/findbugs/findbugs.xml"</span></span><br><span class="line">         &#125;</span><br><span class="line">         html &#123;</span><br><span class="line">             destination <span class="string">"$project.buildDir/reports/findbugs/findbugs.html"</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">classpath</span> = files()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它是如此的像一个Checkstyle任务。尽管Findbugs支持HTML和XML两种报告形式，我选择HTML形式，因为这种形式更具有可读性。而且，你只需要把报告的位置设置为书签就可以快速访问它的位置。这个任务也会失败如果发现Findbgus错误失败(同样生成报告)。执行FindBugs任务，就像执行CheckStyle任务（除了任务的名称是“FindBugs”）。</p>
<h3 id="Findbugs的使用技巧">Findbugs的使用技巧</h3><p>由于Android项目是从Java项目略有不同，我强烈推荐使用FindBugs过滤器(规则配置)。你可以在这一个例子（例如项目之一）。它基本上忽略了R文件和你的Manifest文件。顺便说一句，由于(使用)FindBugs分析你的代码，你至少需要编译一次你的代码才能够测试它。</p>
<h2 id="PMD">PMD</h2><p><a href="http://pmd.sourceforge.net/" target="_blank" rel="external"><img src="http://pmd.sourceforge.net/pmd_logo.png" alt="PMD"></a></p>
<h3 id="简介-2">简介</h3><p>这个工具有个有趣的事实：PMD不存在一个准确的名称。(所以)在官网上你可以发现很有有趣的名称，例如:</p>
<ul>
<li>Pretty Much Done</li>
<li>Project Meets Deadline</li>
</ul>
<p>事实上，PMD是一个工作有点类似Findbugs的强大工具，但是(PMD)直接检查源代码而不是检查字节码(顺便说句，PMD适用很多语言)。(PMD和Findbugs)的核心目标是相同的，通过静态分析方法找出哪些模式引起的bug。因此为什么同时使用Findbugs和PMD呢？好吧！尽管Findbugs和PMD拥有相同的目标，(但是)他们的检查方法是不同的。所以PMD有时检查出的bug但是Findbugs却检查不出来，反之亦然。</p>
<h3 id="Gradle的形式-2">Gradle的形式</h3><p>下面的代码向你展示了在你的项目中使用PMD的最基本的配置(以Gradle任务为例):<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">task pmd(<span class="built_in">type</span>: <span class="keyword">Pmd) &#123;</span></span><br><span class="line">    ruleSetFiles = files(<span class="string">"$&#123;project.rootDir&#125;/config/quality/pmd/pmd-ruleset.xml"</span>)</span><br><span class="line">    ignoreFailures = <span class="keyword">false</span></span><br><span class="line">    ruleSets = []</span><br><span class="line">    </span><br><span class="line">    <span class="literal">source</span> <span class="string">'src'</span></span><br><span class="line">    <span class="literal">include</span> <span class="string">'**/*.java'</span></span><br><span class="line">    <span class="literal">exclude</span> <span class="string">'**/gen/**'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">reports &#123;</span></span><br><span class="line">       xml.<span class="literal">enabled</span> = <span class="keyword">false</span></span><br><span class="line">       html.<span class="literal">enabled</span> = <span class="keyword">true</span></span><br><span class="line">       <span class="keyword">xml &#123;</span></span><br><span class="line">           destination <span class="string">"$project.buildDir/reports/pmd/pmd.xml"</span></span><br><span class="line">       <span class="keyword">&#125;</span></span><br><span class="line">       <span class="keyword">html &#123;</span></span><br><span class="line">           destination <span class="string">"$project.buildDir/reports/pmd/pmd.html"</span></span><br><span class="line">       <span class="keyword">&#125;</span></span><br><span class="line">    <span class="keyword">&#125;</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>就PMD来说，它几乎与Findbugs相同。PMD支持HTML和XML两种报告形式，所以我再次选择HTML形式。我强烈建议你使用自己的通用配置集文件，正如同我在这个例子(<a href="https://github.com/vincentbrison/vb-android-app-quality/blob/master/config/quality/pmd/pmd-ruleset.xml" target="_blank" rel="external">check this file</a>)中一样。所以，你当然应该去看下这些<a href="http://pmd.sourceforge.net/pmd-5.1.1/howtomakearuleset.html" target="_blank" rel="external">通用配置集文件</a>。我建议你，因为PMD可比FindBugs更有争议的很多，例如：如果你不声明”if statement”或”if statement”为空，它基本上会给你警告信息。如果这些规则是正确的，或这对于您的项目(来说是正确的)，我真的认可你和你队友的工作。我不希望程序因为”if statement”崩溃，我认为这样程序的可读性很差。执行PMD任务，就像是(执行)CheckStyle任务（除了任务的名称是“PMD”）。</p>
<h3 id="PMD的使用技巧">PMD的使用技巧</h3><p>我建议你不要使用默认的规则配置集，你需要添加这行代码(已经加上)：</p>
<pre><code><span class="keyword">ruleSets</span> =<span class="sqbracket"> []</span>
</code></pre><p>否则，因为默认值是这些基本的规则配置集，基本的规则配置集会和你定义的规则集一起执行。所以，如果你的自定义规则集不在那些基本配置集中，他们仍然会执行。</p>
<h2 id="Android_Lint">Android Lint</h2><h3 id="简介-3">简介</h3><p>“Android lint工具是一个静态代码分析工具，它能检查安卓项目源文件的潜在缺陷和优化改进的正确性，安全性，性能，可用性，可访问性和国际化。”</p>
<p>正如官方网站所说，Android Lint是另一种静态分析工具，专门为Android服务。它是非常强大的，能给你大量的建议以提高你的代码质量。</p>
<h3 id="Gradle的形式-3">Gradle的形式</h3><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">android &#123;</span></span><br><span class="line">   <span class="keyword">lintOptions &#123;</span></span><br><span class="line">       abortOnError <span class="keyword">true</span></span><br><span class="line">       </span><br><span class="line">       lintConfig <span class="keyword">file</span>(<span class="string">"$&#123;project.rootDir&#125;/config/quality/lint/lint.xml"</span>)</span><br><span class="line">       </span><br><span class="line">       // <span class="keyword">if</span> <span class="keyword">true</span>, generate an <span class="constant">H</span>TML report (with issue explanations, sourcecode, etc)</span><br><span class="line">       htmlReport <span class="keyword">true</span></span><br><span class="line">       // optional <span class="built_in">path</span> to report (<span class="keyword">default</span> will be lint-results.html <span class="keyword">in</span> the builddir)</span><br><span class="line">       htmlOutput <span class="keyword">file</span>(<span class="string">"$project.buildDir/reports/lint/lint.html"</span>)</span><br><span class="line">   <span class="keyword">&#125;</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我建议你使用一个单独的文件来定义哪些配置需要使用和不使用。<a href="http://tools.android.com/tips/lint-checks" target="_blank" rel="external">这个网站</a>根据最新的ADT版本定义了全部的配置。我的演示项目中的lint文件包含所有这些规则（ADT 21），包含等级为”ignore”的”severity”:</p>
<ul>
<li><p>IconDensities：这个规则配置确保你定义每个图像资源中的(分辨率)密度（除了ldpi）。</p>
</li>
<li><p>IconDipSize:这个规则配置确保你为每个dip定义合适的资源(换句话来说，如果你没有为每个density设置相同的图片资源，则不需要重新设置图片大小)。</p>
</li>
</ul>
<p>所以你可以重用这个lint文件并激活你想要的所有规则。执行Android Lint任务，就像执行CheckStyle任务（除了任务的名称是”lint”）。</p>
<h3 id="Android_Lint的使用技巧">Android Lint的使用技巧</h3><p>对于Android Lint没有什么特别的技巧，只需要牢记Android Lint会测试所有配置规则，除了那些等级为“ignore”的“severity”的配置。因此如果发布了新版本ADT下的新配置规则，他们将被检查，而不是忽视。</p>
<h2 id="实例演示">实例演示</h2><p>现在，你有所有的方法为您的项目使用这四个工具。显然，如果我们能同时使用这四个工具会更好。你可以添加你的gradle任务之间的依赖，比如当你执行一个任务，其他任务则是第一个完成后执行。通常在Gradle中，通过让工具具有“check”任务来达到工具之间的相互关系：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check<span class="class">.dependsOn</span> <span class="string">'checkstyle'</span>, <span class="string">'findbugs'</span>, <span class="string">'pmd'</span>, <span class="string">'lint'</span></span><br></pre></td></tr></table></figure></p>
<p>现在，当执行“check” 任务的时候，Checkstyle, Findbugs, PMD, and Android Lint将会同时执行。在你执行/ commiting / pushing / ask merge request 之前进行质量检查是一个很棒的方式。</p>
<p>你可以在<a href="https://github.com/vincentbrison/vb-android-app-quality/blob/master/config/quality.gradle" target="_blank" rel="external">这个Gradle文件</a>中找到所有任务的一个完整例子。你可以把所有的质量配置文件和Gradle文件从你看到的演示实例中分开，这些演示的实例把一起都放在“config/quality” 文件夹下。</p>
<h1 id="总结">总结</h1><p>在这篇文章中，利用Gradle对Android使用代码质量检查工具是非常容易。比使用质量工具局部检查您的项目在您自己的计算机上，这些工具可以用于自动构建如Jenkins/Hudson这样的平台，让你自动进行质量检查，同时自动建立过程。执行所有我从CLI展现的测试，如同在Jenkins/Hudson上执行，简单地执行：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">gradle</span> check</span><br></pre></td></tr></table></figure>
<p>请随时对这篇文章发表评论，或者问任何有关Android的问题。</p>
<blockquote>
<ul>
<li>原文链接 : <a href="http://vincentbrison.com/2014/07/19/how-to-improve-quality-and-syntax-of-your-android-code/" target="_blank" rel="external">How to improve quality and syntax of your Android code</a></li>
<li>原文作者 : <a href="http://vincentbrison.com/" target="_blank" rel="external">VINCENT BRISON</a></li>
<li><a href="http://www.devtf.cn" target="_blank" rel="external">译文出自 :  开发技术前线 www.devtf.cn</a></li>
<li>译者 : <a href="https://github.com/dengshiwei" target="_blank" rel="external">dengshiwei</a> </li>
<li>校对者: <a href="https://github.com/bboyfeiyu" target="_blank" rel="external">Mr.Simple</a> </li>
<li>状态 :  完成 </li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在这篇文章中，我将通过不同的自动化工具如CheckStyle，FindBugs，PMD以及Android Lint来介绍(如何)提高你的安卓代码质量。通过自动化的方式检查你的代码非常有用，尤其当你在一个团队中工作，为了在你的代码中保持严格的语法格式以及避免很多坏习惯和错误。我将仔细地介绍如何在你空闲的时候直接运用这些工具通过Gradle构建脚本以及如何配置它们。<br>]]>
    
    </summary>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="其他" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用组合代替继承能为 Activity 带来什么]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/09/Composition-over-Inheritance-What-it-means-for-your-Activities/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/09/Composition-over-Inheritance-What-it-means-for-your-Activities/</id>
    <published>2015-07-08T16:00:00.000Z</published>
    <updated>2015-07-11T16:14:56.000Z</updated>
    <content type="html"><![CDATA[<p>事实上我们在很多 Java 进阶书籍上看到过“开发时应该更倾向于选择组合而不是继承”的建议，为什么建议我们<strong>更倾向于</strong>而不是<strong>完全代替</strong>呢，因为当类 A 能完全代替另一个类 B（我们想让 B 成为 A 的父类）时，我们就应该使用继承，如果 A 仅仅是和 B 有着某些共同的<strong>行为</strong>，是不应该使用继承的（更多的讨论<a href="http://stackoverflow.com/questions/49002/prefer-composition-over-inheritance" target="_blank" rel="external">戳我</a>）。然而，在我阅读别人的源码时，滥用继承的情况实在是太多了，多少人创建了一个 BaseActivity 后，就让所有 Activity 继承它，在子 Activity 中实现业务逻辑。<br><a id="more"></a><br>而且这样做问题大大的有，最鲜活的例子就是：Joe Newguy 加入到我们组，并实现了 ShinyFeatureActivity，那会组里没有任何规定强迫他必须让 ShinyFeatureActivity 继承于 BaseActivity，但他还是这么干了……万幸我们在 Code Review 时发现了这个问题。此外，如果每一个 Activity 都继承于 BaseActivity，在某些情况下，你可能要继承的是其他 Activity（例如：PreferenceActivity、ListActivity）。尽管大部分 Activity 的子类都有相应的 Fragment 代替，但还是有一部分是没有对应 Fragment 的，某些库仍然需要相应的 Activity 子类。</p>
<p>有些更潜在的问题是：有时候某些 Activity 需要这些行为，其他的 Activity 需要其他行为，而 Java 并不支持多继承，这就意味着我们得将行为有交集的 Activity 的所有行为放到一个独立的类里面。但这样做会降低可维护性，甚至带来性能影响。</p>
<p>事实上，我们会这么干的动机很简单：代码复用。确实，代码复用很重要。而我们大部分公共逻辑需要在 Activity 生命周期的某一环实现。但 Application.ActivityLifecycleCallbacks 是一个让人很蛋疼的玩意，而且可能需要在 Application.onCreate() 方法里注册它，最讽刺的是：我们想尽办法避免在 Application.onCreate() 方法里注册它……</p>
<p>这也是无绑定 View 的 Fragment 的由来了，当无数 Android 开发者把 Fragment 看作 UI 组件时，事实上 Fragment 更像生命周期的组件。为什么要说这些 Fragment 是无绑定 View 的呢？因为在这些开发者的手里，Fragment 的 onCreateView() 方法既没有被重写，也没有返回 null。本质上，Fragment 就是一个能够处理或操控事件的组件，而它自身没有对应的 View。</p>
<p>为了区分无绑定 View 的 Fragment 和面向 View 的 Fragemnt，我在命名时会将无绑定 View 的 Fragemnt 命名为 <strong> XXHelper</strong>，其他的就命名为<strong>XXFragment</strong>。例如，AnalyticsHelper 代表的就是关联分析逻辑的 Fragment，而 HeaderFragment 则显示了一个标题栏。当然了，大家可以尝试这么干，也可以无视我的建议，我自己是感觉满有用的哈～</p>
<p>因为这些无绑定 View 的 Fragment 里面没有 UI 组件，也就意味着在这些 Fragment 里我们不需要考虑初始化布局所需的 Layout-ID，或者是 View 需要的动画，那么我们完全可以用工厂模式开发这些 Fragment，提高工厂方法的易用性和可操控性。就这一点来说，他们还能完成添加 Fragment 自身的操作，我创建了一个 <a href="https://gist.github.com/keyboardr/ddf35148ca2c1a2bfbde" target="_blank" rel="external">Gist</a> 来为大家介绍要怎么做到，有兴趣的话可以点进去看看哈。如果使用 Android-Studio 进行开发的话，你可以将它添加到设置的 <code>File and Code Templates</code> 选项中，然后当你创建一个新的类时，在 <strong>Kind</strong> 下拉选项中选择它。</p>
<p>将 FooHelper 添加到它的父类中非常简单，只要调用 FooHelper.attach(this) 就可以了。但如果相应的父类没有实现 FooHelper 的回调接口的话会出现编译错误，此外，如果 attach() 方法已经被调用了，该方法的返回值会是之前的 Fragment。这个 Gist 包含对 Fragment 和 Activity 的重载，而且将它们转换为使用支持的 Fragement 和 FragmentActivity，其中的意义非常中大。而且它还包含了 FragmentUtils.getParent() 的简化版 —— getParent() 方法（详情<a href="https://gist.github.com/keyboardr/5455206" target="_blank" rel="external">戳我</a>）。</p>
<p>显然，无绑定 View 的 Fragment 比 BaseActivity 好用得多，它们很好地封装了需要生命周期回调（或者是 onActivityResult()，FragmentManager）的处理方法。最棒的是，我们可以将 Activity 共用的某些逻辑分解到职责单一的模块组件中，Activity 需要什么逻辑，就选择什么模块使用。如果你的 Activity 大部分都需要许多相同的模块，那么你没有理由不实现 CommonComponentsHelper 用于处理这些共用逻辑，而且你也不需要把 Activity 的所有共用依赖放在一个基类中。</p>
<blockquote>
<ul>
<li>原文链接 : <a href="https://plus.google.com/+JoshBrown42/posts/FzNghPbKk2s" target="_blank" rel="external">Composition over Inheritance，What it means for your Activities</a></li>
<li>原文作者 : <a href="https://plus.google.com/100411279961902366927" target="_blank" rel="external">Josh Brown</a></li>
<li><a href="http://www.devtf.cn" target="_blank" rel="external">译文出自 :  开发技术前线 www.devtf.cn</a></li>
<li>译者 : <a href="https://github.com/chaossss" target="_blank" rel="external">chaossss</a> </li>
<li>校对者: <a href="https://github.com/bboyfeiyu" target="_blank" rel="external">Mr.Simple</a>  </li>
<li>状态 :  完成</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>事实上我们在很多 Java 进阶书籍上看到过“开发时应该更倾向于选择组合而不是继承”的建议，为什么建议我们<strong>更倾向于</strong>而不是<strong>完全代替</strong>呢，因为当类 A 能完全代替另一个类 B（我们想让 B 成为 A 的父类）时，我们就应该使用继承，如果 A 仅仅是和 B 有着某些共同的<strong>行为</strong>，是不应该使用继承的（更多的讨论<a href="http://stackoverflow.com/questions/49002/prefer-composition-over-inheritance">戳我</a>）。然而，在我阅读别人的源码时，滥用继承的情况实在是太多了，多少人创建了一个 BaseActivity 后，就让所有 Activity 继承它，在子 Activity 中实现业务逻辑。<br>]]>
    
    </summary>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="其他" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android UI 自动化测试]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/08/automating-user-interface-testing-on-android/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/08/automating-user-interface-testing-on-android/</id>
    <published>2015-07-07T16:00:00.000Z</published>
    <updated>2015-07-11T16:15:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>Android测试支持库包含<strong>UI自动化模块</strong>，它可以对Android应用进行自动黑盒测试。在API Level 18中引入了自动化模块，它允许开发者在组成应用UI的控件上模仿用户行为。</p>
<p>在这个教程中，我将展示如何使用此模块来创建和执行一个基本的UI测试，选择默认的计算器模块进行测试。<br><a id="more"></a></p>
<h2 id="先决条件">先决条件</h2><p>在使用前，需要具备以下条件：<br>  1.最新版本的<a href="https://developer.android.com/sdk/index.html" target="_blank" rel="external">Android Studio</a><br>  2.运行Android 4.3或者更高版本的设备或者虚拟器<br>  3.理解<a href="http://junit.org/" target="_blank" rel="external">JUnit</a></p>
<h2 id="1-_安装依赖库">1. 安装依赖库</h2><p>工程中使用UI自动化模块，需要编辑你的工程下<em>app</em>目录下的文件<em>build.gradle</em>，添加如下信任：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">androidTestCompile</span> <span class="string">'com.android.support.test:runner:0.2'</span>                       </span><br><span class="line">androidTestCompile <span class="string">'com.android.support.test:rules:0.2'</span>                        </span><br><span class="line">androidTestCompile <span class="string">'com.android.support.test.uiautomator:uiautomator-v18:2.1.0'</span></span><br></pre></td></tr></table></figure></p>
<p>现在屏幕上应该有<em>Sync Now</em>按钮了，但点击它时，会看到如下错误信息：</p>
<p><img src="http://7xk12r.com1.z0.glb.clouddn.com/Android_UI_autotest1.png" alt="p1"></p>
<p>点击 <strong>Install Repository and sync project</strong> 链接来安装 <strong>Android Support Repository</strong>。</p>
<p>如果使用的是库<strong>appcompat-v7</strong> 且其版本号是<strong>22.1.1</strong>，你需要添加如下依赖以确保应用本身和测试应用都使用相同版本的<code>com.android.support:support-annotations</code>:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">androidTestCompile</span> <span class="string">'com.android.support:support-annotations:22.1.1'</span></span><br></pre></td></tr></table></figure>
<p>接下来，由于Android Studio自身的一个bug，你需要通过 <figure class="highlight"><figcaption><span>执行一个名为 **LICENSE.txt** 的文件。这个执行失败的话，在运行测试时将引起如下错误：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;</span><br></pre></td></tr></table></figure></p>
<p>Execution failed for task ‘:app:packageDebugAndroidTest’.<br>Duplicate files copied in APK LICENSE.txt                                                                                                   </p>
<p>File 1: ~/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-core/1.1/860340562250678d1a344907ac75754e259cdb14/hamcrest-core-1.1.jar<br>File 2: ~/.gradle/caches/modules-2/files-2.1/junit/junit-dep/4.10/64417b3bafdecd366afa514bd5beeae6c1f85ece/junit-dep-4.10.jar<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在你的<span class="keyword">*</span><span class="keyword">*</span>build.gradle<span class="keyword">*</span><span class="keyword">*</span>文件底部增加如下代码段：</span><br><span class="line">```Java</span><br><span class="line">android &#123;                                       </span><br><span class="line">    packagingOptions &#123;                          </span><br><span class="line">        exclude 'LICENSE.txt'                   </span><br><span class="line">    &#125;                                           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2、创建测试类">2、创建测试类</h2><p>创建一个新的测试类，<figure class="highlight"><figcaption><span>**androidTest** 目录下创建名为 **CalculatorTester.java** 的文件实现。创建的UI自动化测试用例，必须继承自```InstrumentationTestCase```。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;![P2](http://7xk12r.com1.z0.glb.clouddn.com/Android_UI_autotest2.png)&#10;&#10;&#25353; **Alt+Insert**&#21518;&#36873;&#25321; **SetUp Method** &#26469;&#37325;&#20889;```setUp```&#26041;&#27861;&#12290;&#10;&#10;![P3](http://7xk12r.com1.z0.glb.clouddn.com/Android_UI_autotest3.png)&#10;&#10;&#20877;&#27425;&#25353; **Alt+Insert** &#21518;&#36873;&#25321; **Test Method** &#26469;&#29983;&#25104;&#26032;&#30340;&#27979;&#35797;&#26041;&#27861;&#65292;&#21629;&#21517;&#20026;```testAdd```&#12290;&#21040;&#27492;```CalculatorTester```&#31867;&#23450;&#20041;&#22914;&#19979;&#65306;&#10;```Java&#10;public class CalculatorTester extends InstrumentationTestCase&#123;&#10;                                                              &#10;    @Override                                                 &#10;    public void setUp() throws Exception &#123;                    &#10;                                                              &#10;    &#125;                                                         &#10;                                                              &#10;    public void testAdd() throws Exception &#123;                  &#10;                                                              &#10;    &#125;                                                         &#10;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3、查看Launcher_UI">3、查看Launcher UI</h2><p>连接你的Android设备到电脑商，点击home按键，进入主界面。</p>
<p>返回到你的电脑，使用文件管理或者终端浏览你安装Android SDK的目录，进入到 <strong>tools</strong> 目录下，点击 <strong>uiautomatorviewer</strong> 。这个会启动 <strong>UI Automater Viewer</strong> ，你将看到如下界面：</p>
<p><img src="http://7xk12r.com1.z0.glb.clouddn.com/Android_UI_autotest4.png" alt="P4"></p>
<p>点击上方手机图标来获取Android设备截屏。注意到此时获取到的截屏是可交互的。点击下面的Apps图标。在右方的 <strong>Node Detail</strong> 区域，你就可以看到根据选择图标的不同显示不同的详细信息，如下图所示：</p>
<p><img src="http://7xk12r.com1.z0.glb.clouddn.com/Android_UI_autotest5.jpg" alt="P5"></p>
<p>与屏幕上的应用交互，UI自动化测试需要能唯一识别它们。在这个教程中，可以使用应用的<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#20174;&#19978;&#22270;&#21487;&#20197;&#30475;&#21040;Apps&#22270;&#26631;&#27809;&#26377;```text```&#23383;&#27573;&#65292;&#20294;&#26377;```content-desc```&#12290;&#35760;&#19979;&#23427;&#30340;&#20540;&#65292;&#21518;&#38754;&#23558;&#29992;&#21040;&#36825;&#20010;&#20540;&#12290;&#10;&#10;&#25343;&#36215;Android&#35774;&#22791;&#65292;&#35302;&#25720;Apps&#22270;&#26631;&#65292;&#36827;&#20837;&#35774;&#22791;&#23433;&#35013;&#30340;&#25152;&#26377;&#24212;&#29992;&#30028;&#38754;&#12290;&#20351;&#29992; **UI Automater Viewe** &#33719;&#21462;&#21478;&#22806;&#19968;&#24352;&#23631;&#24149;&#25130;&#22270;&#12290;&#22240;&#20026;&#35201;&#20889;&#19968;&#20010;&#35745;&#31639;&#22120;&#24212;&#29992;&#30340;&#27979;&#35797;&#65292;&#28857;&#20987;&#35745;&#31639;&#22120;&#22270;&#26631;&#26597;&#30475;&#35814;&#32454;&#30028;&#38754;&#12290;&#10;&#10;![P6](http://7xk12r.com1.z0.glb.clouddn.com/Android_UI_autotest6.jpg)&#10;&#10;&#36825;&#27425;```content-desc```&#26159;&#31354;&#30340;&#65292;&#20294;&#26159;```text```&#30340;&#20540;&#20026;**Calculator**&#65292;&#21516;&#26679;&#35760;&#20303;&#36825;&#20010;&#20540;&#12290;&#10;&#10;&#22914;&#26524;&#20320;&#30340;Android&#35774;&#22791;&#36816;&#34892;&#19981;&#21516;&#30340;&#20027;&#30028;&#38754;&#25110;&#32773;&#19981;&#21516;&#30340;Android&#29256;&#26412;&#65292;&#30028;&#38754;&#21644;&#26174;&#31034;&#30340;&#32454;&#33410;&#20250;&#26377;&#25152;&#19981;&#21516;&#12290;&#36825;&#24847;&#21619;&#30528;&#21518;&#32493;&#20195;&#30721;&#20013;&#38656;&#35201;&#20570;&#19968;&#20123;&#20462;&#25913;&#65292;&#20197;&#21305;&#37197;&#20320;&#30340;&#25805;&#20316;&#31995;&#32479;&#12290;&#10;&#10;##4&#12289;&#20934;&#22791;&#27979;&#35797;&#29615;&#22659;&#10;&#10;&#36820;&#22238;&#21040;Android Studio&#65292;&#32473;```setUp```&#26041;&#27861;&#20013;&#28155;&#21152;&#20195;&#30721;&#12290;&#22914;&#21516;&#20854;&#21517;&#23383;&#65292;```setUp```&#26041;&#27861;&#26159;&#29992;&#26469;&#20934;&#22791;&#27979;&#35797;&#29615;&#22659;&#30340;&#12290;&#25442;&#21477;&#35805;&#35828;&#65292;&#36825;&#20010;&#26041;&#27861;&#26159;&#22312;&#30495;&#27491;&#27979;&#35797;&#20043;&#21069;&#25351;&#23450;&#20855;&#20307;&#38656;&#35201;&#25191;&#34892;&#20160;&#20040;&#21160;&#20316;&#30340;&#12290;&#10;&#10;&#29616;&#22312;&#38656;&#35201;&#20889;&#20195;&#30721;&#26469;&#27169;&#25311;&#21018;&#25165;&#22312;Android&#35774;&#22791;&#19978;&#25191;&#34892;&#30340;&#20960;&#20010;&#21160;&#20316;&#65306;&#10;1&#12289;&#25353;home&#38190;&#36827;&#20837;&#20027;&#30028;&#38754;&#10;2&#12289;&#25353;Apps&#22270;&#26631;&#36827;&#20837;&#24212;&#29992;&#30028;&#38754;&#10;3&#12289;&#28857;&#20987;&#35745;&#31639;&#22120;&#22270;&#26631;&#21551;&#21160;&#23427;&#10;&#10;&#22312;&#20320;&#30340;&#31867;&#20013;&#22768;&#26126;&#31867;&#22411;&#20026;```UiDevice```&#30340;&#21464;&#37327;```device```&#12290;&#23427;&#20195;&#34920;&#20320;&#30340;Android&#35774;&#22791;&#65292;&#21518;&#32493;&#20351;&#29992;&#23427;&#26469;&#27169;&#25311;&#29992;&#25143;&#34892;&#20026;&#12290;&#10;```Java&#10;private UiDevice device;</span><br></pre></td></tr></table></figure></p>
<p>在<figure class="highlight"><figcaption><span>method```来初始化```device```，传递```Instrumentation```实例，如下所示：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```Java&#10;device = UiDevice.getInstance(getInstrumentation());</span><br></pre></td></tr></table></figure></p>
<p>模拟点击设备home键，需要调用<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```Java&#10;device.pressHome();</span><br></pre></td></tr></table></figure></p>
<p>接下来，需要模拟点击Apps图标的动作。不能立即做这个动作，因为Android设备需要一个反应时间来加载界面。如果在屏幕显示出来之前执行这个动作就会引起运行时异常。</p>
<p>等待一些事情发生时，需要调用<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#35782;&#21035;Apps&#22270;&#26631;&#38656;&#35201;&#20351;&#29992;```By.desc```&#26041;&#27861;&#24182;&#20256;&#36882;&#20540;&#20026;**Apps**&#30340;&#21442;&#25968;&#12290;&#20320;&#36824;&#38656;&#35201;&#25351;&#23450;&#26368;&#38271;&#31561;&#24453;&#26102;&#38388;&#65292;&#21333;&#20301;&#20026;&#27627;&#31186;&#12290;&#27492;&#22788;&#35774;&#32622;&#20026;3000&#12290;&#10;&#33267;&#27492;&#24418;&#25104;&#22914;&#19979;&#20195;&#30721;&#27573;&#65306;&#10;```Java&#10;// Wait for the Apps icon to show up on the screen&#10;device.wait(Until.hasObject(By.desc(&#34;Apps&#34;)), 3000);</span><br></pre></td></tr></table></figure></p>
<p>要获取Apps图标的引用，需要使用<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```Java&#10;UiObject2 appsButton = device.findObject(By.desc(&#34;Apps&#34;));&#10;appsButton.click();</span><br></pre></td></tr></table></figure></p>
<p>和前面一样，我们需要等待一些时间，保证计算器图标显示到屏幕上。在之前的步骤中，我们看到可以通过<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```Java&#10;// Wait for the Calculator icon to show up on the screen&#10;device.wait(Until.hasObject(By.text(&#34;Calculator&#34;)), 3000);</span><br></pre></td></tr></table></figure></p>
<h2 id="5、检查计算器UI">5、检查计算器UI</h2><p>在你的Android设备上启动计算器应用，使用 <strong>UI Automater Viewer</strong> 来查看显示。获取到一个截屏后，点击不同的按钮来观察使用何值可以唯一的区分它们。</p>
<p>在本次测试用例中，使用计算器计算 <strong>9+9=</strong> 的值并确认结果是否为 <strong>18</strong>。这意味着你需要知道怎么区分按键 <strong>9</strong>、<strong>+</strong> 和 <strong>=</strong>。</p>
<p><img src="http://7xk12r.com1.z0.glb.clouddn.com/Android_UI_autotest7.jpg" alt="P7"></p>
<p>在我的设备上，如下是我收集到的信息：</p>
<ol>
<li>数字按键匹配<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. **+** &#21644; **=** &#20351;&#29992;```content-desc```&#20540;&#65292;&#20998;&#21035;&#23545;&#24212; **plus** &#21644; **equals**&#10;3. &#36820;&#22238;&#20540;&#26174;&#31034;&#22312;```EditText```&#25511;&#20214;&#20013;&#10;&#10;&#22914;&#26524;&#20320;&#20351;&#29992;&#19981;&#21516;&#29256;&#26412;&#30340;&#35745;&#31639;&#22120;&#24212;&#29992;&#65292;&#35831;&#27880;&#24847;&#36825;&#20123;&#20540;&#26377;&#21487;&#33021;&#19981;&#19968;&#26679;&#12290;&#10;&#10;##6&#12289;&#21019;&#24314;&#27979;&#35797;&#31867;&#10;&#10;&#22312;&#21069;&#38754;&#20960;&#27493;&#25805;&#20316;&#20013;&#65292;&#20320;&#24050;&#32463;&#23398;&#20250;&#20102;&#20351;&#29992;```findObject```&#26041;&#27861;&#36890;&#36807;```By.text```&#25110;&#32773;```By.desc```&#26469;&#33719;&#21462;&#23631;&#24149;&#19978;&#19981;&#21516;&#23545;&#35937;&#30340;&#24341;&#29992;&#12290;&#36824;&#23398;&#20250;&#20102;&#36890;&#36807;```click```&#26041;&#27861;&#26469;&#27169;&#25311;&#28857;&#20987;&#23545;&#35937;&#30340;&#21160;&#20316;&#12290;&#19979;&#38754;&#30340;&#20195;&#30721;&#20351;&#29992;&#36825;&#20123;&#26041;&#27861;&#26469;&#27169;&#25311; **9+9=**&#12290;&#28155;&#21152;&#36825;&#20123;&#21040;&#31867;```CalculatorTester```&#30340;&#26041;&#27861;```testAdd```&#20013;&#12290;&#10;```Java&#10;// Wait till the Calculator&#39;s buttons are on the screen        &#10;device.wait(Until.hasObject(By.text(&#34;9&#34;)), 3000);              &#10;                                                               &#10;// Select the button for 9                                     &#10;UiObject2 buttonNine = device.findObject(By.text(&#34;9&#34;));        &#10;buttonNine.click();                                            &#10;                                                               &#10;// Select the button for +                                     &#10;UiObject2 buttonPlus = device.findObject(By.desc(&#34;plus&#34;));     &#10;buttonPlus.click();                                            &#10;                                                               &#10;// Press 9 again as we are calculating 9+9                     &#10;buttonNine.click();                                            &#10;                                                               &#10;// Select the button for =                                     &#10;UiObject2 buttonEquals = device.findObject(By.desc(&#34;equals&#34;)); &#10;buttonEquals.click();</span><br></pre></td></tr></table></figure></li>
</ol>
<p>现在就等待运行结果。此处不能使用<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```Java&#10;device.waitForIdle(3000);</span><br></pre></td></tr></table></figure></p>
<p>使用<figure class="highlight"><figcaption><span>methods```方法获取```EditText```对象的引用。一旦有了此引用，就可以调用```getText``` 方法来确定计算结果是否正确。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```Java&#10;UiObject2 resultText = device.findObject(By.clazz(&#34;android.widget.EditText&#34;));&#10;String result = resultText.getText();</span><br></pre></td></tr></table></figure></p>
<p>最后，使用<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```Java&#10;assertTrue(result.equals(&#34;18&#34;));</span><br></pre></td></tr></table></figure></p>
<p>测试到此结束。</p>
<h2 id="6、执行测试">6、执行测试</h2><p>执行测试，需要在Android Studio的工具栏中选择<code>CalculatorTester</code>，点击它右方的<strong>play</strong>按钮。</p>
<p><img src="http://7xk12r.com1.z0.glb.clouddn.com/Android_UI_autotest9.png" alt="P9"></p>
<p>一旦编译结束，测试就成功运行完整。当测试运行时，在你的Android设备上就会看到UI自动化运行界面。</p>
<p><img src="http://7xk12r.com1.z0.glb.clouddn.com/Android_UI_autotest10.png" alt="P10"></p>
<h2 id="总结">总结</h2><p>在这篇教程中，我们学会了如何使用UI自动化测试模块和 <strong>UI Automater Viewer</strong> 来创建用户界面测试。你也看到了使用Android Studio执行测试是如此简单。虽然我们测试了一个相对简单的应用，但可以将从中学到的概念用到几乎所有Android应用的测试中。</p>
<p>你可以在<a href="http://developer.android.com/tools/testing-support-library/index.html" target="_blank" rel="external">Android 开发者网站中</a> 学习更多关于测试支持库的知识。</p>
<blockquote>
<p>原文链接 : <a href="http://code.tutsplus.com/tutorials/automating-user-interface-testing-on-android--cms-23969" target="_blank" rel="external">Automating User Interface Testing on Android</a><br>原文作者 : <a href="http://tutsplus.com/authors/ashraff-hathibelagal" target="_blank" rel="external">Ashraff Hathibelagal</a><br>译文出自 : <a href="http://code.tutsplus.com/" target="_blank" rel="external">tuts+</a><br>译者 : <a href="https://github.com/DorisMinmin" target="_blank" rel="external">Doris</a><br>校对者: <a href="https://github.com/bboyfeiyu" target="_blank" rel="external">Mr.Simple</a><br>状态 :  完成</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍">介绍</h2><p>Android测试支持库包含<strong>UI自动化模块</strong>，它可以对Android应用进行自动黑盒测试。在API Level 18中引入了自动化模块，它允许开发者在组成应用UI的控件上模仿用户行为。</p>
<p>在这个教程中，我将展示如何使用此模块来创建和执行一个基本的UI测试，选择默认的计算器模块进行测试。<br>]]>
    
    </summary>
    
      <category term="测试" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="自动化测试" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发III=规范-性能]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/07/developing-for-android-iii-rules-and-performance/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/07/developing-for-android-iii-rules-and-performance/</id>
    <published>2015-07-06T16:00:00.000Z</published>
    <updated>2015-07-11T16:16:56.000Z</updated>
    <content type="html"><![CDATA[<p>在Android设备上, 性能和内存是密不可分的, 系统的总内存占用会影响到系统的每个进程的性能表现, 垃圾回收机制也会对runtime的性能表现产生重要影响. 但是本章节要讨论的重点是一些和内存无关的的runtime性能表现.<br><a id="more"></a></p>
<h2 id="在动画和用户交互时避免复杂操作">在动画和用户交互时避免复杂操作</h2><p>之前在<a href="https://medium.com/google-developers/developing-for-android-i-understanding-the-mobile-context-fd2351b131f8" target="_blank" rel="external">Context</a>章节的 “UI Thread” 部分已经提到过, UI线程中的复杂操作会引起渲染过程的卡顿. 连锁反应会影响到动画效果, 因为动画的每一帧都是一次渲染. 这就意味着当有动画出现时UI线程里更应该避免复杂的操作. 下面是一些应该避免的常见情况:</p>
<h4 id="Layout:">Layout:</h4><p>Measurement和Layout是非常复杂的操作, view的层级关系越复杂, 处理起来就越耗时. Measurement和layout发生在UI线程 (所有需要改动activity里view的操作都在UI线程中进行). 这就意味着如果一个程序正在执行一个流畅的动画的时候被告知需要在UI线程中同时执行layout操作, 结果动画肯定要受罪了.</p>
<p>假设你的程序可以在13毫秒内绘制完成一个指定的动画, 这是在16毫秒的规定范围内的(Google官方推荐每秒60帧的刷新频率). 如果这时一个事件触发了需要耗时5毫秒的一个layout动作, 那么这个layout操作会在动画的下一帧绘制之前执行, 这就会将总绘制耗时增加到18毫秒, 结果就是动画效果有一个明显的跳帧.</p>
<p>为了避免这种情况的发生, layout操作要在动画开始前或动画完成后进行.  还有就是, 尽量使用不会触发layout操作的动画效果. 比如, view的translationX和translationY属性会影响post-layout属性. 而LayoutParams的属性又会触发一个layout操作去产生作用, 所以类似这种属性的动画效果会影响已经比较合理的ui显示.</p>
<h4 id="Inflation:">Inflation:</h4><p>view的inflation过程只能在UI线程完成, 如果操作不当会变成一个非常耗时的过程 (view的层级关系越深, inflation过程就越耗时) Inflation 过程可以通过主动inflate一个view或view树触发, 也可以通过启动一个不同的的activity时隐性触发, 隐性触发会发生在UI线程中, 进而会造成activity在inflation过程中的动画卡顿.</p>
<p>为了避免这种情况, 应该等待当前的动画结束后再触发view的inflation操作或者activity的启动操作. 还有一种情况就是, 为了避免多type的list在滚动时的inflation相关问题, 可以考虑预先inflate不同type的view. 比如, RecyclerView支持预设一个可以产生不同type的ItemView的RecycledViewPool.</p>
<h2 id="快速启动">快速启动</h2><p>view的inflation过程有些耗时. 并不只是解析一些资源文件那么简单, 更包含了实例化潜在的许许多多的view和各个view初始化时自身耗时的操作. 包括bitmap的解码过程, 绘制layout的过程, 还有第一次初始化时的draw过程. ui写的越复杂, view树状结构层级关系越深,整体的inflation过程就会越耗时.</p>
<p>以上的这些都会拖慢程序的启动过程. 当用户启动一个程序时, 他们期望看到的是几乎瞬时的反馈可以告知他们程序已经跑起来了. Android系统用了一个”启动界面” 来实现这一效果, 包括一个程序设定主题的空白窗口和一些特定的背景图画. “启动界面”是在程序在后台加载以及inflation的过程中在系统进程展示的. 当activity准备好可以被展示了, 启动界面就切换到了真正的内容, 用户就可以开始使用程序了.</p>
<p>启动界面的加入确实可以给用户一个快速反馈告诉用户程序正在启动, 但是这并不足以应付需要两三秒甚至更长时间启动的程序; 结果就是用户被迫坐在那里盯着空空的启动界面直到程序真正启动起来.</p>
<p>解决这个问题的办法就是用最快的速度启动程序. 如果有一些UI界面并不需要在第一次启动的时候展示, 那么就不要初始化它们. 用ViewStub 作为sub-hierarchies的临时占位对象, 这样随时可以填充为真正的UI元素. 只要有可能就尽量避免类似解码很大的bitmap这样的耗时操作. 尽量避免因为内存分配或垃圾回收引起的内存抖动. 用工具去监控程序的启动时间, 发现并消除遇到的瓶颈.</p>
<p>同时, 避免在Application对象中的初始化操作. 只要有新的进程启动, Application类就会创建新的对象. 会潜在的引起许多超出实际需要(只展示初始化UI)的操作. 比如, 当某个用户在查看一张图片时想分享它, 于是选中了你的程序, 这时你的程序需要做的只是展示一个分享界面就可以了.  现在Application的子类越来越变成了一个初始化一切操作的仓库, 做着很多多余的工作. 相反, 正确的做法是用单例去控制初始化操作, 这样的话初始化操作只会在该单例第一次被调用时执行. 还有就是, 永远不要在Application对象中触发网络请求. 因为Application对象也许会在Service或者BroadcastReceiver启动时被创建; 此时触发网络操作会使一段特定频率下请求数据更新的代码变成对服务器的DDoS攻击代码.</p>
<p>还有就是, 程序启动前所处在的状态不同, 启动时间也大不相同. 最坏一种情况是程序完全没有被启动: 此时进程需要被启动, 所有的状态也需要被重新初始化, 程序需要完成所有的inflation, layout和drawing过程. 另外一个极端情况是, 程序已经启动并在后台运行着, 这时要开启它, 系统只需要把它从后台切换到前台就可以了 - 甚至省去了大量的layout和rendering过程. 除了两种极端情况外, 还有另外两种场景. 一个是当用户退出程序时, 进程可能还在跑, 但是要再次开启程序, 所有任务需要从头来过(从调用Activity.onCreate()方法开始). 还有一种场景是当系统将程序任务从内存中删掉时, 进程和任务都需要重新启动, 但是任务结束时保存的状态会通过Activity.onCreate()传给程序并使之受益. 当你测试你的程序的启动时间时, 要确保优化的是最坏场景下的启动过程, 此时进程和任务都需要重新启动. 制造此场景的方法就是, 你可以在最近的任务列表中划掉你的程序杀掉任务和进程, 这就保证了程序下次启动时是完全重新启动的.</p>
<h2 id="避免View复杂的层级关系">避免View复杂的层级关系</h2><p>界面层级关系中的view越多, 系统进行一般的操作需要消耗的时间就越长, 比如inflation, layout和rendering过程(许多无用的内容占据了很多内存; view本身也很能占据内存, 尤其是自定义控件带来的更多数据). 要找到最节约资源的方式去组织view中的控件. 在某些场景下用自定义view或者自定义layout可以避免复杂的view层级关系. 用一个单一的view去画一些文字和icon也许比用一系列组合viewgroup来实现一样的效果更节省资源.  在交互界面中如何组合控件有一个准则: 如果用户可以和某一UI元素产生交互(比如touch事件, 获取focus等), 那么这个UI元素应该是一个独立的view 而不应该和其他元素组合.</p>
<h2 id="避免在靠近view层级关系顶层的地方使用RelativeLayout">避免在靠近view层级关系顶层的地方使用RelativeLayout</h2><p>RelativeLayout是一个用起来很方便的控件, 因为它允许工程师们用相对布局摆放子控件. 在许多情况下, 这是个解决问题非常有必要的方案. 但是, 一定要明白使用RelativeLayout非常消耗资源. 因为RelativeLayout会触发两次measurement过程来保证正确的处理了所有子元素的关系. 更糟的是, 它会和view层级关系中其他的RelativeLayout一起产生更坏的后果. 想象一下一个view层级关系的顶部是一个RelativeLayout; 这本来就将所有子view的measurement次数变成了原来的两倍. 此时如果另外一个RelativeLayout是顶部那个RelativeLayout的子view,那么这时它下面所有子view的measurement次数又变成了原来的两倍, 也就是所它下面的所有子view都经历了四次measurement过程.</p>
<p>所以要尽量使用不需要两次measure过程的控件, 比如LinearLayout或者自定义layout. 如果一定要用相对布局的方案, 可以考虑用一个自定义的GridLayout, 可以预处理view的相对关系, 从而避免了两次measure的问题.</p>
<h2 id="避免在UI线程中的复杂操作">避免在UI线程中的复杂操作</h2><p>拖延UI线程会导致动画和界面绘制过程的滞后, 造成用户可以感知到的卡顿. 在UI线程(比如 onDraw()方法 onLayout()方法, 或者一些UI线程中被调用的和view展示有关的方法)避免一些众所周知的耗时操作. 比如调用web service 或执行其它网络请求(会抛出NetworkOnMainThreadException), 或者是访问数据库. 相反, 应该考虑用Loader或者其它模块异步操作完成后再通知UI线程修改界面. 可以用StrictMode模块监控这种问题.</p>
<p>不可以在UI线程访问数据库和文件的另外一个重要原因是Android设备通常并不善于处理IO的并发. 即使你的程序闲置的时候, 其它的程序也许在高负荷的访问磁盘I/O (比如谷歌商店在更新软件). 结果就是有可能会导致ANR发生, 或者至少会导致你的程序出现的严重卡顿.</p>
<p>总的来说, 只要可以放在异步处理的任务就尽量放在异步处理; UI线程需要做的应该只是和UI相关的核心操作, 比如控制界面上元素的属性或者是绘制过程.</p>
<h2 id="把程序的唤醒次数降到最低">把程序的唤醒次数降到最低</h2><p>广播接收者被用来接受其它程序发来的消息或者事件. 但是如果超出实际需要, 响应过多的广播会导致程序被频繁的唤醒, 从而影响整个系统的性能表现和资源消耗. 应该在程序不需要接受某个广播的时候反注册掉该广播接收者. 注册广播接收者时也要只选择程序需要监听的Intent.</p>
<h2 id="为低端设备开发">为低端设备开发</h2><p>这与前面在<a href="https://medium.com/google-developers/developing-for-android-i-understanding-the-mobile-context-fd2351b131f8" target="_blank" rel="external">Context</a>章节关于低端设备的讨论有关.  也许大多数的用户的设备都不如你每天用的设备性能好, 也许比你的设备用的更久或者更便宜. 为这部分低端手机开发非常的重要, 一些在高端设备上很难察觉的性能差异在低端设备上会非常明显. 你的首选开发设备不应该是市面上最快最新的设备, 而且你也应该持有各种不同的测试设备, 这样就可以保证你的程序在不同速度不同厂商的设备上都有足够的性能表现.</p>
<p>这些需要测试的其它低性能设备包括内存较小的设备或者屏幕分辨率较小的设备. 比如512MB内存的设备, 或者拥有768x480或者更低的屏幕分辨率的设备.</p>
<h2 id="测试性能表现">测试性能表现</h2><p>市面上有许多工具可以用来测试你的程序的性能表现, 比如rendering的性能(程序可以达到60fps的刷新频率吗?), 内存回收性能(动画的过程中会因为持续的内存非配所引发的垃圾回收而发生卡顿吗?), 或者程序启动性能(用户会因为你的程序第一次启动做了大量的工作而耽误很长时间吗?). 找到问题. 修复他们.</p>
<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/google-developers/developing-for-android-iii-2efc140167fd" target="_blank" rel="external">Developing for Android, III: The Rules: Performance</a></li>
<li>原文作者 : <a href="https://medium.com/google-developers" target="_blank" rel="external">Google</a></li>
<li>译文出自 :  <a href="https://medium.com" target="_blank" rel="external">Medium.com</a></li>
<li>译者 : <a href="https://github.com/dustookk" target="_blank" rel="external">dustookk</a></li>
<li>状态 : 完成</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Android设备上, 性能和内存是密不可分的, 系统的总内存占用会影响到系统的每个进程的性能表现, 垃圾回收机制也会对runtime的性能表现产生重要影响. 但是本章节要讨论的重点是一些和内存无关的的runtime性能表现.<br>]]>
    
    </summary>
    
      <category term="性能优化" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="性能优化" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android触摸屏事件派发机制详解与源码分析一(View篇)]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/04/how-to-view-dispatch-the-touch-event-part-1/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/04/how-to-view-dispatch-the-touch-event-part-1/</id>
    <published>2015-07-03T16:00:00.000Z</published>
    <updated>2015-07-11T16:12:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1_背景"><strong>1 背景</strong></h2><p>最近在简书和微博还有Q群看见很多人说Android自定义控件（View/ViewGroup）如何学习？为啥那么难？其实答案很简单：“基础不牢，地动山摇。”</p>
<p>不扯蛋了，进入正题。就算你不自定义控件，你也必须要了解Android控件的触摸屏事件传递机制（之所以说触摸屏是因为该系列以触摸屏的事件机制分析为主，对于类似TV设备等的物理事件机制的分析雷同但有区别。哈哈，谁让我之前是做Android TV BOX的，悲催！），只有这样才能将你的控件事件运用的如鱼得水。接下来的控件触摸屏事件传递机制分析依据Android 5.1.1源码（API 22）。<br><a id="more"></a></p>
<h2 id="2_基础实例现象"><strong>2 基础实例现象</strong></h2><h3 id="2-1_例子"><strong>2-1 例子</strong></h3><p>从一个例子分析说起吧。如下是一个很简单不过的Android实例：<br><img src="http://img.blog.csdn.net/20150521095141196" alt="这里写图片描述"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">    <span class="attribute">android:gravity</span>=<span class="value">"center"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/mylayout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/my_btn"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"click test"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">public class ListenerActivity extends Activity implements View.OnTouchListener, View.OnClickListener &#123;</span><br><span class="line">    private LinearLayout mLayout;</span><br><span class="line">    private Button mButton;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">        mLayout = (LinearLayout) this.findViewById(R.id.mylayout);</span><br><span class="line">        mButton = (Button) this.findViewById(R.id.my_btn);</span><br><span class="line"></span><br><span class="line">        mLayout.setOnTouchListener(this);</span><br><span class="line">        mButton.setOnTouchListener(this);</span><br><span class="line"></span><br><span class="line">        mLayout.setOnClickListener(this);</span><br><span class="line">        mButton.setOnClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class="line">        Log.i(null, "OnTouchListener--onTouch-- action="+event.getAction()+" --"+v);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        Log.i(null, "OnClickListener--onClick--"+v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2_现象"><strong>2-2 现象</strong></h3><p>如上代码很简单，但凡学过几天Android的人都能看懂吧。Activity中有一个LinearLayout（ViewGroup的子类，ViewGroup是View的子类）布局，布局中包含一个按钮（View的子类）；然后分别对这两个控件设置了Touch与Click的监听事件，具体运行结果如下：</p>
<ol>
<li>当稳稳的点击Button时打印如下：<br><img src="http://img.blog.csdn.net/20150521100045328" alt="这里写图片描述"></li>
<li>当稳稳的点击除过Button以外的其他地方时打印如下：<br><img src="http://img.blog.csdn.net/20150521100226822" alt="这里写图片描述"></li>
<li>当收指点击Button时按在Button上晃动了一下松开后的打印如下：<br><img src="http://img.blog.csdn.net/20150521100326301" alt="这里写图片描述"></li>
</ol>
<p>机智的你看完这个结果指定知道为啥吧？<br>我们看下onTouch和onClick，从参数都能看出来onTouch比onClick强大灵活，毕竟多了一个event参数。这样onTouch里就可以处理ACTION_DOWN、ACTION_UP、ACTION_MOVE等等的各种触摸。现在来分析下上面的打印结果；在1中，当我们点击Button时会先触发onTouch事件（之所以打印action为0,1各一次是因为按下抬起两个触摸动作被触发）然后才触发onClick事件；在2中也同理类似1；在3中会发现onTouch被多次调运后才调运onClick，是因为手指晃动了，所以触发了ACTION_DOWN-&gt;ACTION_MOVE…-&gt;ACTION_UP。</p>
<p>如果你眼睛比较尖你会看见onTouch会有一个返回值，而且在上面返回了false。你可能会疑惑这个返回值有啥效果？那就验证一下吧，我们将上面的onTouch返回值改为ture。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"OnTouchListener--onTouch-- action="</span>+event.getAction()+<span class="string">" --"</span>+v);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次点击Button结果如下：<br><img src="http://img.blog.csdn.net/20150521102011228" alt="这里写图片描述"><br>看见了吧，如果onTouch返回true则onClick不会被调运了。</p>
<h3 id="2-3_总结结论"><strong>2-3 总结结论</strong></h3><p>好了，经过这个简单的实例验证你可以总结发现：</p>
<ol>
<li>Android控件的Listener事件触发顺序是先触发onTouch，其次onClick。</li>
<li>如果控件的onTouch返回true将会阻止事件继续传递，返回false事件会继续传递。</li>
</ol>
<p>对于伸手党码农来说其实到这足矣应付常规的App事件监听处理使用开发了，但是对于复杂的事件监听处理或者想自定义控件的码农来说这才是刚刚开始，只是个热身。既然这样那就继续喽。。。</p>
<h2 id="3_Android_5-1-1(API_22)_View触摸屏事件传递源码分析"><strong>3 Android 5.1.1(API 22) View触摸屏事件传递源码分析</strong></h2><h3 id="3-1_写在前面的话"><strong>3-1 写在前面的话</strong></h3><p>其实Android源码无论哪个版本对于触摸屏事件的传递机制都类似，这里只是选用了目前最新版本的源码来分析而已。分析Android View事件传递机制之前有必要先看下源码的一些关系，如下是几个继承关系图：<br><img src="http://img.blog.csdn.net/20150521103430816" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20150521103546948" alt="这里写图片描述"></p>
<p>怎么样？看了官方这个继承图是不是明白了上面例子中说的LinearLayout是ViewGroup的子类，ViewGroup是View的子类，Button是View的子类关系呢？其实，在Android中所有的控件无非都是ViewGroup或者View的子类，说高尚点就是所有控件都是View的子类。</p>
<p>这里通过继承关系是说明一切控件都是View，同时View与ViewGroup又存在一些区别，所以该模块才只单单先分析View触摸屏事件传递机制。</p>
<h3 id="3-2_从View的dispatchTouchEvent方法说起"><strong>3-2 从View的dispatchTouchEvent方法说起</strong></h3><p>在Android中你只要触摸控件首先都会触发控件的dispatchTouchEvent方法（其实这个方法一般都没在具体的控件类中，而在他的父类View中），所以我们先来看下View的dispatchTouchEvent方法，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// If the event should be handled by accessibility focus first.</span></span><br><span class="line">    <span class="keyword">if</span> (event.isTargetAccessibilityFocus()) &#123;</span><br><span class="line">        <span class="comment">// We don't have focus or no virtual descendant has it, do not handle the event.</span></span><br><span class="line">        <span class="keyword">if</span> (!isAccessibilityFocusedViewOrHost()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// We have focus and got the event, then use normal event dispatch.</span></span><br><span class="line">        event.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mInputEventConsistencyVerifier.onTouchEvent(event, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = event.getActionMasked();</span><br><span class="line">    <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        <span class="comment">// Defensive cleanup for new gesture</span></span><br><span class="line">        stopNestedScroll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</span><br><span class="line">                &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!result &amp;&amp; mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mInputEventConsistencyVerifier.onUnhandledEvent(event, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clean up after nested scrolls if this is the end of a gesture;</span></span><br><span class="line">    <span class="comment">// also cancel it if we tried an ACTION_DOWN but we didn't want the rest</span></span><br><span class="line">    <span class="comment">// of the gesture.</span></span><br><span class="line">    <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_UP ||</span><br><span class="line">            actionMasked == MotionEvent.ACTION_CANCEL ||</span><br><span class="line">            (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;</span><br><span class="line">        stopNestedScroll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dispatchTouchEvent的代码有点长，咱们看重点就可以。前面都是设置一些标记和处理input与手势等传递，到24行的<code>if (onFilterTouchEventForSecurity(event))</code>语句判断当前View是否没被遮住等，接着26行定义ListenerInfo局部变量，ListenerInfo是View的静态内部类，用来定义一堆关于View的XXXListener等方法；接着<code>if (li != null &amp;&amp; li.mOnTouchListener != null &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; li.mOnTouchListener.onTouch(this, event))</code>语句就是重点，首先li对象自然不会为null，li.mOnTouchListener呢？你会发现ListenerInfo的mOnTouchListener成员是在哪儿赋值的呢？怎么确认他是不是null呢？通过在View类里搜索可以看到：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Register a callback to be invoked when a touch event is sent to this view.</span><br><span class="line"> * <span class="doctag">@param</span> l the touch listener to attach to this view</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnTouchListener</span><span class="params">(OnTouchListener l)</span> </span>&#123;</span><br><span class="line">    getListenerInfo().mOnTouchListener = l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>li.mOnTouchListener是不是null取决于控件（View）是否设置setOnTouchListener监听，在上面的实例中我们是设置过Button的setOnTouchListener方法的，所以也不为null；接着通过位与运算确定控件（View）是不是ENABLED 的，默认控件都是ENABLED 的；接着判断onTouch的返回值是不是true。通过如上判断之后如果都为true则设置默认为false的result为true，那么接下来的<code>if (!result &amp;&amp; onTouchEvent(event))</code>就不会执行，最终dispatchTouchEvent也会返回true。而如果<code>if (li != null &amp;&amp; li.mOnTouchListener != null &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; li.mOnTouchListener.onTouch(this, event))</code>语句有一个为false则<code>if (!result &amp;&amp; onTouchEvent(event))</code>就会执行，如果onTouchEvent(event)返回false则dispatchTouchEvent返回false，否则返回true。</p>
<p>这下再看前面的实例部分明白了吧？控件触摸就会调运dispatchTouchEvent方法，而在dispatchTouchEvent中先执行的是onTouch方法，所以验证了实例结论总结中的onTouch优先于onClick执行道理。如果控件是ENABLE且在onTouch方法里返回了true则dispatchTouchEvent方法也返回true，不会再继续往下执行；反之，onTouch返回false则会继续向下执行onTouchEvent方法，且dispatchTouchEvent的返回值与onTouchEvent返回值相同。</p>
<p>所以依据这个结论和上面实例打印结果你指定已经大胆猜测认为onClick一定与onTouchEvent有关系？是不是呢？先告诉你，是的。下面我们会分析。</p>
<h4 id="3-2-1_总结结论"><strong>3-2-1 总结结论</strong></h4><p>在View的触摸屏传递机制中通过分析dispatchTouchEvent方法源码我们会得出如下基本结论：</p>
<ol>
<li>触摸控件（View）首先执行dispatchTouchEvent方法。</li>
<li>在dispatchTouchEvent方法中先执行onTouch方法，后执行onClick方法（onClick方法在onTouchEvent中执行，下面会分析）。</li>
<li>如果控件（View）的onTouch返回false或者mOnTouchListener为null（控件没有设置setOnTouchListener方法）或者控件不是enable的情况下会调运onTouchEvent，dispatchTouchEvent返回值与onTouchEvent返回一样。</li>
<li>如果控件不是enable的设置了onTouch方法也不会执行，只能通过重写控件的onTouchEvent方法处理（上面已经处理分析了），dispatchTouchEvent返回值与onTouchEvent返回一样。</li>
<li>如果控件（View）是enable且onTouch返回true情况下，dispatchTouchEvent直接返回true，不会调用onTouchEvent方法。</li>
</ol>
<p>上面说了onClick一定与onTouchEvent有关系，那么接下来就分析分析dispatchTouchEvent方法中的onTouchEvent方法。</p>
<h3 id="3-3_继续说说View的dispatchTouchEvent方法中调运的onTouchEvent方法"><strong>3-3 继续说说View的dispatchTouchEvent方法中调运的onTouchEvent方法</strong></h3><p>上面说了dispatchTouchEvent方法中如果onTouch返回false或者mOnTouchListener为null（控件没有设置setOnTouchListener方法）或者控件不是enable的情况下会调运onTouchEvent，所以接着看就知道了，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> x = event.getX();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> y = event.getY();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">            setPressed(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// A disabled view that is clickable still consumes the touch</span></span><br><span class="line">        <span class="comment">// events, it just doesn't respond to them.</span></span><br><span class="line">        <span class="keyword">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</span><br><span class="line">                (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</span><br><span class="line">            (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</span><br><span class="line">                    <span class="comment">// take focus if we don't have it already and we should in</span></span><br><span class="line">                    <span class="comment">// touch mode.</span></span><br><span class="line">                    <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</span><br><span class="line">                        focusTaken = requestFocus();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (prepressed) &#123;</span><br><span class="line">                        <span class="comment">// The button is being released before we actually</span></span><br><span class="line">                        <span class="comment">// showed it as pressed.  Make it show the pressed</span></span><br><span class="line">                        <span class="comment">// state now (before scheduling the click) to ensure</span></span><br><span class="line">                        <span class="comment">// the user sees it.</span></span><br><span class="line">                        setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!mHasPerformedLongPress) &#123;</span><br><span class="line">                        <span class="comment">// This is a tap, so remove the longpress check</span></span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Only perform take click actions if we were in the pressed state</span></span><br><span class="line">                        <span class="keyword">if</span> (!focusTaken) &#123;</span><br><span class="line">                            <span class="comment">// Use a Runnable and post this rather than calling</span></span><br><span class="line">                            <span class="comment">// performClick directly. This lets other visual state</span></span><br><span class="line">                            <span class="comment">// of the view update before click actions start.</span></span><br><span class="line">                            <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                mPerformClick = <span class="keyword">new</span> PerformClick();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (!post(mPerformClick)) &#123;</span><br><span class="line">                                performClick();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (mUnsetPressedState == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mUnsetPressedState = <span class="keyword">new</span> UnsetPressedState();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (prepressed) &#123;</span><br><span class="line">                        postDelayed(mUnsetPressedState,</span><br><span class="line">                                ViewConfiguration.getPressedStateDuration());</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</span><br><span class="line">                        <span class="comment">// If the post failed, unpress right now</span></span><br><span class="line">                        mUnsetPressedState.run();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    removeTapCallback();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                mHasPerformedLongPress = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></span><br><span class="line">                <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></span><br><span class="line">                <span class="comment">// a short period in case this is a scroll.</span></span><br><span class="line">                <span class="keyword">if</span> (isInScrollingContainer) &#123;</span><br><span class="line">                    mPrivateFlags |= PFLAG_PREPRESSED;</span><br><span class="line">                    <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</span><br><span class="line">                    &#125;</span><br><span class="line">                    mPendingCheckForTap.x = event.getX();</span><br><span class="line">                    mPendingCheckForTap.y = event.getY();</span><br><span class="line">                    postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Not inside a scrolling container, so show the feedback right away</span></span><br><span class="line">                    setPressed(<span class="keyword">true</span>, x, y);</span><br><span class="line">                    checkForLongClick(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                setPressed(<span class="keyword">false</span>);</span><br><span class="line">                removeTapCallback();</span><br><span class="line">                removeLongPressCallback();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                drawableHotspotChanged(x, y);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Be lenient about moving outside of buttons</span></span><br><span class="line">                <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</span><br><span class="line">                    <span class="comment">// Outside button</span></span><br><span class="line">                    removeTapCallback();</span><br><span class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// Remove any future long press/tap checks</span></span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line"></span><br><span class="line">                        setPressed(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我勒个去！一个方法比一个方法代码多。好吧，那咱们继续只挑重点来说明呗。</p>
<p>首先地6到14行可以看出，如果控件（View）是disenable状态，同时是可以clickable的则onTouchEvent直接消费事件返回true，反之如果控件（View）是disenable状态，同时是disclickable的则onTouchEvent直接false。多说一句，关于控件的enable或者clickable属性可以通过java或者xml直接设置，每个view都有这些属性。</p>
<p>接着22行可以看见，如果一个控件是enable且disclickable则onTouchEvent直接返回false了；反之，如果一个控件是enable且clickable则继续进入过于一个event的switch判断中，然后最终onTouchEvent都返回了true。switch的ACTION_DOWN与ACTION_MOVE都进行了一些必要的设置与置位，接着到手抬起来ACTION_UP时你会发现，首先判断了是否按下过，同时是不是可以得到焦点，然后尝试获取焦点，然后判断如果不是longPressed则通过post在UI Thread中执行一个PerformClick的Runnable，也就是performClick方法。具体如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> result;</span><br><span class="line">    <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</span><br><span class="line">    <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">        playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class="line">        li.mOnClickListener.onClick(<span class="keyword">this</span>);</span><br><span class="line">        result = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法也是先定义一个ListenerInfo的变量然后赋值，接着判断li.mOnClickListener是不是为null，决定执行不执行onClick。你指定现在已经很机智了，和onTouch一样，搜一下mOnClickListener在哪赋值的呗，结果发现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(OnClickListener l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isClickable()) &#123;</span><br><span class="line">        setClickable(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getListenerInfo().mOnClickListener = l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看见了吧！控件只要监听了onClick方法则mOnClickListener就不为null，而且有意思的是如果调运setOnClickListener方法设置监听且控件是disclickable的情况下默认会帮设置为clickable。</p>
<p>我勒个去！！！惊讶吧！！！猜的没错onClick就在onTouchEvent中执行的，而且是在onTouchEvent的ACTION_UP事件中执行的。</p>
<h4 id="3-3-1_总结结论"><strong>3-3-1 总结结论</strong></h4><ol>
<li>onTouchEvent方法中会在ACTION_UP分支中触发onClick的监听。</li>
<li>当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发下一个action。</li>
</ol>
<p>到此上面例子中关于Button点击的各种打印的真实原因都找到了可靠的证据，也就是说View的触摸屏事件传递机制其实也就这么回事。</p>
<h2 id="4_透过源码继续进阶实例验证"><strong>4 透过源码继续进阶实例验证</strong></h2><p>其实上面分析完View的触摸传递机制之后已经足够用了。如下的实例验证可以说是加深阅读源码的理解，还有一个主要作用就是为将来自定义控件打下坚实基础。因为自定义控件中时常会与这几个方法打交道。</p>
<h3 id="4-1_例子"><strong>4-1 例子</strong></h3><p>我们自定义一个Button（Button实质继承自View），如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestButton</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"dispatchTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"onTouchEvent-- action="</span>+event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">    <span class="attribute">android:gravity</span>=<span class="value">"center"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/mylayout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">com.zzci.light.TestButton</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/my_btn"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"click test"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">public class ListenerActivity extends Activity implements View.OnTouchListener, View.OnClickListener &#123;</span><br><span class="line">    private LinearLayout mLayout;</span><br><span class="line">    private TestButton mButton;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">        mLayout = (LinearLayout) this.findViewById(R.id.mylayout);</span><br><span class="line">        mButton = (TestButton) this.findViewById(R.id.my_btn);</span><br><span class="line"></span><br><span class="line">        mLayout.setOnTouchListener(this);</span><br><span class="line">        mButton.setOnTouchListener(this);</span><br><span class="line"></span><br><span class="line">        mLayout.setOnClickListener(this);</span><br><span class="line">        mButton.setOnClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class="line">        Log.i(null, "OnTouchListener--onTouch-- action="+event.getAction()+" --"+v);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        Log.i(null, "OnClickListener--onClick--"+v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实这段代码只是对上面例子中的Button换为了自定义Button而已。</p>
<h3 id="4-2_现象分析"><strong>4-2 现象分析</strong></h3><h4 id="4-2-1_点击Button（手抽筋了一下）"><strong>4-2-1 点击Button（手抽筋了一下）</strong></h4><p><img src="http://img.blog.csdn.net/20150521153718515" alt="这里写图片描述"></p>
<p>可以发现，如上打印完全符合源码分析结果，dispatchTouchEvent方法先派发down事件，完事调运onTouch，完事调运onTouchEvent返回true，同时dispatchTouchEvent返回true，然后dispatchTouchEvent继续派发move或者up事件，循环，直到onTouchEvent处理up事件时调运onClick事件，完事返回true，同时dispatchTouchEvent返回true；一次完整的View事件派发流程结束。</p>
<h4 id="4-2-2_简单修改onTouchEvent返回值为true"><strong>4-2-2 简单修改onTouchEvent返回值为true</strong></h4><p>将TestButton类的onTouchEvent方法修改如下，其他和基础代码保持不变：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"onTouchEvent-- action="</span>+event.getAction());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击Button打印如下：<br><img src="http://img.blog.csdn.net/20150521160926822" alt="这里写图片描述"></p>
<p>可以发现，当自定义了控件（View）的onTouchEvent直接返回true而不调运super方法时，事件派发机制如同4.2.1类似，只是最后up事件没有触发onClick而已（因为没有调用super）。</p>
<p>所以可想而知，如果TestButton类的onTouchEvent修改为如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"onTouchEvent-- action="</span>+event.getAction());</span><br><span class="line">    <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>点击Button如下：<br><img src="http://img.blog.csdn.net/20150521161342663" alt="这里写图片描述"></p>
<p>整个派发机制和4.2.1完全类似。</p>
<h4 id="4-2-3_简单修改onTouchEvent返回值为false"><strong>4-2-3 简单修改onTouchEvent返回值为false</strong></h4><p>将TestButton类的onTouchEvent方法修改如下，其他和基础代码保持不变：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"onTouchEvent-- action="</span>+event.getAction());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>点击Button如下：<br><img src="http://img.blog.csdn.net/20150521162024516" alt="这里写图片描述"><br>你会发现如果onTouchEvent返回false（也即dispatchTouchEvent一旦返回false将不再继续派发其他action，立即停止派发），这里只派发了down事件。至于后面触发了LinearLayout的touch与click事件我们这里不做关注，下一篇博客会详细解释为啥（其实你可以想下的，LinearLayout是ViewGroup的子类，你懂的），这里你只用知道View的onTouchEvent返回false会阻止继续派发事件。</p>
<p>同理修改如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"onTouchEvent-- action="</span>+event.getAction());</span><br><span class="line">    <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>点击Button如下：<br><img src="http://img.blog.csdn.net/20150521162525409" alt="这里写图片描述"></p>
<h4 id="4-2-4_简单修改dispatchTouchEvent返回值为true"><strong>4-2-4 简单修改dispatchTouchEvent返回值为true</strong></h4><p>将TestButton类的dispatchTouchEvent方法修改如下，其他和基础代码保持不变：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"dispatchTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击Button如下：<br><img src="http://img.blog.csdn.net/20150521163217862" alt="这里写图片描述"></p>
<p>你会发现如果dispatchTouchEvent直接返回true且不调运super任何事件都得不到触发。</p>
<p>继续修改如下呢？<br>将TestButton类的dispatchTouchEvent方法修改如下，其他和基础代码保持不变：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"dispatchTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">    <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>点击Button如下：<br><img src="http://img.blog.csdn.net/20150521163417932" alt="这里写图片描述"></p>
<p>可以发现所有事件都可以得到正常派发，和4.2.1类似。</p>
<h4 id="4-2-5_简单修改dispatchTouchEvent返回值为false"><strong>4-2-5 简单修改dispatchTouchEvent返回值为false</strong></h4><p>将TestButton类的dispatchTouchEvent方法修改如下，其他和基础代码保持不变：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"dispatchTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>点击Button如下：<br><img src="http://img.blog.csdn.net/20150521163709111" alt="这里写图片描述"></p>
<p>你会发现事件不进行任何继续触发，关于点击Button触发了LinearLayout的事件暂时不用关注，下篇详解。</p>
<p>继续修改如下呢？<br>将TestButton类的dispatchTouchEvent方法修改如下，其他和基础代码保持不变：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"dispatchTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">    <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>点击Button如下：<br><img src="http://img.blog.csdn.net/20150521164032664" alt="这里写图片描述"><br>你会发现结果和4.2.3的第二部分结果一样，也就是说如果dispatchTouchEvent返回false事件将不再继续派发下一次。</p>
<h4 id="4-2-6_简单修改dispatchTouchEvent与onTouchEvent返回值"><strong>4-2-6 简单修改dispatchTouchEvent与onTouchEvent返回值</strong></h4><p><strong>修改dispatchTouchEvent返回值为true，onTouchEvent为false：</strong></p>
<p>将TestButton类的dispatchTouchEvent方法和onTouchEvent方法修改如下，其他和基础代码保持不变：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"dispatchTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">    <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"onTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">    <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>点击Button如下：<br><img src="http://img.blog.csdn.net/20150521164403213" alt="这里写图片描述"></p>
<p><strong>修改dispatchTouchEvent返回值为false，onTouchEvent为true：</strong></p>
<p>将TestButton类的dispatchTouchEvent方法和onTouchEvent方法修改如下，其他和基础代码保持不变：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"dispatchTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">    <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    Log.i(<span class="keyword">null</span>, <span class="string">"onTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">    <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>点击Button如下：<br><img src="http://img.blog.csdn.net/20150521164637264" alt="这里写图片描述"></p>
<p>由此对比得出结论，dispatchTouchEvent事件派发是传递的，如果返回值为false将停止下次事件派发，如果返回true将继续下次派发。譬如，当前派发down事件，如果返回true则继续派发up，如果返回false派发完down就停止了。</p>
<h3 id="4-1_总结"><strong>4-1 总结</strong></h3><p>这个例子组合了很多种情况的值去验证上面源码的分析，同时也为自定义控件打下了基础。仔细理解这个例子对于View的事件传递就差不多了。</p>
<h2 id="5_总结View触摸屏事件传递机制"><strong>5 总结View触摸屏事件传递机制</strong></h2><p>上面例子也测试了，源码也分析了，总得有个最终结论方便平时写代码作为参考依据呀，不能每次都再去分析一遍源码，那得多蛋疼呢！</p>
<p>综合得出Android View的触摸屏事件传递机制有如下特征：</p>
<ol>
<li>触摸控件（View）首先执行dispatchTouchEvent方法。</li>
<li>在dispatchTouchEvent方法中先执行onTouch方法，后执行onClick方法（onClick方法在onTouchEvent中执行，下面会分析）。</li>
<li>如果控件（View）的onTouch返回false或者mOnTouchListener为null（控件没有设置setOnTouchListener方法）或者控件不是enable的情况下会调运onTouchEvent，dispatchTouchEvent返回值与onTouchEvent返回一样。</li>
<li>如果控件不是enable的设置了onTouch方法也不会执行，只能通过重写控件的onTouchEvent方法处理（上面已经处理分析了），dispatchTouchEvent返回值与onTouchEvent返回一样。</li>
<li>如果控件（View）是enable且onTouch返回true情况下，dispatchTouchEvent直接返回true，不会调用onTouchEvent方法。</li>
<li>当dispatchTouchEvent在进行事件分发的时候，只有前一个action返回true，才会触发下一个action（也就是说dispatchTouchEvent返回true才会进行下一次action派发）。</li>
</ol>
<blockquote>
<p>【工匠若水 <a href="http://blog.csdn.net/yanbober" target="_blank" rel="external">http://blog.csdn.net/yanbober</a>】</p>
<p><strong>关于上面的疑惑还有ViewGroup事件派发机制你可以继续阅读下一篇博客<a href="http://blog.csdn.net/yanbober/article/details/45912661" target="_blank" rel="external">《Android触摸屏事件派发机制详解与源码分析二(ViewGroup篇)》</a></strong>，以便继续分析View之外的ViewGroup事件传递机制。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1_背景"><strong>1 背景</strong></h2><p>最近在简书和微博还有Q群看见很多人说Android自定义控件（View/ViewGroup）如何学习？为啥那么难？其实答案很简单：“基础不牢，地动山摇。”</p>
<p>不扯蛋了，进入正题。就算你不自定义控件，你也必须要了解Android控件的触摸屏事件传递机制（之所以说触摸屏是因为该系列以触摸屏的事件机制分析为主，对于类似TV设备等的物理事件机制的分析雷同但有区别。哈哈，谁让我之前是做Android TV BOX的，悲催！），只有这样才能将你的控件事件运用的如鱼得水。接下来的控件触摸屏事件传递机制分析依据Android 5.1.1源码（API 22）。<br>]]>
    
    </summary>
    
      <category term="基础" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="其他" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android触摸屏事件派发机制详解与源码分析二(ViewGroup篇)]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/04/how-to-view-dispatch-the-touch-event-part-2/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/04/how-to-view-dispatch-the-touch-event-part-2/</id>
    <published>2015-07-03T16:00:00.000Z</published>
    <updated>2015-07-11T16:11:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1_背景"><a name="t0"></a><strong>1 背景</strong></h2><p>还记得前一篇<a href="http://blog.csdn.net/yanbober/article/details/45887547" target="_blank" rel="external">《Android触摸屏事件派发机制详解与源码分析一(View篇)》</a>中关于透过源码继续进阶实例验证模块中存在的点击Button却触发了LinearLayout的事件疑惑吗？当时说了，在那一篇咱们只讨论View的触摸事件派发机制，这个疑惑留在了这一篇解释，也就是ViewGroup的事件派发机制。</p>
<p>关于View与ViewGroup的区别在前一篇的Android 5.1.1(API 22) View触摸屏事件传递源码分析部分的写在前面的话里面有详细介绍。其实你只要记住类似Button这种控件都是View的子类，类似布局这种控件都是ViewGroup的子类，而ViewGroup又是View的子类而已。具体查阅<a href="http://blog.csdn.net/yanbober/article/details/45887547" target="_blank" rel="external">《Android触摸屏事件派发机制详解与源码分析一(View篇)》</a>。<br><a id="more"></a></p>
<h2 id="2_基础实例现象"><a name="t1"></a><strong>2 基础实例现象</strong></h2><h3 id="2-1_例子"><a name="t2"></a><strong>2-1 例子</strong></h3><p>这个例子布局等还和上一篇的例子相似，只是重写了Button和LinearLayout而已，所以效果图不在提供，具体参见上一篇。</p>
<p>首先我们简单的自定义一个Button（View的子类），再自定义一个LinearLayout（ViewGroup的子类），其实没有自定义任何属性，只是重写部分方法（添加了打印，方便查看）而已，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestButton</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"TestButton dispatchTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"TestButton onTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLinearLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestLinearLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"TestLinearLayout onInterceptTouchEvent-- action="</span> + ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"TestLinearLayout dispatchTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"TestLinearLayout onTouchEvent-- action="</span> + event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上两个控件很简单吧，不解释，继续看其他代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">com.zzci.light.TestLinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">    <span class="attribute">android:gravity</span>=<span class="value">"center"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/mylayout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">com.zzci.light.TestButton</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/my_btn"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"click test"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">com.zzci.light.TestLinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">public class ListenerActivity extends Activity implements View.OnTouchListener, View.OnClickListener &#123;</span><br><span class="line">    private TestLinearLayout mLayout;</span><br><span class="line">    private TestButton mButton;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">        mLayout = (TestLinearLayout) this.findViewById(R.id.mylayout);</span><br><span class="line">        mButton = (TestButton) this.findViewById(R.id.my_btn);</span><br><span class="line"></span><br><span class="line">        mLayout.setOnTouchListener(this);</span><br><span class="line">        mButton.setOnTouchListener(this);</span><br><span class="line"></span><br><span class="line">        mLayout.setOnClickListener(this);</span><br><span class="line">        mButton.setOnClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class="line">        Log.i(null, "OnTouchListener--onTouch-- action="+event.getAction()+" --"+v);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        Log.i(null, "OnClickListener--onClick--"+v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此基础示例的代码编写完成。没有啥难度，很简单易懂，不多解释了。</p>
<h3 id="2-2_运行现象"><a name="t3"></a><strong>2-2 运行现象</strong></h3><p>当直接点击Button时打印现象如下：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">TestLinearLayout</span> <span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=0</span></span><br><span class="line"><span class="comment">TestLinearLayout</span> <span class="comment">onInterceptTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=0</span></span><br><span class="line"><span class="comment">TestButton</span> <span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=0</span></span><br><span class="line"><span class="comment">OnTouchListener</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onTouch</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">com</span><span class="string">.</span><span class="comment">zzci</span><span class="string">.</span><span class="comment">light</span><span class="string">.</span><span class="comment">TestButton</span></span><br><span class="line"><span class="comment">TestButton</span> <span class="comment">onTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=0</span></span><br><span class="line"><span class="comment">TestLinearLayout</span> <span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=1</span></span><br><span class="line"><span class="comment">TestLinearLayout</span> <span class="comment">onInterceptTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=1</span></span><br><span class="line"><span class="comment">TestButton</span> <span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=1</span></span><br><span class="line"><span class="comment">OnTouchListener</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onTouch</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">com</span><span class="string">.</span><span class="comment">zzci</span><span class="string">.</span><span class="comment">light</span><span class="string">.</span><span class="comment">TestButton</span></span><br><span class="line"><span class="comment">TestButton</span> <span class="comment">onTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=1</span></span><br><span class="line"><span class="comment">OnClickListener</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onClick</span><span class="literal">-</span><span class="literal">-</span><span class="comment">com</span><span class="string">.</span><span class="comment">zzci</span><span class="string">.</span><span class="comment">light</span><span class="string">.</span><span class="comment">TestButton</span></span><br></pre></td></tr></table></figure>
<p>分析：你会发现这个结果好惊讶吧，点击了Button却先执行了TestLinearLayout（ViewGroup）的dispatchTouchEvent，接着执行TestLinearLayout（ViewGroup）的onInterceptTouchEvent，接着执行TestButton（TestLinearLayout包含的成员View）的dispatchTouchEvent，接着就是View触摸事件的分发流程，上一篇已经讲过了。也就是说当点击View时事件派发每一个down，up的action顺序是先触发最父级控件（这里为LinearLayout）的dispatchTouchEvent-&gt;onInterceptTouchEvent-&gt;然后向前一级传递（这里就是传递到Button View）。</p>
<p>那么继续看，当直接点击除Button以外的其他部分时打印如下：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">TestLinearLayout</span> <span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=0</span></span><br><span class="line"><span class="comment">TestLinearLayout</span> <span class="comment">onInterceptTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=0</span></span><br><span class="line"><span class="comment">OnTouchListener</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onTouch</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">com</span><span class="string">.</span><span class="comment">zzci</span><span class="string">.</span><span class="comment">light</span><span class="string">.</span><span class="comment">TestLinearLayout</span></span><br><span class="line"><span class="comment">TestLinearLayout</span> <span class="comment">onTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=0</span></span><br><span class="line"><span class="comment">TestLinearLayout</span> <span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=1</span></span><br><span class="line"><span class="comment">OnTouchListener</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onTouch</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">com</span><span class="string">.</span><span class="comment">zzci</span><span class="string">.</span><span class="comment">light</span><span class="string">.</span><span class="comment">TestLinearLayout</span></span><br><span class="line"><span class="comment">TestLinearLayout</span> <span class="comment">onTouchEvent</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">action=1</span></span><br><span class="line"><span class="comment">OnClickListener</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onClick</span><span class="literal">-</span><span class="literal">-</span><span class="comment">com</span><span class="string">.</span><span class="comment">zzci</span><span class="string">.</span><span class="comment">light</span><span class="string">.</span><span class="comment">TestLinearLayout</span></span><br></pre></td></tr></table></figure>
<p>分析：你会发现一个奇怪的现象，派发ACTION_DOWN（action=0）事件时顺序为dispatchTouchEvent-&gt;onInterceptTouchEvent-&gt;onTouch-&gt;onTouchEvent，而接着派发ACTION_UP（action=1）事件时与上面顺序不同的时竟然没触发onInterceptTouchEvent方法。这是为啥呢？我也纳闷，那就留着下面分析源码再找答案吧，先记住这个问题。</p>
<p>有了上面这个例子你是不是发现包含ViewGroup与View的事件触发有些相似又有很大差异吧（PS：在Android中继承View实现的控件已经是最小单位了，也即在XML布局等操作中不能再包含子项了，而继承ViewGroup实现的控件通常不是最小单位，可以包含不确定数目的子项）。具体差异是啥呢？咱们类似上篇一样，带着这个实例疑惑去看源码找答案吧。</p>
<h2 id="3_Android_5-1-1(API_22)_ViewGroup触摸屏事件传递源码分析"><a name="t4"></a><strong>3 Android 5.1.1(API 22) ViewGroup触摸屏事件传递源码分析</strong></h2><p>通过上面例子的打印我们可以确定分析源码的顺序，那就开始分析呗。</p>
<h3 id="3-1_从ViewGroup的dispatchTouchEvent方法说起"><a name="t5"></a><strong>3-1 从ViewGroup的dispatchTouchEvent方法说起</strong></h3><p>前一篇的3-2小节说在Android中你只要触摸控件首先都会触发控件的dispatchTouchEvent方法（其实这个方法一般都没在具体的控件类中，而在他的父类View中）。这其实是思维单单局限在View的角度去看待的，这里通过上面的例子你是否发现触摸控件会先从他的父级dispatchTouchEvent方法开始派发呢？是的，所以咱们先从ViewGroup的dispatchTouchEvent方法说起，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mInputEventConsistencyVerifier.onTouchEvent(ev, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the event targets the accessibility focused view and this is it, start</span></span><br><span class="line">    <span class="comment">// normal event dispatch. Maybe a descendant is what will handle the click.</span></span><br><span class="line">    <span class="keyword">if</span> (ev.isTargetAccessibilityFocus() &amp;&amp; isAccessibilityFocusedViewOrHost()) &#123;</span><br><span class="line">        ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> action = ev.getAction();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = action &amp; MotionEvent.ACTION_MASK;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handle an initial down.</span></span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">// Throw away all previous state when starting a new touch gesture.</span></span><br><span class="line">            <span class="comment">// The framework may have dropped the up or cancel event for the previous gesture</span></span><br><span class="line">            <span class="comment">// due to an app switch, ANR, or some other state change.</span></span><br><span class="line">            cancelAndClearTouchTargets(ev);</span><br><span class="line">            resetTouchState();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check for interception.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!disallowIntercept) &#123;</span><br><span class="line">                intercepted = onInterceptTouchEvent(ev);</span><br><span class="line">                ev.setAction(action); <span class="comment">// restore action in case it was changed</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                intercepted = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// There are no touch targets and this action is not an initial down</span></span><br><span class="line">            <span class="comment">// so this view group continues to intercept touches.</span></span><br><span class="line">            intercepted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If intercepted, start normal event dispatch. Also if there is already</span></span><br><span class="line">        <span class="comment">// a view that is handling the gesture, do normal event dispatch.</span></span><br><span class="line">        <span class="keyword">if</span> (intercepted || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check for cancelation.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> canceled = resetCancelNextUpFlag(<span class="keyword">this</span>)</span><br><span class="line">                || actionMasked == MotionEvent.ACTION_CANCEL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update list of touch targets for pointer down, if needed.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != <span class="number">0</span>;</span><br><span class="line">        TouchTarget newTouchTarget = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> alreadyDispatchedToNewTouchTarget = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!canceled &amp;&amp; !intercepted) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the event is targeting accessiiblity focus we give it to the</span></span><br><span class="line">            <span class="comment">// view that has accessibility focus and if it does not handle it</span></span><br><span class="line">            <span class="comment">// we clear the flag and dispatch the event to all children as usual.</span></span><br><span class="line">            <span class="comment">// We are looking up the accessibility focused host to avoid keeping</span></span><br><span class="line">            <span class="comment">// state since these events are very rare.</span></span><br><span class="line">            View childWithAccessibilityFocus = ev.isTargetAccessibilityFocus()</span><br><span class="line">                    ? findChildWithAccessibilityFocus() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                    || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</span><br><span class="line">                    || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = ev.getActionIndex(); <span class="comment">// always 0 for down</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> idBitsToAssign = split ? <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex)</span><br><span class="line">                        : TouchTarget.ALL_POINTER_IDS;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Clean up earlier touch targets for this pointer id in case they</span></span><br><span class="line">                <span class="comment">// have become out of sync.</span></span><br><span class="line">                removePointersFromTouchTargets(idBitsToAssign);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</span><br><span class="line">                <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</span><br><span class="line">                    <span class="comment">// Find a child that can receive the event.</span></span><br><span class="line">                    <span class="comment">// Scan children from front to back.</span></span><br><span class="line">                    <span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildOrderedChildList();</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = preorderedList == <span class="keyword">null</span></span><br><span class="line">                            &amp;&amp; isChildrenDrawingOrderEnabled();</span><br><span class="line">                    <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> childIndex = customOrder</span><br><span class="line">                                ? getChildDrawingOrder(childrenCount, i) : i;</span><br><span class="line">                        <span class="keyword">final</span> View child = (preorderedList == <span class="keyword">null</span>)</span><br><span class="line">                                ? children[childIndex] : preorderedList.get(childIndex);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// If there is a view that has accessibility focus we want it</span></span><br><span class="line">                        <span class="comment">// to get the event first and if not handled we will perform a</span></span><br><span class="line">                        <span class="comment">// normal dispatch. We may do a double iteration but this is</span></span><br><span class="line">                        <span class="comment">// safer given the timeframe.</span></span><br><span class="line">                        <span class="keyword">if</span> (childWithAccessibilityFocus != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (childWithAccessibilityFocus != child) &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            childWithAccessibilityFocus = <span class="keyword">null</span>;</span><br><span class="line">                            i = childrenCount - <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!canViewReceivePointerEvents(child)</span><br><span class="line">                                || !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                            ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        newTouchTarget = getTouchTarget(child);</span><br><span class="line">                        <span class="keyword">if</span> (newTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// Child is already receiving touch within its bounds.</span></span><br><span class="line">                            <span class="comment">// Give it the new pointer in addition to the ones it is handling.</span></span><br><span class="line">                            newTouchTarget.pointerIdBits |= idBitsToAssign;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        resetCancelNextUpFlag(child);</span><br><span class="line">                        <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</span><br><span class="line">                            <span class="comment">// Child wants to receive touch within its bounds.</span></span><br><span class="line">                            mLastTouchDownTime = ev.getDownTime();</span><br><span class="line">                            <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// childIndex points into presorted list, find original index</span></span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childrenCount; j++) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (children[childIndex] == mChildren[j]) &#123;</span><br><span class="line">                                        mLastTouchDownIndex = j;</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                mLastTouchDownIndex = childIndex;</span><br><span class="line">                            &#125;</span><br><span class="line">                            mLastTouchDownX = ev.getX();</span><br><span class="line">                            mLastTouchDownY = ev.getY();</span><br><span class="line">                            newTouchTarget = addTouchTarget(child, idBitsToAssign);</span><br><span class="line">                            alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// The accessibility focus didn't handle the event, so clear</span></span><br><span class="line">                        <span class="comment">// the flag and do a normal dispatch to all children.</span></span><br><span class="line">                        ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) preorderedList.clear();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; mFirstTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Did not find a child to receive the event.</span></span><br><span class="line">                    <span class="comment">// Assign the pointer to the least recently added target.</span></span><br><span class="line">                    newTouchTarget = mFirstTouchTarget;</span><br><span class="line">                    <span class="keyword">while</span> (newTouchTarget.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        newTouchTarget = newTouchTarget.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    newTouchTarget.pointerIdBits |= idBitsToAssign;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Dispatch to touch targets.</span></span><br><span class="line">        <span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No touch targets so treat this as an ordinary view.</span></span><br><span class="line">            handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</span><br><span class="line">                    TouchTarget.ALL_POINTER_IDS);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Dispatch to touch targets, excluding the new touch target if we already</span></span><br><span class="line">            <span class="comment">// dispatched to it.  Cancel touch targets if necessary.</span></span><br><span class="line">            TouchTarget predecessor = <span class="keyword">null</span>;</span><br><span class="line">            TouchTarget target = mFirstTouchTarget;</span><br><span class="line">            <span class="keyword">while</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> TouchTarget next = target.next;</span><br><span class="line">                <span class="keyword">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</span><br><span class="line">                    handled = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</span><br><span class="line">                            || intercepted;</span><br><span class="line">                    <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</span><br><span class="line">                            target.child, target.pointerIdBits)) &#123;</span><br><span class="line">                        handled = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (cancelChild) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (predecessor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mFirstTouchTarget = next;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            predecessor.next = next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        target.recycle();</span><br><span class="line">                        target = next;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                predecessor = target;</span><br><span class="line">                target = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update list of touch targets for pointer up or cancel, if needed.</span></span><br><span class="line">        <span class="keyword">if</span> (canceled</span><br><span class="line">                || actionMasked == MotionEvent.ACTION_UP</span><br><span class="line">                || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class="line">            resetTouchState();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_UP) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = ev.getActionIndex();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> idBitsToRemove = <span class="number">1</span> &lt;&lt; ev.getPointerId(actionIndex);</span><br><span class="line">            removePointersFromTouchTargets(idBitsToRemove);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!handled &amp;&amp; mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mInputEventConsistencyVerifier.onUnhandledEvent(ev, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我勒个去！！！这比View的dispatchTouchEvent方法长很多啊，那就只关注重点分析吧。</p>
<p><strong>第一步，17-24行，对ACTION_DOWN进行处理。</strong></p>
<p>因为ACTION_DOWN是一系列事件的开端，当是ACTION_DOWN时进行一些初始化操作，从上面源码中注释也可以看出来，清除以往的Touch状态然后开始新的手势。在这里你会发现cancelAndClearTouchTargets(ev)方法中有一个非常重要的操作就是将mFirstTouchTarget设置为了null（刚开始分析大眼瞄一眼没留意，结果越往下看越迷糊，所以这个是分析ViewGroup的dispatchTouchEvent方法第一步中重点要记住的一个地方），接着在resetTouchState()方法中重置Touch状态标识。</p>
<p><strong>第二步，26-47行，检查是否要拦截。</strong></p>
<p>在dispatchTouchEvent(MotionEvent ev)这段代码中使用变量intercepted来标记ViewGroup是否拦截Touch事件的传递，该变量类似第一步的mFirstTouchTarget变量，在后续代码中起着很重要的作用。<code>if (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null)</code>这一条判断语句说明当事件为ACTION_DOWN或者mFirstTouchTarget不为null(即已经找到能够接收touch事件的目标组件)时if成立，否则if不成立，然后将intercepted设置为true，也即拦截事件。当当事件为ACTION_DOWN或者mFirstTouchTarget不为null时判断disallowIntercept(禁止拦截)标志位，而这个标记在ViewGroup中提供了public的设置方法，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDisallowInterceptTouchEvent</span><span class="params">(<span class="keyword">boolean</span> disallowIntercept)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (disallowIntercept == ((mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">// We're already in this state, assume our ancestors are too</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (disallowIntercept) &#123;</span><br><span class="line">        mGroupFlags |= FLAG_DISALLOW_INTERCEPT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass it up to our parent</span></span><br><span class="line">    <span class="keyword">if</span> (mParent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mParent.requestDisallowInterceptTouchEvent(disallowIntercept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以你可以在其他地方调用requestDisallowInterceptTouchEvent(boolean disallowIntercept)方法，从而禁止执行是否需要拦截的判断。当disallowIntercept为true（禁止拦截判断）时则intercepted直接设置为false，否则调用onInterceptTouchEvent(ev)方法，然后将结果赋值给intercepted。那就来看下ViewGroup与众不同与View特有的onInterceptTouchEvent方法，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看见了吧，默认的onInterceptTouchEvent方法只是返回了一个false，也即intercepted=false。所以可以说明上面例子的部分打印（dispatchTouchEvent-&gt;onInterceptTouchEvent-&gt;onTouchEvent），这里很明显表明在ViewGroup的dispatchTouchEvent()中默认（不在其他地方调运requestDisallowInterceptTouchEvent方法设置禁止拦截标记）首先调用了onInterceptTouchEvent()方法。</p>
<p><strong>第三步，49-51行，检查cancel。</strong></p>
<p>通过标记和action检查cancel，然后将结果赋值给局部boolean变量canceled。</p>
<p><strong>第四步，53-函数结束，事件分发。</strong></p>
<p>54行首先可以看见获取一个boolean变量标记split来标记，默认是true，作用是是否把事件分发给多个子View，这个同样在ViewGroup中提供了public的方法设置，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMotionEventSplittingEnabled</span><span class="params">(<span class="keyword">boolean</span> split)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Applications really shouldn't change this setting mid-touch event,</span></span><br><span class="line">    <span class="comment">// but perhaps this should handle that case and send ACTION_CANCELs to any child views</span></span><br><span class="line">    <span class="comment">// with gestures in progress when this is changed.</span></span><br><span class="line">    <span class="keyword">if</span> (split) &#123;</span><br><span class="line">        mGroupFlags |= FLAG_SPLIT_MOTION_EVENTS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mGroupFlags &amp;= ~FLAG_SPLIT_MOTION_EVENTS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着57行<code>if (!canceled &amp;&amp; !intercepted)</code>判断表明，事件不是ACTION_CANCEL并且ViewGroup的拦截标志位intercepted为false(不拦截)则会进入其中。</p>
<p><strong>事件分发步骤中关于ACTION_DOWN的特殊处理</strong></p>
<p>接着67行这个很大的if语句<code>if (actionMasked == MotionEvent.ACTION_DOWN || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN) || actionMasked == MotionEvent.ACTION_HOVER_MOVE)</code>处理ACTION_DOWN事件，这个环节比较繁琐，也比较重要，如下具体分析。</p>
<p>在79行判断了childrenCount个数是否不为0，然后接着在84行拿到了子View的list集合preorderedList；接着在88行通过一个for循环i从childrenCount - 1开始遍历到0，倒序遍历所有的子view，这是因为preorderedList中的顺序是按照addView或者XML布局文件中的顺序来的，后addView添加的子View，会因为Android的UI后刷新机制显示在上层；假如点击的地方有两个子View都包含的点击的坐标，那么后被添加到布局中的那个子view会先响应事件；这样其实也是符合人的思维方式的，因为后被添加的子view会浮在上层，所以我们去点击的时候一般都会希望点击最上层的那个组件先去响应事件。</p>
<p>接着在106到112行通过getTouchTarget去查找当前子View是否在mFirstTouchTarget.next这条target链中的某一个targe中，如果在则返回这个target，否则返回null。在这段代码的if判断通过说明找到了接收Touch事件的子View，即newTouchTarget，那么，既然已经找到了，所以执行break跳出for循环。如果没有break则继续向下执行走到115行开始到134行，这里你可以看见一段if判断的代码<code>if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign))</code>，这个被if的大括弧括起来的一段代码很重要，具体解释如下：</p>
<p>调用方法dispatchTransformedTouchEvent()将Touch事件传递给特定的子View。该方法十分重要，在该方法中为一个递归调用，会递归调用dispatchTouchEvent()方法。在dispatchTouchEvent()中如果子View为ViewGroup并且Touch没有被拦截那么递归调用dispatchTouchEvent()，如果子View为View那么就会调用其onTouchEvent()。dispatchTransformedTouchEvent方法如果返回true则表示子View消费掉该事件，同时进入该if判断。满足if语句后重要的操作有：</p>
<ul>
<li>给newTouchTarget赋值；</li>
<li>给alreadyDispatchedToNewTouchTarget赋值为true；</li>
<li>执行break，因为该for循环遍历子View判断哪个子View接受Touch事件，既然已经找到了就跳出该外层for循环；</li>
</ul>
<p>如果115行if判断中的dispatchTransformedTouchEvent()方法返回false，即子View的onTouchEvent返回false(即Touch事件未被消费)，那么就不满足该if条件，也就无法执行addTouchTarget()，从而导致mFirstTouchTarget为null（没法对mFirstTouchTarget赋值，因为上面分析了mFirstTouchTarget一进来是ACTION_DOWN就置位为null了），那么该子View就无法继续处理ACTION_MOVE事件和ACTION_UP事件（28行的判断为false，也即intercepted=true了，所以之后一系列判断无法通过）。</p>
<p>如果115行if判断中的dispatchTransformedTouchEvent()方法返回true，即子View的onTouchEvent返回true(即Touch事件被消费)，那么就满足该if条件，从而mFirstTouchTarget不为null。</p>
<p>继续看143行的判断<code>if (newTouchTarget == null &amp;&amp; mFirstTouchTarget != null)</code>。该if表示经过前面的for循环没有找到子View接收Touch事件并且之前的mFirstTouchTarget不为空则为真，然后newTouchTarget指向了最初的TouchTarget。</p>
<p>通过上面67到157行关于事件分发步骤中ACTION_DOWN的特殊处理可以发现，对于此处ACTION_DOWN的处理具体体现在dispatchTransformedTouchEvent()方法，该方法返回值具备如下特征：</p>
<table>
<thead>
<tr>
<th>return</th>
<th>description</th>
<th>set</th>
</tr>
</thead>
<tbody>
<tr>
<td>true</td>
<td>事件被消费</td>
<td>mFirstTouchTarget!=null</td>
</tr>
<tr>
<td>false</td>
<td>事件未被消费</td>
<td>mFirstTouchTarget==null</td>
</tr>
</tbody>
</table>
<p>因为在dispatchTransformedTouchEvent()会调用递归调用dispatchTouchEvent()和onTouchEvent()，所以dispatchTransformedTouchEvent()的返回值实际上是由onTouchEvent()决定的。简单地说onTouchEvent()是否消费了Touch事件的返回值决定了dispatchTransformedTouchEvent()的返回值，从而决定mFirstTouchTarget是否为null，进一步决定了ViewGroup是否处理Touch事件，这一点在160行开始的代码中有体现。如下分析事件分发步骤中关于ACTION_DOWN处理之后的其他处理逻辑，也即160行开始剩余的逻辑。</p>
<p><strong>事件分发步骤中关于ACTION_DOWN处理之后的其他处理逻辑</strong></p>
<p>可以看到，如果派发的事件不是ACTION_DOWN就不会经过上面的流程，而是直接从此处开始执行。上面说了，经过上面对于ACTION_DOWN的处理后mFirstTouchTarget可能为null或者不为null。所以可以看见161行代码<code>if (mFirstTouchTarget == null)与else</code>判断了mFirstTouchTarget值是否为null的情况，完全符合如上分析。那我们分情况继续分析一下：</p>
<p>当161行if判断的mFirstTouchTarget为null时，也就是说Touch事件未被消费，即没有找到能够消费touch事件的子组件或Touch事件被拦截了，则调用ViewGroup的dispatchTransformedTouchEvent()方法处理Touch事件（和普通View一样），即子View没有消费Touch事件，那么子View的上层ViewGroup才会调用其onTouchEvent()处理Touch事件。具体就是在调用dispatchTransformedTouchEvent()时第三个参数为null，关于dispatchTransformedTouchEvent方法下面会分析，暂时先记住就行。</p>
<p>这下再回想上面例子，点击Button时为啥触发了Button的一系列touch方法而没有触发父级LinearLayout的touch方法的疑惑？明白了吧？</p>
<p>子view对于Touch事件处理返回true那么其上层的ViewGroup就无法处理Touch事件了，子view对于Touch事件处理返回false那么其上层的ViewGroup才可以处理Touch事件。</p>
<p>当161行if判断的mFirstTouchTarget不为null时，也就是说找到了可以消费Touch事件的子View且后续Touch事件可以传递到该子View。可以看见在源码的else中对于非ACTION_DOWN事件继续传递给目标子组件进行处理，依然是递归调用dispatchTransformedTouchEvent()方法来实现的处理。</p>
<p>到此ViewGroup的dispatchTouchEvent方法分析完毕。</p>
<p>上面说了ViewGroup的dispatchTouchEvent方法详细情况，也知道在其中可能会执行onInterceptTouchEvent方法，所以接下来咱们先简单分析一下这个方法。</p>
<h3 id="3-2_说说ViewGroup的dispatchTouchEvent中可能执行的onInterceptTouchEvent方法"><a name="t6"></a><strong>3-2 说说ViewGroup的dispatchTouchEvent中可能执行的onInterceptTouchEvent方法</strong></h3><p>如下系统源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到了吧，这个方法算是ViewGroup不同于View特有的一个事件派发调运方法。在源码中可以看到这个方法实现很简单，但是有一堆注释。其实上面分析了，如果ViewGroup的onInterceptTouchEvent返回false就不阻止事件继续传递派发，否则阻止传递派发。</p>
<p>对了，还记得在dispatchTouchEvent方法中除过可能执行的onInterceptTouchEvent以外在后面派发事件时执行的dispatchTransformedTouchEvent方法吗？上面分析dispatchTouchEvent时说了下面会仔细分析，那么现在就来继续看看这个方法吧。</p>
<h3 id="3-3_继续说说ViewGroup的dispatchTouchEvent中执行的dispatchTransformedTouchEvent方法"><a name="t7"></a><strong>3-3 继续说说ViewGroup的dispatchTouchEvent中执行的dispatchTransformedTouchEvent方法</strong></h3><p>ViewGroup的dispatchTransformedTouchEvent方法系统源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="keyword">boolean</span> cancel,</span><br><span class="line">        View child, <span class="keyword">int</span> desiredPointerIdBits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> handled;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Canceling motions is a special case.  We don't need to perform any transformations</span></span><br><span class="line">    <span class="comment">// or filtering.  The important part is the action, not the contents.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldAction = event.getAction();</span><br><span class="line">    <span class="keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</span><br><span class="line">        event.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handled = child.dispatchTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        event.setAction(oldAction);</span><br><span class="line">        <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate the number of pointers to deliver.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldPointerIdBits = event.getPointerIdBits();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> newPointerIdBits = oldPointerIdBits &amp; desiredPointerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If for some reason we ended up in an inconsistent state where it looks like we</span></span><br><span class="line">    <span class="comment">// might produce a motion event with no pointers in it, then drop the event.</span></span><br><span class="line">    <span class="keyword">if</span> (newPointerIdBits == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the number of pointers is the same and we don't need to perform any fancy</span></span><br><span class="line">    <span class="comment">// irreversible transformations, then we can reuse the motion event for this</span></span><br><span class="line">    <span class="comment">// dispatch as long as we are careful to revert any changes we make.</span></span><br><span class="line">    <span class="comment">// Otherwise we need to make a copy.</span></span><br><span class="line">    <span class="keyword">final</span> MotionEvent transformedEvent;</span><br><span class="line">    <span class="keyword">if</span> (newPointerIdBits == oldPointerIdBits) &#123;</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span> || child.hasIdentityMatrix()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">                handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> offsetX = mScrollX - child.mLeft;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> offsetY = mScrollY - child.mTop;</span><br><span class="line">                event.offsetLocation(offsetX, offsetY);</span><br><span class="line"></span><br><span class="line">                handled = child.dispatchTouchEvent(event);</span><br><span class="line"></span><br><span class="line">                event.offsetLocation(-offsetX, -offsetY);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> handled;</span><br><span class="line">        &#125;</span><br><span class="line">        transformedEvent = MotionEvent.obtain(event);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        transformedEvent = event.split(newPointerIdBits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform any necessary transformations and dispatch.</span></span><br><span class="line">    <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">        handled = <span class="keyword">super</span>.dispatchTouchEvent(transformedEvent);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> offsetX = mScrollX - child.mLeft;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> offsetY = mScrollY - child.mTop;</span><br><span class="line">        transformedEvent.offsetLocation(offsetX, offsetY);</span><br><span class="line">        <span class="keyword">if</span> (! child.hasIdentityMatrix()) &#123;</span><br><span class="line">            transformedEvent.transform(child.getInverseMatrix());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        handled = child.dispatchTouchEvent(transformedEvent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Done.</span></span><br><span class="line">    transformedEvent.recycle();</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到了吧，这个方法也算是ViewGroup不同于View特有的一个事件派发调运方法，而且奇葩的就是这个方法也很长。那也继续分析吧。。。</p>
<p>上面分析了，在dispatchTouchEvent()中调用dispatchTransformedTouchEvent()将事件分发给子View处理。在此我们需要重点分析该方法的第三个参数（View child）。在dispatchTouchEvent()中多次调用了dispatchTransformedTouchEvent()方法，而且有时候第三个参数为null，有时又不是，他们到底有啥区别呢？这段源码中很明显展示了结果。在dispatchTransformedTouchEvent()源码中可以发现多次对于child是否为null的判断，并且均做出如下类似的操作。其中，当child == null时会将Touch事件传递给该ViewGroup自身的dispatchTouchEvent()处理，即super.dispatchTouchEvent(event)（也就是View的这个方法，因为ViewGroup的父类是View）；当child != null时会调用该子view(当然该view可能是一个View也可能是一个ViewGroup)的dispatchTouchEvent(event)处理，即child.dispatchTouchEvent(event)。别的代码几乎没啥需要具体注意分析的。</p>
<p>所以，到此你也会发现ViewGroup没有重写View的onTouchEvent(MotionEvent event) 方法，也就是说接下来的调运关系就是上一篇分析的流程了，这里不在多说。</p>
<p>好了，到此你是不是即明白了上面实例演示的代码结果，也明白了上一篇最后升级实例验证模块留下的点击Button触发了LinearLayout的一些疑惑呢？答案自然是必须的！</p>
<h2 id="4_Android_5-1-1(API_22)_ViewGroup触摸屏事件传递总结"><a name="t8"></a><strong>4 Android 5.1.1(API 22) ViewGroup触摸屏事件传递总结</strong></h2><p>如上就是所有ViewGroup关于触摸屏事件的传递机制源码分析与实例演示。具体总结如下：</p>
<ol>
<li>Android事件派发是先传递到最顶级的ViewGroup，再由ViewGroup递归传递到View的。</li>
<li>在ViewGroup中可以通过onInterceptTouchEvent方法对事件传递进行拦截，onInterceptTouchEvent方法返回true代表不允许事件继续向子View传递，返回false代表不对事件进行拦截，默认返回false。</li>
<li>子View中如果将传递的事件消费掉，ViewGroup中将无法接收到任何事件。</li>
</ol>
<p>【工匠若水 <a href="http://blog.csdn.net/yanbober" target="_blank" rel="external">http://blog.csdn.net/yanbober</a>】</p>
<p>好了，至此整个View与ViewGroup的触摸屏事件派发机制分析完毕。关于他们的事件是哪派发来的可以继续进阶的阅读下一篇<a href="http://blog.csdn.net/yanbober/article/details/45932123" target="_blank" rel="external">《Android触摸屏事件派发机制详解与源码分析三(Activity篇)》</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1_背景"><a name="t0"></a><strong>1 背景</strong></h2><p>还记得前一篇<a href="http://blog.csdn.net/yanbober/article/details/45887547">《Android触摸屏事件派发机制详解与源码分析一(View篇)》</a>中关于透过源码继续进阶实例验证模块中存在的点击Button却触发了LinearLayout的事件疑惑吗？当时说了，在那一篇咱们只讨论View的触摸事件派发机制，这个疑惑留在了这一篇解释，也就是ViewGroup的事件派发机制。</p>
<p>关于View与ViewGroup的区别在前一篇的Android 5.1.1(API 22) View触摸屏事件传递源码分析部分的写在前面的话里面有详细介绍。其实你只要记住类似Button这种控件都是View的子类，类似布局这种控件都是ViewGroup的子类，而ViewGroup又是View的子类而已。具体查阅<a href="http://blog.csdn.net/yanbober/article/details/45887547">《Android触摸屏事件派发机制详解与源码分析一(View篇)》</a>。<br>]]>
    
    </summary>
    
      <category term="基础" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="其他" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android触摸屏事件派发机制详解与源码分析三(Activity篇)]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/04/how-to-view-dispatch-the-touch-event-part-3/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/07/04/how-to-view-dispatch-the-touch-event-part-3/</id>
    <published>2015-07-03T16:00:00.000Z</published>
    <updated>2015-07-11T16:17:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1_背景"><a name="t0"></a><strong>1 背景</strong></h2><p>还记得前面两篇从Android的基础最小元素控件（View）到ViewGroup控件的触摸屏事件分发机制分析吗？你可能看完会有疑惑，View的事件是ViewGroup派发的，那ViewGroup的事件呢？他包含在Activity上，是不是Activity也有类似的事件派发方法呢？带着这些疑惑咱们继续实例验证加源码分析吧。</p>
<p>PS：阅读本篇前建议先查看前一篇<a href="http://blog.csdn.net/yanbober/article/details/45912661" target="_blank" rel="external">《Android触摸屏事件派发机制详解与源码分析二(ViewGroup篇)》</a>与<a href="http://blog.csdn.net/yanbober/article/details/45887547" target="_blank" rel="external">《Android触摸屏事件派发机制详解与源码分析一(View篇)》</a>，这一篇承接上一篇。<br><a id="more"></a></p>
<h2 id="2_实例验证"><a name="t1"></a><strong>2 实例验证</strong></h2><h3 id="2-1_代码"><a name="t2"></a><strong>2-1 代码</strong></h3><p>如下实例与前面实例相同，一个Button在LinearLayout里，只不过我们这次重写了Activity的一些方法而已。具体如下：</p>
<p>自定义的Button与LinearLayout：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestButton</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"TestButton--dispatchTouchEvent--action="</span>+event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"TestButton--onTouchEvent--action="</span>+event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLinearLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestLinearLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"TestLinearLayout--onInterceptTouchEvent--action="</span>+ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"TestLinearLayout--dispatchTouchEvent--action="</span> + event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"TestLinearLayout--onTouchEvent--action="</span>+event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个界面的布局文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">com.example.yanbo.myapplication.TestLinearLayout</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">com.example.yanbo.myapplication.TestButton</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"click test"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/button"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">com.example.yanbo.myapplication.TestLinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>整个界面Activity，重写了Activity的一些关于触摸派发的方法（三个）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">View</span>.<span class="title">OnTouchListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TestButton mButton;</span><br><span class="line">    <span class="keyword">private</span> TestLinearLayout mLayout;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mButton = (TestButton) <span class="keyword">this</span>.findViewById(R.id.button);</span><br><span class="line">        mLayout = (TestLinearLayout) <span class="keyword">this</span>.findViewById(R.id.layout);</span><br><span class="line"></span><br><span class="line">        mButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mLayout.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        mButton.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">        mLayout.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"onClick----v="</span> + v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"onTouch--action="</span>+event.getAction()+<span class="string">"--v="</span>+v);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"MainActivity--dispatchTouchEvent--action="</span> + ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserInteraction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"MainActivity--onUserInteraction"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onUserInteraction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="keyword">null</span>, <span class="string">"MainActivity--onTouchEvent--action="</span>+event.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上就是实例测试代码，非常简单，没必要分析，直接看结果吧。</p>
<h3 id="2-2_结果分析"><a name="t3"></a><strong>2-2 结果分析</strong></h3><p>直接点击Button按钮打印如下：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">MainActivity</span><span class="literal">-</span><span class="literal">-</span><span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span></span><br><span class="line"><span class="comment">MainActivity</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onUserInteraction</span></span><br><span class="line"><span class="comment">TestLinearLayout</span><span class="literal">-</span><span class="literal">-</span><span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span></span><br><span class="line"><span class="comment">TestLinearLayout</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onInterceptTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span></span><br><span class="line"><span class="comment">TestButton</span><span class="literal">-</span><span class="literal">-</span><span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span></span><br><span class="line"><span class="comment">onTouch</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span><span class="literal">-</span><span class="literal">-</span><span class="comment">v=com</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">yanbo</span><span class="string">.</span><span class="comment">myapplication</span><span class="string">.</span><span class="comment">TestButton</span></span><br><span class="line"><span class="comment">TestButton</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span></span><br><span class="line"><span class="comment">MainActivity</span><span class="literal">-</span><span class="literal">-</span><span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=1</span></span><br><span class="line"><span class="comment">TestLinearLayout</span><span class="literal">-</span><span class="literal">-</span><span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=1</span></span><br><span class="line"><span class="comment">TestLinearLayout</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onInterceptTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=1</span></span><br><span class="line"><span class="comment">TestButton</span><span class="literal">-</span><span class="literal">-</span><span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=1</span></span><br><span class="line"><span class="comment">onTouch</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=1</span><span class="literal">-</span><span class="literal">-</span><span class="comment">v=com</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">yanbo</span><span class="string">.</span><span class="comment">myapplication</span><span class="string">.</span><span class="comment">TestButton</span></span><br><span class="line"><span class="comment">TestButton</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=1</span></span><br><span class="line"><span class="comment">onClick</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">v=com</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">yanbo</span><span class="string">.</span><span class="comment">myapplication</span><span class="string">.</span><span class="comment">TestButton</span></span><br></pre></td></tr></table></figure>
<p>分析可以发现，当点击Button时除过派发Activity的几个新方法之外其他完全符合前面两篇分析的View与ViewGroup的触摸事件派发机制。对于Activity来说，ACTION_DOWN事件首先触发dispatchTouchEvent，然后触发onUserInteraction，再次onTouchEvent，接着的ACTION_UP事件触发dispatchTouchEvent后触发了onTouchEvent，也就是说ACTION_UP事件时不会触发onUserInteraction（待会可查看源代码分析原因）。</p>
<p>直接点击Button以外的其他区域：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">MainActivity</span><span class="literal">-</span><span class="literal">-</span><span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span></span><br><span class="line"><span class="comment">MainActivity</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onUserInteraction</span></span><br><span class="line"><span class="comment">TestLinearLayout</span><span class="literal">-</span><span class="literal">-</span><span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span></span><br><span class="line"><span class="comment">TestLinearLayout</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onInterceptTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span></span><br><span class="line"><span class="comment">onTouch</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span><span class="literal">-</span><span class="literal">-</span><span class="comment">v=com</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">yanbo</span><span class="string">.</span><span class="comment">myapplication</span><span class="string">.</span><span class="comment">TestLinearLayout</span></span><br><span class="line"><span class="comment">TestLinearLayout</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=0</span></span><br><span class="line"><span class="comment">MainActivity</span><span class="literal">-</span><span class="literal">-</span><span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=1</span></span><br><span class="line"><span class="comment">TestLinearLayout</span><span class="literal">-</span><span class="literal">-</span><span class="comment">dispatchTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=1</span></span><br><span class="line"><span class="comment">onTouch</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=1</span><span class="literal">-</span><span class="literal">-</span><span class="comment">v=com</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">yanbo</span><span class="string">.</span><span class="comment">myapplication</span><span class="string">.</span><span class="comment">TestLinearLayout</span></span><br><span class="line"><span class="comment">TestLinearLayout</span><span class="literal">-</span><span class="literal">-</span><span class="comment">onTouchEvent</span><span class="literal">-</span><span class="literal">-</span><span class="comment">action=1</span></span><br><span class="line"><span class="comment">onClick</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">v=com</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">yanbo</span><span class="string">.</span><span class="comment">myapplication</span><span class="string">.</span><span class="comment">TestLinearLayout</span></span><br></pre></td></tr></table></figure>
<p>怎么样？完全符合上面点击Button结果分析的猜想。</p>
<p>那接下来还是要看看Activity里关于这几个方法的源码了。</p>
<h2 id="3_Android_5-1-1(API_22)_Activity触摸屏事件传递源码分析"><a name="t4"></a><strong>3 Android 5.1.1(API 22) Activity触摸屏事件传递源码分析</strong></h2><p>通过上面例子的打印我们可以确定分析源码的顺序，那就开始分析呗。</p>
<h3 id="3-1_从Activity的dispatchTouchEvent方法说起"><a name="t5"></a><strong>3-1 从Activity的dispatchTouchEvent方法说起</strong></h3><h4 id="3-1-1_开始分析"><a name="t6"></a><strong>3-1-1 开始分析</strong></h4><p>先上源码，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Called to process touch screen events.  You can override this to</span><br><span class="line"> * intercept all touch screen events before they are dispatched to the</span><br><span class="line"> * window.  Be sure to call this implementation for touch screen events</span><br><span class="line"> * that should be handled normally.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> ev The touch screen event.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> boolean Return true if this event was consumed.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        onUserInteraction();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> onTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>哎呦！这次看着代码好少的样子，不过别高兴，浓缩才是精华，这里代码虽少，涉及的问题点还是很多的，那么咱们就来一点一点分析吧。</p>
<p>12到14行看见了吧？上面例子咱们看见只有ACTION_DOWN事件派发时调运了onUserInteraction方法，当时还在疑惑呢，这下明白了吧，不多解释，咱们直接跳进去可以看见是一个空方法，具体下面会分析。</p>
<p>好了，自己分析15到17行，看着简单吧，我勒个去，我怎么有点懵，这是哪的方法？咱们分析分析吧。</p>
<p>首先分析Activity的attach方法可以发现getWindow()返回的就是PhoneWindow对象（PhoneWindow为抽象Window的实现子类），那就简单了，也就相当于PhoneWindow类的方法，而PhoneWindow类实现于Window抽象类，所以先看下Window类中抽象方法的定义，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Used by custom windows, such as Dialog, to pass the touch screen event</span><br><span class="line"> * further down the view hierarchy. Application developers should</span><br><span class="line"> * not need to implement or call this.</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span>;</span><br></pre></td></tr></table></figure>
<p>看见注释没有？用户不需要重写实现的方法，实质也不能，在Activity中没有提供重写的机会，因为Window是以组合模式与Activity建立关系的。好了，看完了抽象的Window方法，那就去PhoneWindow里看下Window抽象方法的实现吧，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>又是看着好简单的样子哦，实际又是一堆问题，继续分析。你会发现在PhoneWindow的superDispatchTouchEvent方法里又直接返回了另一个mDecor对象的superDispatchTouchEvent方法，mDecor是啥？继续分析吧。</p>
<p>在PhoneWindow类里发现，mDecor是DecorView类的实例，同时DecorView是PhoneWindow的内部类。最惊人的发现是DecorView extends FrameLayout implements RootViewSurfaceTaker，看见没有？它是一个真正Activity的root view,它继承了FrameLayout。怎么验证他一定是root view呢？很简单，不知道大家是不是熟悉Android App开发技巧中关于UI布局优化使用的SDK工具Hierarchy Viewer。咱们通过他来看下上面刚刚展示的那个例子的Hierarchy Viewer你就明白了，如下我在Ubuntu上截图的Hierarchy Viewer分析结果：</p>
<p><img src="http://img.blog.csdn.net/20150523104058889" alt="这里写图片描述"></p>
<p>看见没有，我们上面例子中Activity中setContentView时放入的xml layout是一个LinearLayout，其中包含一个Button，上图展示了我们放置的LinearLayout被放置在一个id为content的FrameLayout的布局中，这也就是为啥Activity的setContentView方法叫set content view了，就是把我们的xml放入了这个id为content的FrameLayout中。</p>
<p>赶快回过头，你是不是发现上面PhoneWindow的superDispatchTouchEvent直接返回了DecorView的superDispatchTouchEvent，而DecorView又是FrameLayout的子类，FrameLayout又是ViewGroup的子类。机智的你想到了啥木有？</p>
<p>没想到就继续看下DecorView类的superDispatchTouchEvent方法吧，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这回你一定恍然大悟了吧，不然就得脑补前面两篇博客的内容了。。。</p>
<p>搞半天Activity的dispatchTouchEvent方法的15行<code>if (getWindow().superDispatchTouchEvent(ev))</code>本质执行的是一个ViewGroup的dispatchTouchEvent方法（这个ViewGroup是Activity特有的root view，也就是id为content的FrameLayout布局），接下来就不用多说了吧，完全是前面两篇分析的执行过程。</p>
<p>接下来依据派发事件返回值决定是否触发Activity的onTouchEvent方法。</p>
<h4 id="3-1-2_小总结一下"><a name="t7"></a><strong>3-1-2 小总结一下</strong></h4><p>在Activity的触摸屏事件派发中：</p>
<ol>
<li>首先会触发Activity的dispatchTouchEvent方法。</li>
<li>dispatchTouchEvent方法中如果是ACTION_DOWN的情况下会接着触发onUserInteraction方法。</li>
<li>接着在dispatchTouchEvent方法中会通过Activity的root View（id为content的FrameLayout），实质是ViewGroup，通过super.dispatchTouchEvent把touchevent派发给各个activity的子view，也就是我们再Activity.onCreat方法中setContentView时设置的view。</li>
<li>若Activity下面的子view拦截了touchevent事件(返回true)则Activity.onTouchEvent方法就不会执行。</li>
</ol>
<h3 id="3-2_继续Activity的dispatchTouchEvent方法中调运的onUserInteraction方法"><a name="t8"></a><strong>3-2 继续Activity的dispatchTouchEvent方法中调运的onUserInteraction方法</strong></h3><p>如下源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Called whenever a key, touch, or trackball event is dispatched to the</span><br><span class="line"> * activity.  Implement this method if you wish to know that the user has</span><br><span class="line"> * interacted with the device in some way while your activity is running.</span><br><span class="line"> * This callback and &#123;<span class="doctag">@link</span> #onUserLeaveHint&#125; are intended to help</span><br><span class="line"> * activities manage status bar notifications intelligently; specifically,</span><br><span class="line"> * for helping activities determine the proper time to cancel a notfication.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;All calls to your activity's &#123;<span class="doctag">@link</span> #onUserLeaveHint&#125; callback will</span><br><span class="line"> * be accompanied by calls to &#123;<span class="doctag">@link</span> #onUserInteraction&#125;.  This</span><br><span class="line"> * ensures that your activity will be told of relevant user activity such</span><br><span class="line"> * as pulling down the notification pane and touching an item there.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;Note that this callback will be invoked for the touch down action</span><br><span class="line"> * that begins a touch gesture, but may not be invoked for the touch-moved</span><br><span class="line"> * and touch-up actions that follow.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> #onUserLeaveHint()</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserInteraction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搞了半天就像上面说的，这是一个空方法，那它的作用是啥呢？</p>
<p>此方法是activity的方法，当此activity在栈顶时，触屏点击按home，back，menu键等都会触发此方法。下拉statubar、旋转屏幕、锁屏不会触发此方法。所以它会用在屏保应用上，因为当你触屏机器 就会立马触发一个事件，而这个事件又不太明确是什么，正好屏保满足此需求；或者对于一个Activity，控制多长时间没有用户点响应的时候，自己消失等。</p>
<p>这个方法也分析完了，那就剩下onTouchEvent方法了，如下继续分析。</p>
<h3 id="3-3_继续Activity的dispatchTouchEvent方法中调运的onTouchEvent方法"><a name="t9"></a><strong>3-3 继续Activity的dispatchTouchEvent方法中调运的onTouchEvent方法</strong></h3><p>如下源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Called when a touch screen event was not handled by any of the views</span><br><span class="line"> * under it.  This is most useful to process touch events that happen</span><br><span class="line"> * outside of your window bounds, where there is no view to receive it.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> event The touch screen event being processed.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> Return true if you have consumed the event, false if you haven't.</span><br><span class="line"> * The default implementation always returns false.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mWindow.shouldCloseOnTouch(<span class="keyword">this</span>, event)) &#123;</span><br><span class="line">        finish();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看见没有，这个方法看起来好简单的样子。</p>
<p>如果一个屏幕触摸事件没有被这个Activity下的任何View所处理，Activity的onTouchEvent将会调用。这对于处理window边界之外的Touch事件非常有用，因为通常是没有View会接收到它们的。返回值为true表明你已经消费了这个事件，false则表示没有消费，默认实现中返回false。</p>
<p>继续分析吧，重点就一句，mWindow.shouldCloseOnTouch(this, event)中的mWindow实际就是上面分析dispatchTouchEvent方法里的getWindow()对象，所以直接到Window抽象类和PhoneWindow子类查看吧，发现PhoneWindow没有重写Window的shouldCloseOnTouch方法，所以看下Window类的shouldCloseOnTouch实现吧，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldCloseOnTouch</span><span class="params">(Context context, MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCloseOnTouchOutside &amp;&amp; event.getAction() == MotionEvent.ACTION_DOWN</span><br><span class="line">            &amp;&amp; isOutOfBounds(context, event) &amp;&amp; peekDecorView() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这其实就是一个判断，判断mCloseOnTouchOutside标记及是否为ACTION_DOWN事件，同时判断event的x、y坐标是不是超出Bounds，然后检查FrameLayout的content的id的DecorView是否为空。其实没啥太重要的，这只是对于处理window边界之外的Touch事件有判断价值而已。</p>
<p>所以，到此Activity的onTouchEvent分析完毕。</p>
<h2 id="4_Android触摸事件综合总结"><a name="t10"></a><strong>4 Android触摸事件综合总结</strong></h2><p>到此整个Android的Activity-&gt;ViewGroup-&gt;View的触摸屏事件分发机制完全分析完毕。这时候你可以回过头看这三篇文章的例子，你会完全明白那些打印的含义与原理。</p>
<p>当然，了解这些源码机制不仅对你写普通代码时有帮助，最重要的是对你想自定义装逼控件时有不可磨灭的基础性指导作用与技巧提示作用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1_背景"><a name="t0"></a><strong>1 背景</strong></h2><p>还记得前面两篇从Android的基础最小元素控件（View）到ViewGroup控件的触摸屏事件分发机制分析吗？你可能看完会有疑惑，View的事件是ViewGroup派发的，那ViewGroup的事件呢？他包含在Activity上，是不是Activity也有类似的事件派发方法呢？带着这些疑惑咱们继续实例验证加源码分析吧。</p>
<p>PS：阅读本篇前建议先查看前一篇<a href="http://blog.csdn.net/yanbober/article/details/45912661">《Android触摸屏事件派发机制详解与源码分析二(ViewGroup篇)》</a>与<a href="http://blog.csdn.net/yanbober/article/details/45887547">《Android触摸屏事件派发机制详解与源码分析一(View篇)》</a>，这一篇承接上一篇。<br>]]>
    
    </summary>
    
      <category term="基础" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="其他" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[手动实现布局Transitions动画-第三部分]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/30/manual-layout-transitions-part-3/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/30/manual-layout-transitions-part-3/</id>
    <published>2015-06-29T16:00:00.000Z</published>
    <updated>2015-07-11T16:00:41.000Z</updated>
    <content type="html"><![CDATA[<p>布局切换动画在Material design中是一个重要的方面,因为它们能够指明应用的工作流程，并且能够将UI上的可视化元素绑定在一起作为用户的导航。两个重要的工具可以实现这种效果，分别为Activity转场动画和布局动画（Layout Transitions）。然后布局动画需要在API 19及其之后才支持。</p>
<p>上一篇文章中我们创建了两个布局代表两个视图状态，我们通过setContentView来切换它们。这篇文章我们在它们切换时添加动画效果。<br><a id="more"></a><br>我们已经找掌握了关于动画的相关基础知识，现在我们就要在两个布局状态切换时加入动画。</p>
<p>我们定义的两个布局都有相同的View以及id,两个状态的切换只是会修改这些视图的可见性以及位置。因此我们仅仅需要检测这些自然变化，然后应用合适的位置变换或者alpha动画到每个视图上。值得注意的是，由于我们加载了一个新的布局，但是两个布局中的视图类型和id都是一样的，它们代表的是两个不同的视图对象。此时，我们需要切换到一个新的布局视图中，旧的布局视图就不会出现在我们的视野中，所以我们不能确定旧布局视图的控件状态。因此我们需要一种机制来存储旧布局中特定View的状态属性。</p>
<p>part3/ViewState.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> visibility;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewState <span class="title">ofView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> top = view.getTop();</span><br><span class="line">        <span class="keyword">int</span> visibility = view.getVisibility();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewState(top, visibility);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ViewState</span><span class="params">(<span class="keyword">int</span> top, <span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.top = top;</span><br><span class="line">        <span class="keyword">this</span>.visibility = visibility;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMovedVertically</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view.getTop() != top;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasAppeared</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newVisibility = view.getVisibility();</span><br><span class="line">        <span class="keyword">return</span> visibility != newVisibility &amp;&amp; newVisibility == View.VISIBLE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasDisappeared</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newVisibility = view.getVisibility();</span><br><span class="line">        <span class="keyword">return</span> visibility != newVisibility &amp;&amp; newVisibility != View.VISIBLE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码非常简单，因为我们只关心各视图的竖直偏移量和可见性。此外也就是写辅助方法以便于我们能够确定视图对象是否发生了改变。</p>
<p>此时我们已经有了一套机制来存储不在可见范围的视图的状态,下面我们来看看我们如何运用的。当我们调用setContentView时，通过TransitionController我们已经有了切换布局的机制。下一步我们需要做的就是在我们切换布局之前捕获这些视图的状态，并且替换掉。我们会通过TransitionAnimator类来实现这些功能，它会计算并且执行动画。Part3TransitionController类的代码如下 : </p>
<p>part3/Part3TransitionController</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Part3TransitionController</span> <span class="keyword">extends</span> <span class="title">TransitionController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Part3TransitionController(WeakReference&lt;Activity&gt; activityWeakReference, AnimatorBuilder animatorBuilder) &#123;</span><br><span class="line">        <span class="keyword">super</span>(activityWeakReference, animatorBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TransitionController <span class="title">newInstance</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        WeakReference&lt;Activity&gt; activityWeakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">        AnimatorBuilder animatorBuilder = AnimatorBuilder.newInstance(activity);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Part3TransitionController(activityWeakReference, animatorBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">enterInputMode</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        createTransitionAnimator(activity);</span><br><span class="line">        activity.setContentView(R.layout.activity_part2_input);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">exitInputMode</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        createTransitionAnimator(activity);</span><br><span class="line">        activity.setContentView(R.layout.activity_part2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createTransitionAnimator</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        ViewGroup parent = (ViewGroup) activity.findViewById(android.R.id.content);</span><br><span class="line">        View inputView = parent.findViewById(R.id.input_view);</span><br><span class="line">        View inputDone = parent.findViewById(R.id.input_done);</span><br><span class="line">        View translation = parent.findViewById(R.id.translation);</span><br><span class="line"> </span><br><span class="line">        TransitionAnimator.begin(parent, inputView, inputDone, translation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里添加了一个createTransitionAnimator函数来查找视图，并且调用了TransitionAnimator的begin函数。这个函数在enterInputMode和exitInputMode 函数中调用Activity的setContentView之前被调用。你需要注意的是TransitionAnimator只是在两个视图状态之间进行切换，因此除了那些我们感兴趣的视图之外我们不需要对这两个布局有额外的了解。</p>
<p>我们看看TransitionAnimator类 : </p>
<p>So let’s take a look at TransitionAnimator:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransitionAnimator</span> <span class="keyword">implements</span> <span class="title">ViewTreeObserver</span>.<span class="title">OnPreDrawListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ViewGroup parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;ViewState&gt; startStates;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AnimatorBuilder animatorBuilder;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(ViewGroup parent, View... views)</span> </span>&#123;</span><br><span class="line">        SparseArray&lt;ViewState&gt; startStates = buildViewStates(views);</span><br><span class="line">        AnimatorBuilder animatorBuilder = AnimatorBuilder.newInstance(parent.getContext());</span><br><span class="line">        <span class="keyword">final</span> TransitionAnimator transitionAnimator = <span class="keyword">new</span> TransitionAnimator(animatorBuilder, parent, startStates);</span><br><span class="line">        ViewTreeObserver viewTreeObserver = parent.getViewTreeObserver();</span><br><span class="line">        viewTreeObserver.addOnPreDrawListener(transitionAnimator);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TransitionAnimator</span><span class="params">(AnimatorBuilder animatorBuilder, ViewGroup parent, SparseArray&lt;ViewState&gt; startStates)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.animatorBuilder = animatorBuilder;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        <span class="keyword">this</span>.startStates = startStates;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SparseArray&lt;ViewState&gt; <span class="title">buildViewStates</span><span class="params">(View... views)</span> </span>&#123;</span><br><span class="line">        SparseArray&lt;ViewState&gt; viewStates = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (View view : views) &#123;</span><br><span class="line">            viewStates.put(view.getId(), ViewState.ofView(view));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> viewStates;</span><br><span class="line">    &#125;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在TransitionController类中调用TransitionAnimator的begin函数来做一些准备。</p>
<p>在begin函数中首先会调用buildViewStates函数来遍历所有传递进来的视图，并且将这些视图的状态以视图id为key存储到SparseArray对象中。然后通过AnimatorBuilder对象和parent视图和存储了视图状态的SparseArray对象来创建一个TransitionAnimator实例。</p>
<p>现在的代码看起来聪明一点了。在旧布局还没有从我们的视野中消失时我们捕获了它的视图状态，但是需要在新的布局创建之前我们现在需要做些其他的事情。我们不能简单的加载一个布局并且运用它，因为布局中的子视图可能还在错误的位置，直到我们经过了测量和布局两个过程之后它们才会在正确的位置。但是现在我们做的只是在parent容器中注册了一个OnPreDrawListener.这使得我们在parent下次绘制之前能够触发一个OnPreDrawListener回调。当TransitionController类中调用setContentView函数时，这个回调会在新布局被加载、测量和布局过程完成之后被调用一次，但是这个调用会执行在视图绘制之前。</p>
<p>TransitionAnimator类实现了ViewTreeObserver.OnPreDrawListener，并且被注册为OnPreDrawLister。它的onPreDraw函数会在新布局会绘制前调用。onPreDraw函数如下 : </p>
<p>part3/TransitionAnimator.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreDraw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ViewTreeObserver viewTreeObserver = parent.getViewTreeObserver();</span><br><span class="line">    viewTreeObserver.removeOnPreDrawListener(<span class="keyword">this</span>);</span><br><span class="line">    SparseArray&lt;View&gt; views = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startStates.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> resId = startStates.keyAt(i);</span><br><span class="line">        View view = parent.findViewById(resId);</span><br><span class="line">        views.put(view.getId(), view);</span><br><span class="line">    &#125;</span><br><span class="line">    Animator animator = buildAnimator(views);</span><br><span class="line">    animator.start();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在onPreDraw函数中首先将TransitionAnimator自身从ViewTreeObserver中注销，因为我们不需要在每次绘制之前都回调onPreDraw函数。如果我们忘记了注销那么它会变得相对重量级，以至于会影响动画的流畅度。我们只需要在替换布局时回调一次onPreDraw函数，然后我们会在次函数中开始执行切换动画。</p>
<p>下一步我们要做的是迭代前面构建的SparseArray中的ViewStates，从ViewStates中取出视图id，然后根据这个id到parent中找到对应的视图，最后将视图存储到另一个SparseArray对象中。最后将这个SparseArray对象传递给buildAnimator函数。</p>
<p>part3/TransitionAnimator.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Animator <span class="title">buildAnimator</span><span class="params">(SparseArray&lt;View&gt; views)</span> </span>&#123;</span><br><span class="line">    AnimatorSet animatorSet = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">    List&lt;Animator&gt; animators = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; views.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> resId = views.keyAt(i);</span><br><span class="line">        ViewState startState = startStates.get(resId);</span><br><span class="line">        View view = views.get(resId);</span><br><span class="line">        animators.add(buildViewAnimator(view, startState));</span><br><span class="line">    &#125;</span><br><span class="line">    animatorSet.playTogether(animators);</span><br><span class="line">    <span class="keyword">return</span> animatorSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这会构建一个包含了所有独立视图Animator的集合，这些Animator会并行的执行。在构建合适的Animator时会又调用buildViewAnimator函数。</p>
<p>part3/TransitionAnimator.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Animator <span class="title">buildViewAnimator</span><span class="params">(<span class="keyword">final</span> View view, ViewState startState)</span> </span>&#123;</span><br><span class="line">    Animator animator = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (startState.hasAppeared(view)) &#123;</span><br><span class="line">        animator = animatorBuilder.buildShowAnimator(view);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (startState.hasDisappeared(view)) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> visibility = view.getVisibility();</span><br><span class="line">        view.setVisibility(View.VISIBLE);</span><br><span class="line">        animator = animatorBuilder.buildHideAnimator(view);</span><br><span class="line">        animator.addListener(</span><br><span class="line">                <span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(@NonNull Animator animation)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">super</span>.onAnimationEnd(animation);</span><br><span class="line">                        view.setVisibility(visibility);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (startState.hasMovedVertically(view)) &#123;</span><br><span class="line">        <span class="keyword">int</span> startY = startState.getY();</span><br><span class="line">        <span class="keyword">int</span> endY = view.getTop();</span><br><span class="line">        animator = animatorBuilder.buildTranslationYAnimator(view, startY - endY, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> animator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该函数中会调用ViewState中的辅助方法确定每个视图的转换的类型。这些转换类型有三种,分别为一个invisible的视图变为visible、一个visible的视图变为invisible、在y轴上移动视图。每个转换动画我们都会构建一个对应的Animator对象。</p>
<p>如果此时我们运行这个示例，我们会看到很好的效果。<a href="https://youtu.be/CuigoE_Hjb4" target="_blank" rel="external">视频地址</a>。</p>
<p>这些代码能够很好的工作，但是有一个明显的问题它需要起始布局中的所有的视图在结束布局都有对应的视图，也就是两个布局中都含有类型和id的子view。但是这不是并不是所有的情况下都会这样。在下一篇文章中我们看看如何适配这个特定的场景。</p>
<p>源代码在<a href="https://github.com/StylingAndroid/ManualLayoutTransitions/tree/Part3" target="_blank" rel="external">这里</a>。</p>
<blockquote>
<ul>
<li>原文链接 : <a href="https://blog.stylingandroid.com/manual-layout-transitions-part-3/" target="_blank" rel="external">Manual Layout Transitions – Part 3</a></li>
<li><a href="http://www.devtf.cn" target="_blank" rel="external">译文出自 :  开发技术前线 www.devtf.cn</a></li>
<li>译者 : <a href="https://github.com/bboyfeiyu" target="_blank" rel="external">Mr.Simple</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>布局切换动画在Material design中是一个重要的方面,因为它们能够指明应用的工作流程，并且能够将UI上的可视化元素绑定在一起作为用户的导航。两个重要的工具可以实现这种效果，分别为Activity转场动画和布局动画（Layout Transitions）。然后布局动画需要在API 19及其之后才支持。</p>
<p>上一篇文章中我们创建了两个布局代表两个视图状态，我们通过setContentView来切换它们。这篇文章我们在它们切换时添加动画效果。<br>]]>
    
    </summary>
    
      <category term="动画" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="连载" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/%E8%BF%9E%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView的拖动和滑动一 ：基本的ItemTouchHelper示例]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/30/drag-and-swipe-with-recyclerview/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/30/drag-and-swipe-with-recyclerview/</id>
    <published>2015-06-29T16:00:00.000Z</published>
    <updated>2015-07-11T15:59:30.000Z</updated>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf" target="_blank" rel="external">Drag and Swipe with RecyclerView</a> </p>
<p><img src="http://www.jcodecraeer.com/uploads/20150630/1435641365165672.gif" alt="1_4Cqfs-75ibhvC_3BMEIvVA.ogv_1435641250.gif" title="1435641365165672.gif"></p>
<p>在安卓中，有许多关于如何使用RecyclerView实现“drag &amp; drop”与swipe-to-dismiss”的教程，库和例子。即使现在已经有了新的，更优的实现方式，大多数仍然是使用老旧的<a href="http://developer.android.com/guide/topics/ui/drag-drop.html" target="_blank" rel="external">View.OnDragListener</a>以及Roman Nurik在<a href="https://github.com/romannurik/Android-SwipeToDismiss" target="_blank" rel="external">SwipeToDismiss</a>中所使用的方法。很少有人使用新的api，反而要么经常依赖于GestureDetectors和onInterceptTouchEvent，要么实现方式很复杂。实际上，在RecyclerView上添加拖动特性有一个非常简单的方法。这个方法只需要一个类，并且它也是Android 兼容包的一部分，它就是：<br><a id="more"></a></p>
<h2 id="ItemTouchHelper"><a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" target="_blank" rel="external">ItemTouchHelper</a></h2><p>ItemTouchHelper是一个强大的工具，它处理好了关于在RecyclerView上添加拖动排序与滑动删除的所有事情。它是<a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html" target="_blank" rel="external">RecyclerView.ItemDecoration</a>的子类，也就是说它可以轻易的添加到几乎所有的LayoutManager和Adapter中。它还可以和现有的item动画一起工作，提供受类型限制的拖放动画等等，</p>
<p>这篇文章中，我会演示一个ItemTouchHelper的简单实现，然后在这个系列文章的后面部分，我们将拓展范围，探索一些新的特性。</p>
<h3 id="跳过本文">跳过本文</h3><p>只对完整源码感兴趣？直接跳到github：<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo" target="_blank" rel="external"> Android-ItemTouchHelper-Demo</a>。<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/tree/d8d85c32d579f19718b9bbb97f7a1bda0e616f1f" target="_blank" rel="external">第一次提交的代码</a>和本文的内容相对应。 <a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/releases" target="_blank" rel="external">在这里</a>下载demo apk 。</p>
<h3 id="设置">设置</h3><p>第一件事是RecyclerView的基本设置，修改build.gradle，添加RecyclerView的依赖。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:22.2.0'</span></span><br></pre></td></tr></table></figure>
<p>ItemTouchHelper可以与几乎任意的RecyclerView.Adapter 和 LayoutManager使用，但是本文建立了几个基本的文件，可以在Gist上找到：</p>
<p><a href="https://gist.github.com/iPaulPro/2216ea5e14818056cfcc" target="_blank" rel="external">https://gist.github.com/iPaulPro/2216ea5e14818056cfcc</a></p>
<h3 id="使用_ItemTouchHelper_和_ItemTouchHelper-Callback">使用 ItemTouchHelper 和 ItemTouchHelper.Callback</h3><p>要使用ItemTouchHelper，你需要创建一个<a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html" target="_blank" rel="external">ItemTouchHelper.Callback</a>。这个接口可以让你监听“move”与 “swipe”事件。这里还是控制view被选中的状态以及重写默认动画的地方。如果你只是想要一个基本的实现，有一个帮助类可以使用：<a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.SimpleCallback.html" target="_blank" rel="external">SimpleCallback</a>,但是为了了解其工作机制，我们还是自己实现。</p>
<p>启用基本的拖动排序与滑动删除需要重写的主要回调方法是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getMovementFlags(RecyclerView, ViewHolder)</span><br><span class="line">onMove(RecyclerView, ViewHolder, ViewHolder)</span><br><span class="line">onSwiped(ViewHolder, <span class="keyword">int</span>)</span><br></pre></td></tr></table></figure>
<p>我也需要两个帮助方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isLongPressDragEnabled()</span><br><span class="line">isItemViewSwipeEnabled()</span><br></pre></td></tr></table></figure>
<p>我们将一一解答上面的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span><span class="params">(RecyclerView recyclerView, </span><br><span class="line">        RecyclerView.ViewHolder viewHolder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</span><br><span class="line">    <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</span><br><span class="line">    <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ItemTouchHelper可以让你轻易得到一个事件的方向。你需要重写getMovementFlags()方法来指定可以支持的拖放和滑动的方向。使用helperItemTouchHelper.makeMovementFlags(int, int)来构造返回的flag。这里我们启用了上下左右两种方向。注：上下为拖动（drag），左右为滑动（swipe）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLongPressDragEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ItemTouchHelper可以用于没有滑动的拖动操作（或者反过来），你必须指明你到底要支持哪一种。要支持长按RecyclerView item进入拖动操作，你必须在isLongPressDragEnabled()方法中返回true。或者，也可以调用ItemTouchHelper.startDrag(RecyclerView.ViewHolder) 方法来开始一个拖动。这会在后面讲到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isItemViewSwipeEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而要在view任意位置触摸事件发生时启用滑动操作，则直接在sItemViewSwipeEnabled()中返回true就可以了。或者，你也主动调用ItemTouchHelper.startSwipe(RecyclerView.ViewHolder) 来开始滑动操作。</p>
<p>接下来的两个是onMove()和onSwiped()，用于通知底层数据的更新。首先我们创建一个可以将这些回调方法传递出去的接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemTouchHelperAdapter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemMove</span><span class="params">(<span class="keyword">int</span> fromPosition, <span class="keyword">int</span> toPosition)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemDismiss</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://gist.github.com/iPaulPro/5d43325ac7ae579760a9" target="_blank" rel="external">ItemTouchHelperAdapter.java Gist</a></p>
<p>以本例来说，最简单的方法就是在我们的<a href="https://gist.github.com/iPaulPro/2216ea5e14818056cfcc#file-recyclerlistadapter-java" target="_blank" rel="external">RecyclerListAdapter</a> 中实现这个listener。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerListAdapter</span> <span class="keyword">extends</span> </span><br><span class="line">        <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">ItemViewHolder</span>&gt; </span><br><span class="line">        <span class="keyword">implements</span> <span class="title">ItemTouchHelperAdapter</span> </span>&#123;<span class="comment">// ... code from gist</span></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemDismiss</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    mItems.remove(position);</span><br><span class="line">    notifyItemRemoved(position);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemMove</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">    Collections.swap(mItems, from, to);</span><br><span class="line">    notifyItemMoved(from, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>notifyItemRemoved()和 notifyItemMoved()的调用非常重要，有了它们Adapter才能知道发生了改变。同时还需要注意的是每当一个view切换到了一个新的索引时，我们都需要改变item的位置，而不是在拖动事件结束的时候。</p>
<p>现在我们回来创建我们的SimpleItemTouchHelperCallback，我们仍然需要重写onMove() 和 onSwiped()。</p>
<p>首先我们添加一个构造函数以及一个引用adapter的成员变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ItemTouchHelperAdapter mAdapter;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleItemTouchHelperCallback</span><span class="params">(</span><br><span class="line">        ItemTouchHelperAdapter adapter)</span> </span>&#123;</span><br><span class="line">    mAdapter = adapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后重写剩下的事件同时通知adapter：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span><span class="params">(RecyclerView recyclerView, </span><br><span class="line">        RecyclerView.ViewHolder viewHolder, </span><br><span class="line">        RecyclerView.ViewHolder target)</span> </span>&#123;</span><br><span class="line">    mAdapter.onItemMove(viewHolder.getAdapterPosition(), </span><br><span class="line">            target.getAdapterPosition());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span><span class="params">(RecyclerView.ViewHolder viewHolder, </span><br><span class="line">        <span class="keyword">int</span> direction)</span> </span>&#123;</span><br><span class="line">    mAdapter.onItemDismiss(viewHolder.getAdapterPosition());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样Callback类大致如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleItemTouchHelperCallback</span> <span class="keyword">extends</span> <span class="title">ItemTouchHelper</span>.<span class="title">Callback</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ItemTouchHelperAdapter mAdapter;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleItemTouchHelperCallback</span><span class="params">(ItemTouchHelperAdapter adapter)</span> </span>&#123;</span><br><span class="line">        mAdapter = adapter;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLongPressDragEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isItemViewSwipeEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span><span class="params">(RecyclerView recyclerView, ViewHolder viewHolder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</span><br><span class="line">        <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</span><br><span class="line">        <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span><span class="params">(RecyclerView recyclerView, ViewHolder viewHolder, </span><br><span class="line">            ViewHolder target)</span> </span>&#123;</span><br><span class="line">        mAdapter.onItemMove(viewHolder.getAdapterPosition(), target.getAdapterPosition());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span><span class="params">(ViewHolder viewHolder, <span class="keyword">int</span> direction)</span> </span>&#123;</span><br><span class="line">        mAdapter.onItemDismiss(viewHolder.getAdapterPosition());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Callback准备好了之后，我们就可以创建我们的ItemTouchHelper并调用attachToRecyclerView(RecyclerView) 了（参见<a href="https://gist.github.com/iPaulPro/2216ea5e14818056cfcc#file-mainfragment-java" target="_blank" rel="external">MainFragment.java</a>）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ItemTouchHelper.Callback callback = <span class="keyword">new</span> SimpleItemTouchHelperCallback(adapter);</span><br><span class="line">ItemTouchHelper touchHelper = <span class="keyword">new</span> ItemTouchHelper(callback);</span><br><span class="line">touchHelper.attachToRecyclerView(recyclerView);</span><br></pre></td></tr></table></figure>
<p>运行之后，你可以看到如下的效果：</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150630/1435660711130575.gif" alt=""></p>
<h3 id="总结">总结</h3><p>这是一个ItemTouchHelper的简单实现。但是已经阐明了在RecyclerView上实现拖动排序与滑动删除时根本不需要第三方库的。在下一部分中，我们将对被拖动或者滑动的item做更多外观上的控制。</p>
<h3 id="源代码">源代码</h3><p>我在github上创建了一个覆盖这个系列文章的项目：<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo" target="_blank" rel="external">Android-ItemTouchHelper-Demo</a>。<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/tree/d8d85c32d579f19718b9bbb97f7a1bda0e616f1f" target="_blank" rel="external">第一次提交的代码</a>和这部分相对应的，也有点第二部分的内容。</p>
<blockquote>
<p>译文链接：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0630/3123.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例</a>  </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>英文原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf">Drag and Swipe with RecyclerView</a> </p>
<p><img src="http://www.jcodecraeer.com/uploads/20150630/1435641365165672.gif" alt="1_4Cqfs-75ibhvC_3BMEIvVA.ogv_1435641250.gif" title="1435641365165672.gif"></p>
<p>在安卓中，有许多关于如何使用RecyclerView实现“drag &amp; drop”与swipe-to-dismiss”的教程，库和例子。即使现在已经有了新的，更优的实现方式，大多数仍然是使用老旧的<a href="http://developer.android.com/guide/topics/ui/drag-drop.html">View.OnDragListener</a>以及Roman Nurik在<a href="https://github.com/romannurik/Android-SwipeToDismiss">SwipeToDismiss</a>中所使用的方法。很少有人使用新的api，反而要么经常依赖于GestureDetectors和onInterceptTouchEvent，要么实现方式很复杂。实际上，在RecyclerView上添加拖动特性有一个非常简单的方法。这个方法只需要一个类，并且它也是Android 兼容包的一部分，它就是：<br>]]>
    
    </summary>
    
      <category term="SupportLibrary" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/SupportLibrary/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[结合RxJava更简单地使用SQLite]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/29/easy-sqlite-on-android-with-rxjava/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/29/easy-sqlite-on-android-with-rxjava/</id>
    <published>2015-06-28T16:00:00.000Z</published>
    <updated>2015-07-11T16:03:10.000Z</updated>
    <content type="html"><![CDATA[<p>我经常想在项目中使用 ORM 来简化操作，但是最终都将这个念头打消。主要有以下几点原因：</p>
<ul>
<li>我的数据模型远远没有复杂到需要 ORM 帮助</li>
<li>出于 Android 性能上的考虑，自动生成的SQL语句可能没有被优化</li>
</ul>
<p>不过最近，我开始使用一个简单的设计模式，使用 RxJava 来提供一个简单的数据库访问管理。<br>我称它为 “Async Rx Read” 设计模式，很渣的一个名字哈，不过是我能想到最好的了，命名总是程序员的难题嘛。<br><a id="more"></a></p>
<h1 id="Easy_Read">Easy Read</h1><p>Android 开发中有一条很重要的设计原则，永远不要在主线程执行 I/O 操作，显然这条规则对数据库访问也适用。<br>RxJava 很适用于解决这个问题。<br>在以前，我通常为每个 table 创建一个 Java 类，然后通过我的 <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html" target="_blank" rel="external">SQLiteOpenHelper</a> 来管理这些 table。<br>现在使用这个新的方法后，我将这个工具类扩展成所有事物读写 SQL table 的唯一入口。<br>我们来想个简单的例子：一个由 UserTable 类管理的 USERS 表：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserTable.java</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">(SQLiteDatabase db, String userId)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// select * from users where _id = &#123;userId&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的方法有一个缺点，就是你一不小心可能会在主线程调用它，这里面是由调用者确保它是在后台线程中被执行的<br>(如果需要更新 UI 的话，再将结果返回给主线程)。而不是依赖一个线程池管理，或者更糟点，使用 <code>AsyncTask</code> 管理，<br>我们将使用 RxJava 替我们管理线程模型。</p>
<p>让我们重写这个方法返回一个 callback ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserTable.java</span></span><br><span class="line">Callable&lt;List&lt;User&gt;&gt; getUsers(SQLiteDatabase db, String userId) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Callable&lt;List&lt;User&gt;&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// select * from users where _id is userId</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上，我们只是重构了一下这个方法返回一个 lazy result ，使得 database helper 可以将这个<br>result 转变成一个 <code>Observable</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MySqliteOpenHelper.java</span></span><br><span class="line">Observable&lt;List&lt;User&gt;&gt; getUsers(String userId) &#123;</span><br><span class="line">  <span class="keyword">return</span> makeObservable(mUserTable.getUsers(getReadableDatabase(), userId))</span><br><span class="line">    .subscribeOn(Schedulers.computation()) <span class="comment">// note: do not use Schedulers.io()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到将 lazy result 转换成一个 <code>Observable</code> 时，helper 强制 subscription 运行在后台线程<br>(这里使用的是 computation scheduler;不要使用 <code>Schedulers.io()</code> 因为它是由 unbounded executor 支持的)。<br>这样调用者就不必担心这个方法会阻塞主线程了。</p>
<p>最后，<code>makeObservable()</code> 方法的实现很简单(而且是完全通用的)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MySqliteOpenHelper.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">makeObservable</span><span class="params">(<span class="keyword">final</span> Callable&lt;T&gt; func)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Observable.create(</span><br><span class="line">      <span class="keyword">new</span> Observable.OnSubscribe&lt;T&gt;() &#123;</span><br><span class="line">          <span class="annotation">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; subscriber)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              subscriber.onNext(func.call());</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">              Log.e(TAG, <span class="string">"Error reading from the database"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们的 database 读取已经变成了 <code>observables</code>，保证查询是执行在后台线程的。<br>访问数据库操作也是很标准的 Rx code：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DisplayUsersFragment.java</span></span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">MySqliteOpenHelper mDbHelper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">mDbHelper.getUsers(userId)</span><br><span class="line">  .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">  .subscribe(<span class="keyword">new</span> Action1&lt;List&lt;User&gt;&gt;()) &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Update our UI with the users</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你不需要返回结果更新你的 UI，那么你只需要 observe 一个后台线程。<br>然后你的 database 层会返回 observables，当获得结果时很容易将它组合变换。<br>例如，假定 <code>ContactTable</code> 是一个底层类， model (User class) 对它是不可见的，<br>它应该返回底层 object (可能是 <code>Cursor</code> 或者 <code>ContentValues</code>)。然后你可以用<br>Rx 去 <code>map</code> 这些底层值，把它们转换成你的 model 类，实现更加清晰的分离层。</p>
<p>两个提示：</p>
<ul>
<li><p>你的 Table 类不应该包含 public 方法：只能有 package 的 protected 方法(仅允许相同 package 内的 Helper 访问 ) 和 private 方法，<br>其他类不能直接访问 Table 类。</p>
</li>
<li><p>这个方法对依赖注入兼容性很好：很轻松就可以同时实现 database helper 和注入单个 Table<br>(意外收获：使用 Dagger 2，你的 table 可以拥有自己的组件，因为 database helper<br>是实例化它们所需的唯一参考资料 )。</p>
</li>
</ul>
<p>这是一个很简单的设计模式，它显著提升了 RxJava 在项目中发挥的效果。<br>我正在扩展这层结构，让它可以为 list view adapter update 提供更灵活的通知机制<br>(和 SQLBrite 提供的不同)，会在以后的文章中介绍。</p>
<p>这项工作还在进行中，欢迎反馈。</p>
<blockquote>
<ul>
<li>原文链接 : <a href="http://beust.com/weblog/2015/06/01/easy-sqlite-on-android-with-rxjava/" target="_blank" rel="external">Easy SQLite on Android with RxJava</a></li>
<li>原文作者 : <a href="http://beust.com/weblog/about-2/" target="_blank" rel="external">Cédric Beust</a></li>
<li><a href="http://www.devtf.cn" target="_blank" rel="external">译文出自 :  开发技术前线 www.devtf.cn</a></li>
<li>译者 : <a href="https://github.com/tiiime" target="_blank" rel="external">tiiime</a> </li>
<li>校对者:  <a href="https://github.com/bboyfeiyu" target="_blank" rel="external">Mr.Simple</a> </li>
<li>状态 :   完成</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>我经常想在项目中使用 ORM 来简化操作，但是最终都将这个念头打消。主要有以下几点原因：</p>
<ul>
<li>我的数据模型远远没有复杂到需要 ORM 帮助</li>
<li>出于 Android 性能上的考虑，自动生成的SQL语句可能没有被优化</li>
</ul>
<p>不过最近，我开始使用一个简单的设计模式，使用 RxJava 来提供一个简单的数据库访问管理。<br>我称它为 “Async Rx Read” 设计模式，很渣的一个名字哈，不过是我能想到最好的了，命名总是程序员的难题嘛。<br>]]>
    
    </summary>
    
      <category term="RxJava" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/RxJava/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[手动实现布局Transitions动画-第一部分]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/29/manual-layout-transitions-part-1/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/29/manual-layout-transitions-part-1/</id>
    <published>2015-06-28T16:00:00.000Z</published>
    <updated>2015-07-11T16:02:19.000Z</updated>
    <content type="html"><![CDATA[<p>布局切换动画在Material design中是一个重要的方面,因为它们能够指明应用的工作流程，并且能够将UI上的可视化元素绑定在一起作为用户的导航。两个重要的工具可以实现这种效果，分别为Activity转场动画和布局动画（Layout Transitions）。然后布局动画需要在API 19及其之后才支持。在这一系列文章中，我们会学习到即使在无法调用transitions APIs时如何实现很好的转场动画。<br><a id="more"></a><br>在我们开始之前，值得指出的是有一个后向兼容的Transitions API提供了到API 14的兼容。然而我决定不使用它，因为我从来没有尝试过使用它。我坚持使用核心的Android API来完成此功能，这个系列文章的目的就是探索transitions API本身使用的技术，从而达到运用自如的效果。</p>
<p>在<a href="https://blog.stylingandroid.com/dirty-phrasebook-part-1/" target="_blank" rel="external">上一个系列</a>中当进行转场时会有一些简单的动画。可以到这个<a href="https://youtu.be/vXuY7q3Y5zw" target="_blank" rel="external">视频地址</a>进行观看效果 。</p>
<p>我决定手动地实现这些效果，这种实现必须要具备后向兼容性。在开始处理更复杂的动画之前我们先来看看这些简单动画是如何实现的。</p>
<p>让我们来看看上述视频示例中的布局。    </p>
<p>res/layout/activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">  <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">  <span class="attribute">xmlns:sa</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">  <span class="attribute">android:id</span>=<span class="value">"@+id/layout_container"</span></span><br><span class="line">  <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">  <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">  <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">  <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/toolbar"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"?attr/actionBarSize"</span></span><br><span class="line">    <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimary"</span></span><br><span class="line">    <span class="attribute">android:theme</span>=<span class="value">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></span><br><span class="line">    <span class="attribute">sa:popupTheme</span>=<span class="value">"@style/ThemeOverlay.AppCompat.Light"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">Spinner</span></span><br><span class="line">      <span class="attribute">android:id</span>=<span class="value">"@+id/language"</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;/<span class="title">android.support.v7.widget.Toolbar</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="title">android.support.v7.widget.CardView</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/input_view"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">    <span class="attribute">android:layout_weight</span>=<span class="value">"1"</span></span><br><span class="line">    <span class="attribute">android:clipChildren</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">RelativeLayout</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:clipChildren</span>=<span class="value">"false"</span></span><br><span class="line">      <span class="attribute">android:padding</span>=<span class="value">"@dimen/card_padding"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">View</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/focus_holder"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"0dp"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">        <span class="attribute">android:focusableInTouchMode</span>=<span class="value">"true"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/input"</span></span><br><span class="line">        <span class="attribute">style</span>=<span class="value">"@style/Widget.TextView.Input"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:inputType</span>=<span class="value">"textMultiLine"</span></span><br><span class="line">        <span class="attribute">android:imeOptions</span>=<span class="value">"flagNoFullscreen|actionDone"</span></span><br><span class="line">        <span class="attribute">android:gravity</span>=<span class="value">"top"</span></span><br><span class="line">        <span class="attribute">android:hint</span>=<span class="value">"@string/type_here"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/clear_input"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_alignTop</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_alignEnd</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_alignRight</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:padding</span>=<span class="value">"8dp"</span></span><br><span class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/ic_clear"</span></span><br><span class="line">        <span class="attribute">android:visibility</span>=<span class="value">"invisible"</span></span><br><span class="line">        <span class="attribute">android:contentDescription</span>=<span class="value">"@string/clear_input"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/input_done"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"32dip"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"32dip"</span></span><br><span class="line">        <span class="attribute">android:background</span>=<span class="value">"@drawable/done_background"</span></span><br><span class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/ic_arrow_forward"</span></span><br><span class="line">        <span class="attribute">android:padding</span>=<span class="value">"2dp"</span></span><br><span class="line">        <span class="attribute">android:layout_margin</span>=<span class="value">"8dp"</span></span><br><span class="line">        <span class="attribute">tools:ignore</span>=<span class="value">"UnusedAttribute"</span></span><br><span class="line">        <span class="attribute">android:elevation</span>=<span class="value">"4dp"</span></span><br><span class="line">        <span class="attribute">android:visibility</span>=<span class="value">"invisible"</span></span><br><span class="line">        <span class="attribute">android:layout_alignBottom</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_alignEnd</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_alignRight</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:contentDescription</span>=<span class="value">"@string/done"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;/<span class="title">android.support.v7.widget.CardView</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="title">FrameLayout</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/translation_panel"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">    <span class="attribute">android:layout_weight</span>=<span class="value">"1"</span></span><br><span class="line">    <span class="attribute">android:padding</span>=<span class="value">"@dimen/translation_outer_margin"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.v7.widget.CardView</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">FrameLayout</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/translation_copy"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:foreground</span>=<span class="value">"@drawable/click_foreground"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">          <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">          <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">          <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">          <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimary"</span></span><br><span class="line">          <span class="attribute">tools:ignore</span>=<span class="value">"UselessParent"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">          <span class="tag">&lt;<span class="title">FrameLayout</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/translation_speak"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:foreground</span>=<span class="value">"@drawable/click_foreground"</span></span><br><span class="line">            <span class="attribute">android:padding</span>=<span class="value">"@dimen/translation_inner_margin"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">              <span class="attribute">android:id</span>=<span class="value">"@+id/translation_label"</span></span><br><span class="line">              <span class="attribute">style</span>=<span class="value">"@style/Widget.TextView.Label"</span></span><br><span class="line">              <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">              <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">              <span class="attribute">android:textAllCaps</span>=<span class="value">"true"</span></span><br><span class="line">              <span class="attribute">android:drawableStart</span>=<span class="value">"@drawable/ic_tts"</span></span><br><span class="line">              <span class="attribute">android:drawableLeft</span>=<span class="value">"@drawable/ic_tts"</span></span><br><span class="line">              <span class="attribute">android:drawablePadding</span>=<span class="value">"4dip"</span></span><br><span class="line">              <span class="attribute">android:text</span>=<span class="value">"@string/sample_language"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">FrameLayout</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">          <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/translation"</span></span><br><span class="line">            <span class="attribute">style</span>=<span class="value">"@style/Widget.TextView.Translation"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginLeft</span>=<span class="value">"@dimen/translation_inner_margin"</span></span><br><span class="line">            <span class="attribute">android:layout_marginStart</span>=<span class="value">"@dimen/translation_inner_margin"</span></span><br><span class="line">            <span class="attribute">android:layout_marginRight</span>=<span class="value">"@dimen/translation_inner_margin"</span></span><br><span class="line">            <span class="attribute">android:layout_marginEnd</span>=<span class="value">"@dimen/translation_inner_margin"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"@dimen/translation_inner_margin"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"@string/sample_translation"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">FrameLayout</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;/<span class="title">android.support.v7.widget.CardView</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;/<span class="title">FrameLayout</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里需要我们关心的关键组件是Toolbar、id为input_view的CardView、ID为input_done的ImageView以及id为translation_panel的FrameLayout。其他的我们需要关心的就是id为focus_holder且可视状态为invisible的用来抢占焦点的视图。在EditText和focus_holder之间触发焦点时触发进入或者退出输入模式，以此来决定启动对应的动画。</p>
<p>该动画将input_view上移到能够覆盖Toolbar的位置，然后将input_done视图以淡入的形式显示出来，并且将translation_panel淡出。当用户退出输入模式时则执行该动画的反向形式。在上述视频中你可以看到它的具体效果。</p>
<p>我们先看看MainActivity : </p>
<p>MainActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"> </span><br><span class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line">        setTitle(R.string.sample_language);</span><br><span class="line"> </span><br><span class="line">        View input = findViewById(R.id.input);</span><br><span class="line">        View inputDone = findViewById(R.id.input_done);</span><br><span class="line">        <span class="keyword">final</span> View focusHolder = findViewById(R.id.focus_holder);</span><br><span class="line"> </span><br><span class="line">        input.setOnFocusChangeListener(Part1TransitionController.newInstance(<span class="keyword">this</span>));</span><br><span class="line">        inputDone.setOnClickListener(</span><br><span class="line">                <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(@NonNull View v)</span> </span>&#123;</span><br><span class="line">                        focusHolder.requestFocus();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个实现直截了当： 它所做的几UI是初始化Toolbar和视图的焦点逻辑。创建transitions的逻辑是执行在Part1TransitionController类中，我将这部分逻辑抽象到Part1TransitionController中使得我们在该系列的后续文章中能够更容易的包装其他实现。Part1TransitionController类继承自包含了通用逻辑的TransitionController类。</p>
<p>TransitionController.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TransitionController</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnFocusChangeListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;Activity&gt; activityWeakReference;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AnimatorBuilder animatorBuilder;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">TransitionController</span><span class="params">(WeakReference&lt;Activity&gt; activityWeakReference, @NonNull AnimatorBuilder animatorBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activityWeakReference = activityWeakReference;</span><br><span class="line">        <span class="keyword">this</span>.animatorBuilder = animatorBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFocusChange</span><span class="params">(View v, <span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</span><br><span class="line">        Activity mainActivity = activityWeakReference.get();</span><br><span class="line">        <span class="keyword">if</span> (mainActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasFocus) &#123;</span><br><span class="line">                enterInputMode(mainActivity);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                exitInputMode(mainActivity);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AnimatorBuilder <span class="title">getAnimatorBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> animatorBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">enterInputMode</span><span class="params">(Activity mainActivity)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">exitInputMode</span><span class="params">(Activity mainActivity)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">closeIme</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Activity mainActivity = activityWeakReference.get();</span><br><span class="line">        <span class="keyword">if</span> (mainActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            InputMethodManager imm = (InputMethodManager) mainActivity.getSystemService(</span><br><span class="line">                    Context.INPUT_METHOD_SERVICE);</span><br><span class="line">            imm.hideSoftInputFromWindow(view.getWindowToken(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">ImeCloseListener</span> <span class="keyword">extends</span> <span class="title">AnimatorListenerAdapter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> View view;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ImeCloseListener</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.view = view;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(@NonNull Animator animation)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onAnimationEnd(animation);</span><br><span class="line">            closeIme(view);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在该类型中处理了onFocusChanged()事件，并且根据焦点调用相应的函数进入或者退出输入模式。在该类中包含了一个用于确认在退出输入模式时隐藏输入法的AnimatorListener类。另外还含有一个我们重复使用的、构建了一些原子属性的animators的AnimatorBuilder实例，我们看看AnimatorBuilder类的实现。</p>
<p>AnimatorBuilder.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimatorBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TRANSLATION_Y = <span class="string">"translationY"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALPHA = <span class="string">"alpha"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> duration;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AnimatorBuilder <span class="title">newInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> duration = context.getResources().getInteger(android.R.integer.config_mediumAnimTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnimatorBuilder(duration);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    AnimatorBuilder(<span class="keyword">int</span> duration) &#123;</span><br><span class="line">        <span class="keyword">this</span>.duration = duration;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animator <span class="title">buildTranslationYAnimator</span><span class="params">(View view, <span class="keyword">int</span> startY, <span class="keyword">int</span> endY)</span> </span>&#123;</span><br><span class="line">        Animator animator = ObjectAnimator.ofFloat(view, TRANSLATION_Y, startY, endY);</span><br><span class="line">        animator.setDuration(duration);</span><br><span class="line">        <span class="keyword">return</span> animator;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animator <span class="title">buildShowAnimator</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildAlphaAnimator(view, <span class="number">0f</span>, <span class="number">1f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animator <span class="title">buildHideAnimator</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildAlphaAnimator(view, <span class="number">1f</span>, <span class="number">0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animator <span class="title">buildAlphaAnimator</span><span class="params">(View view, <span class="keyword">float</span> startAlpha, <span class="keyword">float</span> endAlpha)</span> </span>&#123;</span><br><span class="line">        Animator animator = ObjectAnimator.ofFloat(view, ALPHA, startAlpha, endAlpha);</span><br><span class="line">        animator.setDuration(duration);</span><br><span class="line">        <span class="keyword">return</span> animator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有两个基本的animator在这里被构建 : 一个是通过修改translationY属性移动View的动画，另一个是修改View的透明度实现修改alpha属性的动画。还有一个是组合了Alpha动画和提供了一些工具方法来将视图从完全不透明变化到透明，以及相反的过程。</p>
<p>所有这些我们只需要看看Part1TransitionController类中如何将这些功能结合在一起运用。</p>
<p>part1/Part1TransitionController.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Part1TransitionController</span> <span class="keyword">extends</span> <span class="title">TransitionController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TransitionController <span class="title">newInstance</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        WeakReference&lt;Activity&gt; mainActivityWeakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">        AnimatorBuilder animatorBuilder = AnimatorBuilder.newInstance(activity);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Part1TransitionController(mainActivityWeakReference, animatorBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Part1TransitionController(WeakReference&lt;Activity&gt; mainActivityWeakReference, AnimatorBuilder animatorBuilder) &#123;</span><br><span class="line">        <span class="keyword">super</span>(mainActivityWeakReference, animatorBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">enterInputMode</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        View inputView = activity.findViewById(R.id.input_view);</span><br><span class="line">        View inputDone = activity.findViewById(R.id.input_done);</span><br><span class="line">        View translation = activity.findViewById(R.id.translation_panel);</span><br><span class="line">        View toolbar = activity.findViewById(R.id.toolbar);</span><br><span class="line"> </span><br><span class="line">        inputDone.setVisibility(View.VISIBLE);</span><br><span class="line"> </span><br><span class="line">        AnimatorSet animatorSet = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">        AnimatorBuilder animatorBuilder = getAnimatorBuilder();</span><br><span class="line">        Animator moveInputView = animatorBuilder.buildTranslationYAnimator(inputView, <span class="number">0</span>, -toolbar.getHeight());</span><br><span class="line">        Animator showInputDone = animatorBuilder.buildShowAnimator(inputDone);</span><br><span class="line">        Animator hideTranslation = animatorBuilder.buildHideAnimator(translation);</span><br><span class="line">        animatorSet.playTogether(moveInputView, showInputDone, hideTranslation);</span><br><span class="line">        animatorSet.start();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">exitInputMode</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> View inputView = activity.findViewById(R.id.input_view);</span><br><span class="line">        View inputDone = activity.findViewById(R.id.input_done);</span><br><span class="line">        View translation = activity.findViewById(R.id.translation_panel);</span><br><span class="line">        View toolbar = activity.findViewById(R.id.toolbar);</span><br><span class="line"> </span><br><span class="line">        AnimatorSet animatorSet = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">        AnimatorBuilder animatorBuilder = getAnimatorBuilder();</span><br><span class="line">        Animator moveInputView = animatorBuilder.buildTranslationYAnimator(inputView, -toolbar.getHeight(), <span class="number">0</span>);</span><br><span class="line">        Animator hideInputDone = animatorBuilder.buildHideAnimator(inputDone);</span><br><span class="line">        Animator showTranslation = animatorBuilder.buildShowAnimator(translation);</span><br><span class="line">        animatorSet.playTogether(moveInputView, hideInputDone, showTranslation);</span><br><span class="line">        animatorSet.addListener(<span class="keyword">new</span> ImeCloseListener(inputDone));</span><br><span class="line">        animatorSet.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Part1TransitionController类中我们实现了两个抽象方法，分别为exitInputMode和enterInputMode方法。在这两个函数中我们会找到对应的View，在enterInputMode函数中我们会构建一个包含了移动View到toolbar位置、修改inputDone到不透明状态、translation到透明状态的动画集。在exitInputMode函数中，我们执行相反的动画，同时添加了一个ImeCloseListener实例来保证在动画完成时隐藏输入法。</p>
<p>至此，我们就完成了所需的功能。通过一些基本的属性动画组合我们就完成了复杂的动画功能。</p>
<p>然而，我们并不止步于此。这个示例非常的直截了当，但是TransitionController实例实现了运用于View上的动画逻辑。因此，相比transitions API提供的功能来说我们还有很长的路要走。在下一篇文章中我们会做一些小修改来实现根据View的状态来动态的构建Animators，而不是像这篇文章中的手动创建。</p>
<p>完整的代码在<a href="https://github.com/StylingAndroid/ManualLayoutTransitions/tree/Part1" target="_blank" rel="external">这里</a> 。</p>
<p class="cc-block"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="CC BY-NC-SA 4.0" class="cc-button" src="https://blog.stylingandroid.com/wp-content/plugins/creative-commons-configurator-1/media/cc/by-nc-sa/4.0/88x31.png" scale="0"></a><br><br><br><a href="http://blog.stylingandroid.com/manual-layout-transitions-part-1/" title="Permalink to Manual Layout Transitions – Part 1" target="_blank" rel="external"><span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" property="dct:title" rel="dct:type">Manual Layout Transitions – Part 1</span></a> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://blog.stylingandroid.com/author/admin/" property="cc:attributionName" rel="external" target="_blank">Styling Android</a> is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.<br>Permissions beyond the scope of this license may be available at <a xmlns:cc="http://creativecommons.org/ns#" href="http://blog.stylingandroid.com/license-information" rel="external" target="_blank">http://blog.stylingandroid.com/license-information</a>.</p>

<blockquote>
<ul>
<li>原文链接 : <a href="https://blog.stylingandroid.com/manual-layout-transitions-part-1/" target="_blank" rel="external">Manual Layout Transitions – Part 1</a></li>
<li><a href="http://www.devtf.cn" target="_blank" rel="external">译文出自 :  开发技术前线 www.devtf.cn</a></li>
<li>译者 : <a href="https://github.com/bboyfeiyu" target="_blank" rel="external">Mr.Simple</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>布局切换动画在Material design中是一个重要的方面,因为它们能够指明应用的工作流程，并且能够将UI上的可视化元素绑定在一起作为用户的导航。两个重要的工具可以实现这种效果，分别为Activity转场动画和布局动画（Layout Transitions）。然后布局动画需要在API 19及其之后才支持。在这一系列文章中，我们会学习到即使在无法调用transitions APIs时如何实现很好的转场动画。<br>]]>
    
    </summary>
    
      <category term="动画" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="连载" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/%E8%BF%9E%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[手动实现布局Transitions动画-第二部分]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/29/manual-layout-transitions-part-2/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/29/manual-layout-transitions-part-2/</id>
    <published>2015-06-28T16:00:00.000Z</published>
    <updated>2015-07-11T16:01:31.000Z</updated>
    <content type="html"><![CDATA[<p>布局切换动画在Material design中是一个重要的方面,因为它们能够指明应用的工作流程，并且能够将UI上的可视化元素绑定在一起作为用户的导航。两个重要的工具可以实现这种效果，分别为Activity转场动画和布局动画（Layout Transitions）。然后布局动画需要在API 19及其之后才支持。在这一系列文章中，我们会学习到即使在无法调用transitions APIs时如何实现很好的转场动画。<br><a id="more"></a><br>布局切换框架引入了代表特定布局状态的Scenes概念，也就是场景。我们会定义两个分离的布局来模仿这些，其中一个代表默认的视图，另一个代表我们进入输入模式的视图。我们先来创建两个布局，它们都是基于Dirty Phrasebook布局，当然我们会做一些小修改以便大家能够更容易理解。</p>
<p>首先是默认布局。</p>
<p>res/layout/activity_part2.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">  <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">  <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">  <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">  <span class="attribute">android:clipChildren</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="title">RelativeLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">    <span class="attribute">android:layout_weight</span>=<span class="value">"1"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span></span><br><span class="line">      <span class="attribute">android:id</span>=<span class="value">"@+id/toolbar"</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"?attr/actionBarSize"</span></span><br><span class="line">      <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimary"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span></span><br><span class="line">      <span class="attribute">android:id</span>=<span class="value">"@+id/focus_holder"</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"0dp"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">      <span class="attribute">android:focusableInTouchMode</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">requestFocus</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">View</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.v7.widget.CardView</span></span><br><span class="line">      <span class="attribute">android:id</span>=<span class="value">"@+id/input_view"</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_alignParentBottom</span>=<span class="value">"true"</span></span><br><span class="line">      <span class="attribute">android:layout_below</span>=<span class="value">"@id/toolbar"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:inputType</span>=<span class="value">"textMultiLine"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/input_done"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"32dip"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"32dip"</span></span><br><span class="line">        <span class="attribute">android:layout_alignBottom</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_alignEnd</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_alignRight</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"bottom|end"</span></span><br><span class="line">        <span class="attribute">android:layout_margin</span>=<span class="value">"8dp"</span></span><br><span class="line">        <span class="attribute">android:background</span>=<span class="value">"@drawable/done_background"</span></span><br><span class="line">        <span class="attribute">android:contentDescription</span>=<span class="value">"@string/done"</span></span><br><span class="line">        <span class="attribute">android:padding</span>=<span class="value">"2dp"</span></span><br><span class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/ic_arrow_forward"</span></span><br><span class="line">        <span class="attribute">android:visibility</span>=<span class="value">"invisible"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;/<span class="title">android.support.v7.widget.CardView</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="title">FrameLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">    <span class="attribute">android:layout_weight</span>=<span class="value">"1"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.v7.widget.CardView</span></span><br><span class="line">      <span class="attribute">android:id</span>=<span class="value">"@+id/translation"</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">      <span class="attribute">android:layout_margin</span>=<span class="value">"8dp"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">View</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"100dp"</span></span><br><span class="line">        <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">android.support.v7.widget.CardView</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">FrameLayout</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个布局与我们上一篇使用的布局基本一致，但是稍微有一点小修改。现在我们感兴趣只有id为toolbar, focus_holder, input, input_view, input_done和 translation的视图控件。</p>
<p>它看起来是这样的:</p>
<p><img src="https://blog.stylingandroid.com/wp-content/uploads/2015/05/Screenshot_2015-05-17-22-17-21-169x300.png" alt=""></p>
<p>The layout for when we’re in input mode is:</p>
<p>下面是进入输入模式的布局 : </p>
<p>res/layout/activity_part2_input.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">  <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">  <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">  <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">  <span class="attribute">android:clipChildren</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="title">RelativeLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">    <span class="attribute">android:layout_weight</span>=<span class="value">"1"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span></span><br><span class="line">      <span class="attribute">android:id</span>=<span class="value">"@+id/toolbar"</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"?attr/actionBarSize"</span></span><br><span class="line">      <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimary"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">View</span></span><br><span class="line">      <span class="attribute">android:id</span>=<span class="value">"@+id/focus_holder"</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"0dp"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">      <span class="attribute">android:focusableInTouchMode</span>=<span class="value">"true"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.v7.widget.CardView</span></span><br><span class="line">      <span class="attribute">android:id</span>=<span class="value">"@+id/input_view"</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_alignParentBottom</span>=<span class="value">"true"</span></span><br><span class="line">      <span class="attribute">android:layout_alignParentTop</span>=<span class="value">"true"</span></span><br><span class="line">      <span class="attribute">android:layout_marginBottom</span>=<span class="value">"?attr/actionBarSize"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:inputType</span>=<span class="value">"textMultiLine"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="title">requestFocus</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">EditText</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/input_done"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"32dip"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"32dip"</span></span><br><span class="line">        <span class="attribute">android:layout_alignBottom</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_alignEnd</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_alignRight</span>=<span class="value">"@id/input"</span></span><br><span class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"bottom|end"</span></span><br><span class="line">        <span class="attribute">android:layout_margin</span>=<span class="value">"8dp"</span></span><br><span class="line">        <span class="attribute">android:background</span>=<span class="value">"@drawable/done_background"</span></span><br><span class="line">        <span class="attribute">android:contentDescription</span>=<span class="value">"@string/done"</span></span><br><span class="line">        <span class="attribute">android:padding</span>=<span class="value">"2dp"</span></span><br><span class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/ic_arrow_forward"</span></span><br><span class="line">        <span class="attribute">android:visibility</span>=<span class="value">"visible"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">android.support.v7.widget.CardView</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="title">FrameLayout</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">    <span class="attribute">android:layout_weight</span>=<span class="value">"1"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.v7.widget.CardView</span></span><br><span class="line">      <span class="attribute">android:id</span>=<span class="value">"@+id/translation"</span></span><br><span class="line">      <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">      <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">      <span class="attribute">android:layout_margin</span>=<span class="value">"8dp"</span></span><br><span class="line">      <span class="attribute">android:visibility</span>=<span class="value">"invisible"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="title">View</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"100dp"</span></span><br><span class="line">        <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimary"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">android.support.v7.widget.CardView</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">FrameLayout</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>该布局和上一布局也是基本相同，它们的区别在于 : </p>
<ol>
<li>id为input_view的视图现在依附在它的父视图的顶部，而不是在toolbar的下面，也就是说它现在覆盖住了toolbar;</li>
<li>input_done视图现在已经变为可见状态，上一个布局中它是invisible状态;</li>
<li>translation视图变为invisible，上一布局中它是visible状态。</li>
</ol>
<p>效果如下 : </p>
<p><img src="https://blog.stylingandroid.com/wp-content/uploads/2015/05/Screenshot_2015-05-17-22-17-26-169x300.png" alt=""></p>
<p>两个布局代表UI的两个状态，如果我们使用Transitions API那么它们就是我们所谓的场景。</p>
<p>我们现在要做的就是在这两个布局之间进行状态切换，也就是进入、退出输入模式。首先我们需要检测MainActivity中的焦点 : </p>
<p>part2/mainActivity.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> View input;</span><br><span class="line">    <span class="keyword">private</span> TransitionController focusChangeListener;</span><br><span class="line">    <span class="keyword">private</span> View.OnClickListener onClickListener;</span><br><span class="line">    <span class="keyword">private</span> View focusHolder;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        focusChangeListener = Part2TransitionController.newInstance(<span class="keyword">this</span>);</span><br><span class="line">        onClickListener = <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(@NonNull View v)</span> </span>&#123;</span><br><span class="line">                focusHolder.requestFocus();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        setContentView(R.layout.activity_part2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input != <span class="keyword">null</span>) &#123;</span><br><span class="line">            input.setOnFocusChangeListener(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.setContentView(layoutResID);</span><br><span class="line">        input = findViewById(R.id.input);</span><br><span class="line">        View inputDone = findViewById(R.id.input_done);</span><br><span class="line">        focusHolder = findViewById(R.id.focus_holder);</span><br><span class="line">        input.setOnFocusChangeListener(focusChangeListener);</span><br><span class="line">        inputDone.setOnClickListener(onClickListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为我们检测到焦点变化，因此我们还需要添加一些逻辑到setContentView函数中。这样一来我们在调用setContentView时就可以切换这两个布局，此时View的层级关系也会随着改变。因此我们每次都需要找到布局中的子视图，焦点listener我们也需要移除并且重新设置一个到input视图中。</p>
<p>和原来一样，我们需要一个TransitionController来处理焦点变化: </p>
<p>.part2.Part2TransitionController.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Part2TransitionController</span> <span class="keyword">extends</span> <span class="title">TransitionController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Part2TransitionController(WeakReference&lt;Activity&gt; activityWeakReference, AnimatorBuilder animatorBuilder) &#123;</span><br><span class="line">        <span class="keyword">super</span>(activityWeakReference, animatorBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TransitionController <span class="title">newInstance</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        WeakReference&lt;Activity&gt; activityWeakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">        AnimatorBuilder animatorBuilder = AnimatorBuilder.newInstance(activity);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Part2TransitionController(activityWeakReference, animatorBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">enterInputMode</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        activity.setContentView(R.layout.activity_part2_input);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">exitInputMode</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        activity.setContentView(R.layout.activity_part2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们需要做的只是调用Activity的setContentView函数来切换两个布局。</p>
<p>如果我们现在运行上面的代码，我们可以看到两个布局毫无过度的切换，这必然不是我们想要的。在下一篇文章中，我们将讲解如何在布局切换时添加动画。</p>
<p>本文的源代码在<a href="https://github.com/StylingAndroid/ManualLayoutTransitions/tree/Part2" target="_blank" rel="external">这里</a>。</p>
<p class="cc-block"><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="CC BY-NC-SA 4.0" class="cc-button" src="https://blog.stylingandroid.com/wp-content/plugins/creative-commons-configurator-1/media/cc/by-nc-sa/4.0/88x31.png" scale="0"></a><br><br><br><a href="http://blog.stylingandroid.com/manual-layout-transitions-part-1/" title="Permalink to Manual Layout Transitions – Part 1" target="_blank" rel="external"><span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" property="dct:title" rel="dct:type">Manual Layout Transitions – Part 1</span></a> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://blog.stylingandroid.com/author/admin/" property="cc:attributionName" rel="external" target="_blank">Styling Android</a> is licensed under a <a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.<br>Permissions beyond the scope of this license may be available at <a xmlns:cc="http://creativecommons.org/ns#" href="http://blog.stylingandroid.com/license-information" rel="external" target="_blank">http://blog.stylingandroid.com/license-information</a>.</p>

<blockquote>
<ul>
<li>原文链接 : <a href="https://blog.stylingandroid.com/manual-layout-transitions-part-2/" target="_blank" rel="external">Manual Layout Transitions – Part 2</a></li>
<li><a href="http://www.devtf.cn" target="_blank" rel="external">译文出自 :  开发技术前线 www.devtf.cn</a></li>
<li>译者 : <a href="https://github.com/bboyfeiyu" target="_blank" rel="external">Mr.Simple</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>布局切换动画在Material design中是一个重要的方面,因为它们能够指明应用的工作流程，并且能够将UI上的可视化元素绑定在一起作为用户的导航。两个重要的工具可以实现这种效果，分别为Activity转场动画和布局动画（Layout Transitions）。然后布局动画需要在API 19及其之后才支持。在这一系列文章中，我们会学习到即使在无法调用transitions APIs时如何实现很好的转场动画。<br>]]>
    
    </summary>
    
      <category term="动画" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="连载" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/%E8%BF%9E%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Android studio分析内存泄露]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/28/how-to-use-android-studio-to-analysis-memory-leak/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/28/how-to-use-android-studio-to-analysis-memory-leak/</id>
    <published>2015-06-27T16:00:00.000Z</published>
    <updated>2015-07-11T16:04:35.000Z</updated>
    <content type="html"><![CDATA[<p>Android使用java作为平台开发，帮助了我们解决了很多底层问题，比如内存管理，平台依赖等等。然而，我们也经常遇到<code>OutOfMemoey</code>问题，垃圾回收到底去哪了？<br><a id="more"></a><br>接下来是一个<code>Handler Leak</code>的例子，它一般会在编译器中被警告提示。</p>
<h3 id="所需要的工具">所需要的工具</h3><ul>
<li>Android Studio 1.1 or higher</li>
<li>Eclipse MemoryAnalyzer</li>
</ul>
<h3 id="示例代码">示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonStaticNestedClassLeakActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  TextView textView;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = NonStaticNestedClassLeakActivity.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_non_static_nested_class_leak);</span><br><span class="line">    textView = (TextView)findViewById(R.id.textview);</span><br><span class="line">    Handler handler = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line">    handler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> </span><br><span class="line">        textView.setText(<span class="string">"Done"</span>);</span><br><span class="line">      &#125;<span class="comment">//a mock for long time work</span></span><br><span class="line">    &#125;, <span class="number">800000L</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个非常基础的Activity.注意这个匿名的<code>Runnable</code>被送到了Handler中，而且延迟非常的长。现在我们运行这个Activity,反复旋转屏幕，然后导出内存并分析。</p>
<h3 id="导入_Memory_到Eclipse_MemoryAnalyzer">导入 Memory 到Eclipse MemoryAnalyzer</h3><h4 id="使用Androidstudio导出_heap_dump">使用Androidstudio导出 heap dump</h4><p><img src="http://upload-images.jianshu.io/upload_images/98641-56b9fde4965b0a22.png?imageView2/2/w/1240/q/100" alt="Android Studio dump Memory Analyze">  </p>
<ul>
<li>点击左下角的Android</li>
<li>选中你的程序的包名</li>
<li>点击 initiates garbage collection on selected vm</li>
<li>点击 dump java heap for selected client</li>
</ul>
<h4 id="打开MAT，进行分析">打开MAT，进行分析</h4><p>MAT是对java heap中变量分析的一个工具，它可以用于分析内存泄露。</p>
<ul>
<li>点击<code>OQL</code>图标</li>
<li>在窗口输入<code>select * from instanceof android.app.Activity</code>并按<code>Ctrl + F5</code>或者<code>!</code>按钮</li>
<li>奇迹出现了，现在你发现泄露了许多的activity</li>
<li>这个真是相当的不容乐观，我们来分析一下为什么GC没有回收它</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/98641-5bdf6f3320b3be57.png?imageView2/2/w/1240/q/100" alt="EMA">  </p>
<blockquote>
<p>在OQL（Object Query Language）窗口下输入的查询命令可以获得所有在内存中的Activities，这段查询代码是不是非常简单高效呢？</p>
</blockquote>
<p>点击一个activity对象，右键选中<code>Path to GC roots</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/98641-15b85219d213fc76.png?imageView2/2/w/1240/q/100" alt="GC root">  </p>
<p><img src="http://upload-images.jianshu.io/upload_images/98641-f061475dc9b7aad6.png?imageView2/2/w/1240/q/100" alt="Message in looper hold a reference to Activity">  </p>
<p>在打开的新窗口中，你可以发现，你的Activity是被<code>this$0</code>所引用的，它实际上是匿名类对当前类的引用。<code>this$0</code>又被<code>callback</code>所引用，接着它又被<code>Message</code>中一串的<code>next</code>所引用，最后到主线程才结束。</p>
<blockquote>
<p>任何情况下你在class中创建非静态内部类，内部类会（自动）拥有对当前类的一个强引用。</p>
</blockquote>
<p>一旦你把<code>Runnable</code>或者<code>Message</code>发送到<code>Handler</code>中，它就会被放入<code>LooperThread</code>的消息队列，并且被保持引用，直到<code>Message</code>被处理。发送postDelayed这样的消息，你输入延迟多少秒，它就会泄露至少多少秒。而发送没有延迟的消息的话，当队列中的消息过多时，也会照成一个临时的泄露。</p>
<h4 id="尝试使用static_inner_class来解决">尝试使用static inner class来解决</h4><p>现在把<code>Runnable</code>变成静态的class</p>
<p><img src="http://upload-images.jianshu.io/upload_images/98641-3ade66cfdcbe579f.png?imageView2/2/w/1240/q/100" alt="StaticClass">  </p>
<p>现在，摇一摇手机，导出内存</p>
<p><img src="http://upload-images.jianshu.io/upload_images/98641-64aca564b14181a2.png?imageView2/2/w/1240/q/100" alt="StaticClass_memory_analyze">  </p>
<p>为什么又出现了泄露呢？我们看一看<code>Activities</code>的引用.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/98641-75627c00a4afe269.png?imageView2/2/w/1240/q/100" alt="StaticClass_memory_analyze_explained">  </p>
<p>看到下面的<code>mContext</code>的引用了吗，它被<code>mTextView</code>引用，这样说明，使用静态内部类还远远不够，我们仍然需要修改。</p>
<h4 id="使用弱引用_+_static_Runnable">使用弱引用 + static Runnable</h4><p>现在我们把刚刚内存泄露的罪魁祸首 - TextView改成弱引用。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/98641-123083d4deb8bc3f.png?imageView2/2/w/1240/q/100" alt="StaticClassWithWeakRef_code">  </p>
<p>再次注意我们对TextView保持的是<strong>弱引用</strong>，现在让它运行，摇晃手机</p>
<blockquote>
<p>小心地操作WeakReferences，它们随时可以为空，在使用前要判断是否为空.</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/98641-8ba97b98f57bef50.png?imageView2/2/w/1240/q/100" alt="StaticClassWithWeakRef_memory_analyze">  </p>
<p>哇！现在只有一个Activity的实例了，这回终于解决了我们的问题。</p>
<p>所以，我们应该记住：</p>
<ul>
<li>使用静态内部类</li>
<li>Handler/Runnable的依赖要使用弱引用。</li>
</ul>
<p>如果你把现在的代码与开始的代码相比，你会发现它们大不相同，开始的代码易懂简介，你甚至可以脑补出运行结果。</p>
<p>而现在的代码更加复杂，有很多的模板代码，当把<code>postDelayed</code>设置为一个短时间，比如<code>50ms</code>的情况下，写这么多代码就有点亏了。其实，还有一个更简单的方法。</p>
<h3 id="onDestroy中手动控制声明周期">onDestroy中手动控制声明周期</h3><p>Handler可以使用<code>removeCallbacksAndMessages(null)</code>，它将移除这个Handler所拥有的<code>Runnable</code>与<code>Message</code>。</p>
<pre><code><span class="comment">//Fixed by manually control lifecycle</span>
  <span class="annotation">@Override</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{
    <span class="keyword">super</span>.onDestroy();
    myHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);
  }
</code></pre><p>现在运行，旋转手机，导出内存</p>
<p><img src="http://upload-images.jianshu.io/upload_images/98641-1ae8a9f10acc9d1f.png?imageView2/2/w/1240/q/100" alt="removeCallbacks_memory_analyze">  </p>
<p>Good！只有一个实例。</p>
<p>这样写可以让你的代码更加简洁与可读。唯一要记住的就是就是要记得在生命周期onDestory的时候手动移除所有的消息。</p>
<h3 id="使用WeakHander">使用WeakHander</h3><p>（这个是第三方库，我就不翻译了，大家去<a href="https://github.com/badoo/android-weak-handler" target="_blank" rel="external">Github</a>上去学习吧）</p>
<h3 id="结论">结论</h3><p>在Handler中使用<code>postDelayed</code>需要额外的注意，为了解决问题，我们有三种方法</p>
<ul>
<li>使用静态内部Handler/Runnable + 弱引用</li>
<li>在onDestory的时候，手动清除Message</li>
<li>使用Badoo开发的第三方的 <a href="https://github.com/badoo/android-weak-handler" target="_blank" rel="external">WeakHandler</a></li>
</ul>
<p>这三种你可以任意选用，第二种看起来更加合理，但是需要额外的工作。第三种方法是我最喜欢的，当然你也要注意WeakHandler不能与外部的强引用共同使用。</p>
<h3 id="最后">最后</h3><p>本博客将长期保持原创性，翻译文章费时费力，如果你认为我的<strong>免费劳动</strong>有价值的话，不妨帮忙<code>点赞</code>或者<code>关注我</code>吧！</p>
<blockquote>
<p>This post is a permitted translation of <a href="https://techblog.badoo.com/blog/2014/08/28/android-handler-memory-leaks/" target="_blank" rel="external">badoo Tech Blog</a> and I add some text and screenshots for android studio users.<br><strong>Origin Author</strong>: <a href="https://techblog.badoo.com/authors/dmytro-voronkevych/" target="_blank" rel="external">Dmytro Voronkevych</a><br><strong>follow badoo on <a href="https://twitter.com/badootech" target="_blank" rel="external">Tweet</a></strong><br><strong>Translator</strong>: Miao1007</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android使用java作为平台开发，帮助了我们解决了很多底层问题，比如内存管理，平台依赖等等。然而，我们也经常遇到<code>OutOfMemoey</code>问题，垃圾回收到底去哪了？<br>]]>
    
    </summary>
    
      <category term="内存泄露" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="其他" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[完全掌握 Android Data Binding]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/27/mastering-android-databinding/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/27/mastering-android-databinding/</id>
    <published>2015-06-26T16:00:00.000Z</published>
    <updated>2015-07-11T16:09:52.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="https://github.com/LyndonChin/MasteringAndroidDataBinding" target="_blank" rel="external">完全掌握 Android Data Binding</a>  </p>
</blockquote>
<p>本教程是跟着 <a href="https://developer.android.com/tools/data-binding/guide.html" target="_blank" rel="external">Data Binding Guide</a> 学习过程中得出的一些实践经验，同时修改了官方教程的一些错误，每一个知识点都有对应的源码，争取做到实践与理论相结合。<br><a id="more"></a><br>Data Binding 解决了 Android UI 编程中的一个痛点，官方原生支持 MVVM 模型可以让我们在不改变既有代码框架的前提下，非常容易地使用这些新特性。其实在此之前，已经有些第三方的框架（<a href="http://robobinding.github.io/RoboBinding/getting_started.zh.html" target="_blank" rel="external">RoboAndroid</a>) 可以支持 MVVM 模型，无耐由于框架的侵入性太强，导致一直没有流行起来。 </p>
<p>Data Binding 框架一出，是不是也意味着像 <em>RoboGuice、ButterKnife</em> 这样的依赖注入框架也会慢慢失去市场，因为在 Java 代码中直接使用 <code>View</code> 变量的情况会越来越少。</p>
<h2 id="准备">准备</h2><h3 id="Android_Studio_更新到_1-3_版本">Android Studio 更新到 1.3 版本</h3><p>打开 Preferences，找到 <strong>Appearances &amp; Behavior</strong> 下的 <strong>Updates</strong> 选项，把 <strong>Automatically Check updates for</strong> 修改成 <strong>Canary Channel</strong>。</p>
<p><img src="http://img01.taobaocdn.com/imgextra/i1/160310864/TB2mN_5cVXXXXaEXpXXXXXXXXXX_!!160310864.png" style="width:100%"></p>
<p><strong>注意</strong></p>
<p><em>Data Binding 是一个 support 包，因此与 Android M 没什么关系，可以不用下载 Android MNC Preview 的 SDK。</em></p>
<h3 id="新建一个_Project">新建一个 Project</h3><p>修改 Project 的 <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/blob/master/build.gradle" target="_blank" rel="external">build.gradle</a>，为 build script 添加一条依赖，Gradle 版本为 1.2.3。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classpath <span class="string">'com.android.tools.build:gradle:1.2.3'</span></span><br><span class="line">classpath <span class="string">'com.android.databinding:dataBinder:1.0-rc0'</span></span><br></pre></td></tr></table></figure>
<p>为用到 Data Binding 的模块添加插件，修改对应的 <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/blob/master/app/build.gradle" target="_blank" rel="external">build.gradle</a>。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.databinding'</span></span><br></pre></td></tr></table></figure>
<h2 id="基础">基础</h2><p>工程创建完成后，我们通过一个最简单的例子来说明 Data Binding 的基本用法。</p>
<h3 id="布局文件">布局文件</h3><p>使用 Data Binding 之后，xml的布局文件就不再单纯地展示 UI 元素，还需要定义 UI 元素用到的变量。所以，它的根节点不再是一个 <code>ViewGroup</code>，而是变成了 <code>layout</code>，并且新增了一个节点 <code>data</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--原先的根节点（Root Element）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>要实现 MVVM 的 ViewModel 就需要把数据与UI进行绑定，<code>data</code> 节点就为此提供了一个桥梁，我们先在 <code>data</code> 中声明一个 <code>variable</code>，这个变量会为 UI 元素提供数据（例如 TextView 的 android:text），然后在 Java 代码中把”后台”数据与这个 <code>variable</code> 进行绑定。</p>
<p>如果要用一个表格来展示用户的基本信息，用 Data Binding 应该怎么实现呢？</p>
<h3 id="数据对象">数据对象</h3><p>添加一个 POJO 类 - <code>User</code>，非常简单，四个属性以及他们的 getter 和 setter。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lastName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>稍后，我们会新建一个 <code>User</code> 类型的变量，然后把它跟布局文件中声明的变量进行绑定。</p>
<h3 id="定义_Variable">定义 Variable</h3><p>再回到布局文件，在 <code>data</code> 节点中声明一个变量 <code>user</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"com.liangfeizc.databindingsamples.basic.User"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中 <code>type</code> 属性就是我们在 Java 文件中定义的 <code>User</code> 类。</p>
<p>当然，<code>data</code> 节点也支持 <code>import</code>，所以上面的代码可以换一种形式来写。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"com.liangfeizc.databindingsamples.basic.User"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"User"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们刚才在 build.gradle 中添加的那个插件 - <code>com.android.databinding</code>会根据xml文件的名称 <strong>Generate</strong> 一个继承自 <code>ViewDataBinding</code> 的类。</p>
<p>例如，这里 xml 的文件名叫 <code>activity_basic.xml</code>，那么生成的类就是 <code>ActivityBasicBinding</code>。</p>
<p><strong>注意</strong></p>
<p><code>java.lang.*</code> 包中的类会被自动导入，可以直接使用，例如要定义一个 <code>String</code> 类型的变量：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"firstName"</span> <span class="attribute">type</span>=<span class="value">"String"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="绑定_Variable">绑定 Variable</h3><p>修改 <code>BasicActivity</code> 的 <code>onCreate</code> 方法，用 <code>DatabindingUtil.setContentView()</code> 来替换掉 <code>setContentView()</code>，然后创建一个 <code>user</code> 对象，通过 <code>binding.setUser(user)</code> 与 <code>variable</code> 进行绑定。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    ActivityBasicBinding binding = DataBindingUtil.setContentView(</span><br><span class="line">            <span class="keyword">this</span>, R.layout.activity_basic);</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"fei"</span>, <span class="string">"Liang"</span>);</span><br><span class="line">    binding.setUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了使用框架自动生成的 <code>ActivityBasicBinding</code>，我们也可以使用自定义的类名。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span> <span class="attribute">class</span>=<span class="value">"com.example.CustomBinding"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<p><code>ActivityBasicBinding</code> 类是自动生成的，所有的 set 方法也是根据 <code>variable</code> 名称生成的。例如，我们定义了两个变量。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;data&gt;</span><br><span class="line">    &lt;variable name="firstName" type="String" /&gt;</span><br><span class="line">    &lt;variable name="firstName" type=""</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure>
<p>那么就会生成对应的两个 set 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setFirstName(String firstName);</span><br><span class="line">setLastName(String lastName);</span><br></pre></td></tr></table></figure>
<h3 id="使用_Variable">使用 Variable</h3><p>数据与 Variable 绑定之后，xml 的 UI 元素就可以直接使用了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"@&#123;user.lastName&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>至此，一个简单的数据绑定就完成了，可参考<a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/tree/master/app/src/main/java/com/liangfeizc/databindingsamples/basic" target="_blank" rel="external">完整代码</a></p>
<h2 id="高级用法">高级用法</h2><h3 id="使用类方法">使用类方法</h3><p>首先为类添加一个静态方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStringUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">capitalize</span><span class="params">(<span class="keyword">final</span> String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (word.length() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(word.charAt(<span class="number">0</span>)).toUpperCase() + word.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 xml 的 <code>data</code> 节点中导入：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"com.liangfeizc.databindingsamples.utils.MyStringUtils"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用方法与 Java 语法一样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">	android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">	android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">	android:text=<span class="string">"@&#123;StringUtils.capitalize(user.firstName)&#125;"</span> /&gt;</span><br></pre></td></tr></table></figure>
<h3 id="类型别名">类型别名</h3><p>如果我们在 <code>data</code> 节点了导入了两个同名的类怎么办？</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"com.example.home.data.User"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"com.examle.detail.data.User"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"User"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样一来出现了两个 <code>User</code> 类，那 <code>user</code> 变量要用哪一个呢？不用担心，<code>import</code> 还有一个 <code>alias</code> 属性。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"com.example.home.data.User"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"com.examle.detail.data.User"</span> <span class="attribute">alias</span>=<span class="value">"DetailUser"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"DetailUser"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Null_Coalescing_运算符">Null Coalescing 运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=<span class="string">"@&#123;user.displayName ?? user.lastName&#125;"</span></span><br></pre></td></tr></table></figure>
<p>就等价于</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=<span class="string">"@&#123;user.displayName != null ? user.displayName : user.lastName&#125;"</span></span><br></pre></td></tr></table></figure>
<h3 id="属性值">属性值</h3><p>通过 <code>${}</code> 可以直接把 Java 中定义的属性值赋值给 xml 属性。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">"@&#123;user.lastName&#125;"</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:visibility</span>=<span class="value">"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用资源数据">使用资源数据</h3><p>这个例子，官方教程有错误，可以参考<a href="http://blog.csdn.net/feelang/article/details/46342699" target="_blank" rel="external">Android Data Binder 的一个bug</a>，完整代码<a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/blob/master/app/src/main/res/layout/activity_resource.xml" target="_blank" rel="external">在此</a>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">    <span class="attribute">android:padding</span>=<span class="value">"@&#123;large? (int)@dimen/largePadding : (int)@dimen/smallPadding&#125;"</span></span><br><span class="line">    <span class="attribute">android:background</span>=<span class="value">"@android:color/black"</span></span><br><span class="line">    <span class="attribute">android:textColor</span>=<span class="value">"@android:color/white"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"@string/hello_world"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Observable_Binding">Observable Binding</h2><p>本来这一节的标题应该叫<strong>双向绑定</strong>，但是很遗憾，现在的 <strong>Data Binding</strong> 暂时支持单向绑定，还没有达到 <strong>Angular.js</strong> 的威力。</p>
<p>要实现 Observable Binding，首先得有一个实现了 <code>android.databinding.Observable</code> 的类，为了方便，Android 原生提供了已经封装好的一个类 - <code>BaseObservable</code>，并且实现了监听器的注册机制。</p>
<p>我们可以直接继承 <code>BaseObservable</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableUser</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="annotation">@Bindable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Bindable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        notifyPropertyChanged(BR.firstName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        notifyPropertyChanged(BR.lastName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>BR</code> 是编译阶段生成的一个类，功能与 <code>R.java</code> 类似，用 <code>@Bindable</code> 标记过 <code>getter</code> 方法会在 <code>BR</code> 中生成一个 <em>entry</em>，当我们</p>
<p>通过代码可以看出，当数据发生变化时还是需要手动发出通知。 通过调用<code>notifyPropertyChanged(BR.firstName)</code>来通知系统 <code>BR.firstName</code> 这个 <code>entry</code> 的数据已经发生变化，需要更新 UI。</p>
<p>除此之外，还有一种更细粒度的绑定方式，可以具体到成员变量，这种方式无需继承 <code>BaseObservable</code>，一个简单的 <strong>POJO</strong> 就可以实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlainUser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; firstName = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; lastName = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ObservableInt age = <span class="keyword">new</span> ObservableInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>系统为我们提供了所有的 <strong>primitive type</strong> 所对应的 <strong>Observable</strong>类，例如 <code>ObservableInt</code>、<code>ObservableFloat</code>、<code>ObservableBoolean</code> 等等，还有一个 <code>ObservableField</code> 对应着 <strong>reference type</strong>。</p>
<p>剩下的数据绑定与前面介绍的方式一样，具体可参考<a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/blob/master/app/src/main/java/com/liangfeizc/databindingsamples/observable/ObservableActivity.java" target="_blank" rel="external">ObservableActivity</a></p>
<h2 id="带_ID_的_View">带 ID 的 View</h2><p><strong>Data Binding</strong> 有效降低了代码的冗余性，甚至完全没有必要再去获取一个 View 实例，但是情况不是绝对的，万一我们真的就需要了呢？不用担心，只要给 View 定义一个 ID，<strong>Data Binding</strong> 就会为我们生成一个对应的 <code>final</code> 变量。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/firstName"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面代码中定义了一个 ID 为 <em>firstName*</em> 的 <code>TextView</code>，那么它对应的变量就是 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TextView firstName;</span><br></pre></td></tr></table></figure>
<p>具体代码可参考 <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/blob/master/app/src/main/java/com/liangfeizc/databindingsamples/viewids/ViewWithIDsActivity.java" target="_blank" rel="external">ViewWithIDsActivity.java</a> 。</p>
<h2 id="ViewStubs">ViewStubs</h2><p>xml中的 <code>ViewStub</code> 经过 binding 之后会转换成 <code>ViewStubProxy</code>, 具体代码可参考 <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/blob/master/app/src/main/java/com/liangfeizc/databindingsamples/viewstub/ViewStubActivity.java" target="_blank" rel="external">ViewStubActivity.java</a></p>
<p>简单用代码说明一下，xml 文件与之前的代码一样，根节点改为 <code>layout</code>，在 <code>LinearLayout</code> 中添加一个 <code>ViewStub</code>，添加 <strong>ID</strong>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">...</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ViewStub</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/view_stub"</span></span><br><span class="line">            <span class="attribute">android:layout</span>=<span class="value">"@layout/view_stub"</span></span><br><span class="line">            <span class="attribute">...</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 Java 代码中获取 <code>binding</code> 实例，为 <code>ViewStubProy</code> 注册 <code>ViewStub.OnInflateListener</code> 事件，搞定！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_view_stub);</span><br><span class="line">binding.viewStub.setOnInflateListener(<span class="keyword">new</span> ViewStub.OnInflateListener() &#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInflate</span><span class="params">(ViewStub stub, View inflated)</span> </span>&#123;</span><br><span class="line">		ViewStubBinding binding = DataBindingUtil.bind(inflated);</span><br><span class="line">		User user = <span class="keyword">new</span> User(<span class="string">"fee"</span>, <span class="string">"lang"</span>);</span><br><span class="line">		binding.setUser(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Dynamic_Variables">Dynamic Variables</h2><p>完整代码可以参考 <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/tree/master/app/src/main/java/com/liangfeizc/databindingsamples/dynamic" target="_blank" rel="external">dynamic</a></p>
<p>以 <code>RecyclerView</code> 为例，<code>Adapter</code> 的 <strong>DataBinding</strong> 需要动态生成，因此我们可以在 <code>onCreateViewHolder</code> 的时候创建这个 <strong>DataBinding</strong>，然后在 <code>onBindViewHolder</code> 中获取这个 <strong>DataBinding</strong>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ViewDataBinding binding;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BindingHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewDataBinding <span class="title">getBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBinding</span><span class="params">(ViewDataBinding binding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.binding = binding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BindingHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup viewGroup, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    ViewDataBinding binding = DataBindingUtil.inflate(</span><br><span class="line">            LayoutInflater.from(viewGroup.getContext()),</span><br><span class="line">            R.layout.list_item,</span><br><span class="line">            viewGroup,</span><br><span class="line">            <span class="keyword">false</span>);</span><br><span class="line">    BindingHolder holder = <span class="keyword">new</span> BindingHolder(binding.getRoot());</span><br><span class="line">    holder.setBinding(binding);</span><br><span class="line">    <span class="keyword">return</span> holder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BindingHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    User user = users.get(position);</span><br><span class="line">    holder.getBinding().setVariable(BR.user, user);</span><br><span class="line">    holder.getBinding().executePendingBindings();</span><br><span class="line">&#125;</span><br><span class="line">```	</span><br><span class="line"></span><br><span class="line">注意此处 `DataBindingUtil` 的用法：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">ViewDataBinding binding = DataBindingUtil.inflate(</span><br><span class="line">	LayoutInflater.from(viewGroup.getContext()),</span><br><span class="line">	R.layout.list_item,</span><br><span class="line">	viewGroup,</span><br><span class="line">	<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Attribute_setters">Attribute setters</h2><p>有了 <strong>Data Binding</strong>，即使属性没有在 <code>declare-styleable</code> 中定义，我们也可以通过 xml 进行赋值操作。<br>为了演示这个功能，我自定义了一个 View - <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/blob/master/app/src/main/java/com/liangfeizc/databindingsamples/attributesetters/UserView.java" target="_blank" rel="external">UserView</a>，其中 <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/blob/master/app/src/main/res/values/styles.xml" target="_blank" rel="external">R.styleable.UserView</a> 中只定义了一个 <code>age</code> 属性，其中 <code>firstName</code> 和 <code>lastName</code> 只有对应的两个 <code>setter</code> 方法。</p>
<p>只要有 <code>setter</code> 方法就可以这样为属性赋值：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">com.liangfeizc.databindingsamples.attributesetters.UserView</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:paddingLeft</span>=<span class="value">"@dimen/largePadding"</span></span><br><span class="line">    <span class="attribute">app:onClickListener</span>=<span class="value">"@&#123;activity.clickListener&#125;"</span></span><br><span class="line">    <span class="attribute">app:firstName</span>=<span class="value">"@&#123;@string/firstName&#125;"</span></span><br><span class="line">    <span class="attribute">app:lastName</span>=<span class="value">"@&#123;@string/lastName&#125;"</span></span><br><span class="line">    <span class="attribute">app:age</span>=<span class="value">"27"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>onClickListener</code> 也是同样道理，只不过我们是在 <code>Activity</code> 中定义了一个 <code>Listener</code>。</p>
<h2 id="转换器_(Converters)">转换器 (Converters)</h2><p>具体代码可参考 <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/blob/master/app/src/main/java/com/liangfeizc/databindingsamples/converters/ConversionsActivity.java" target="_blank" rel="external">ConversionsActivity.java</a>。</p>
<p>在 xml 中为属性赋值时，如果变量的类型与属性不一致，通过 <strong>DataBinding</strong> 可以进行转换。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">    <span class="attribute">android:onClick</span>=<span class="value">"toggleIsError"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"@&#123;isError.get() ? @color/red : @color/white&#125;"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>只需要定义一个标记了 <code>@BindingConversion</code> 的静态方法即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingConversion</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">convertColorToString</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">        <span class="keyword">case</span> Color.RED:</span><br><span class="line">            <span class="keyword">return</span> R.string.red;</span><br><span class="line">        <span class="keyword">case</span> Color.WHITE:</span><br><span class="line">            <span class="keyword">return</span> R.string.white;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.string.app_name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="include">include</h2><p>用法可以参考代码 <a href="https://github.com/LyndonChin/MasteringAndroidDataBinding/blob/master/app/src/main/java/com/liangfeizc/databindingsamples/includes/IncludeActivity.java" target="_blank" rel="external">IncludeActivity.java</a>。</p>
<p>如果在非根节点的 ViewGroup 中使用 <code>include</code> 会导致 crash，已经在 StackOverflow 上提了一个问题<a href="http://stackoverflow.com/questions/30887906/android-data-binding-makes-app-crash-when-using-include-tag-in-a-non-root-viewgr" target="_blank" rel="external">Android Data Binding makes app crash when using include tag in a non-root ViewGroup</a></p>
<blockquote>
<p>至此，官网所介绍的用法都在代码中实践过了，如果你喜欢，请为我点赞 ：）</p>
</blockquote>
<ul>
<li><a href="http://weibo.com/u/1670598115" target="_blank" rel="external">我的微博</a></li>
<li><a href="http://www.liangfeizc.com" target="_blank" rel="external">个人博客</a></li>
<li><a href="https://twitter.com/JpRyouhi" target="_blank" rel="external">twitter</a></li>
<li><a href="https://www.facebook.com/fee.lang.zc" target="_blank" rel="external">facebook</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文链接：<a href="https://github.com/LyndonChin/MasteringAndroidDataBinding">完全掌握 Android Data Binding</a>  </p>
</blockquote>
<p>本教程是跟着 <a href="https://developer.android.com/tools/data-binding/guide.html">Data Binding Guide</a> 学习过程中得出的一些实践经验，同时修改了官方教程的一些错误，每一个知识点都有对应的源码，争取做到实践与理论相结合。<br>]]>
    
    </summary>
    
      <category term="数据绑定" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    
      <category term="其他" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Android Studio中进行单元测试和UI测试]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/25/google-codelabs-unit-and-ui-testing-in-android-studio/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/25/google-codelabs-unit-and-ui-testing-in-android-studio/</id>
    <published>2015-06-24T16:00:00.000Z</published>
    <updated>2015-07-11T15:56:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-概述">1.概述</h2><p>在这个codelab中，你将学习如何在Android Studio中配置工程用于测试，在开发机器上编写并运行单元测试，以及如何在手机上做功能UI测试。</p>
<p><strong>你会学到什么</strong></p>
<ul>
<li>更新包含JUnit和Android Testing Support Library的Gradle构建文件</li>
<li>编写运行在本机Java虚拟机上的单元测试</li>
<li>编写运行在手机或者虚拟机上的Espresso测试</li>
</ul>
<p><strong>你需要什么</strong></p>
<ul>
<li><a href="https://developer.android.com/sdk/installing/studio.html" target="_blank" rel="external">Android Studio</a> v1.2+</li>
<li>Android 4.0+的测试设备<a id="more"></a>
</li>
</ul>
<hr>
<h2 id="2-创建新的Android_Studio工程">2.创建新的Android Studio工程</h2><p>如果是第一次启动Android Studio，从欢迎页选择“<strong>Start a new Android Studio project</strong>”。如果已经打开了一个工程，选择<strong>File&gt;New&gt;New Project…</strong></p>
<p>“<em>Create new project</em>”向导会指导整个过程，在第一页输入如下内容：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Application Name</td>
<td>TestingExample</td>
</tr>
<tr>
<td>Company demain</td>
<td>testing.example.com</td>
</tr>
</tbody>
</table>
<p>这样会保证你的代码同codelab讲解的内容具有一致的命名。其他的选项都设置为默认，一路点击<strong>Next</strong>直到工程创建完毕。</p>
<p>点击<strong>Run</strong>按钮检查app是否运行正常，要么从模拟器列表中选择一个启动，要么确认开启了debug模式的设备通过USB同电脑正确连接。</p>
<p>app目前没有做任何事情，但是屏幕上应该显示“Hello world!”和app的名字。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-839b775d39f912f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p>
<p><strong>经常被问及的问题</strong></p>
<ul>
<li><a href="https://developer.android.com/sdk/index.html" target="_blank" rel="external">如何安装Android Studio？</a></li>
<li><a href="http://developer.android.com/tools/device.html" target="_blank" rel="external">如何开启USB调试？</a></li>
<li><a href="http://stackoverflow.com/questions/16596877/android-studio-doesnt-see-device" target="_blank" rel="external">为什么Android Studio找不到我的设备？</a></li>
<li><a href="http://stackoverflow.com/questions/4775603/android-error-failed-to-install-apk-on-device-timeout/4786299#4786299" target="_blank" rel="external">Android错误：无法将*.apk安装到设备上：超时？</a></li>
</ul>
<hr>
<h2 id="3-配置支持单元测试的工程">3.配置支持单元测试的工程</h2><p>在写测试之前，让我们做下简单的检查，确保工程配置正确。</p>
<p>首先，确认在<strong>Build Variants</strong>窗口内的<strong>Test Artifact</strong>中选择了”Unit Tests”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-ab4402443ad7dc5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p>
<p>然后，在工程的<code>src</code>文件夹内创建<code>test</code>和<code>test/java</code>文件夹。需要注意的是，你不能在<strong>Android</strong>视图下进行这些操作，要么在系统的文件管理器内创建，要么在工程窗口左上方点击下拉菜单选择<strong>Project</strong>视图。最终的工程结构应该是这样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-9e098817f6fcca44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p>
<p>（在codelab的剩余部分，你可以返回继续使用<strong>Android</strong>工程视图）</p>
<p>最后，打开工程的<code>build.gradle（Module:app）</code>文件，添加JUnit4依赖，点击<strong>Gradle sync</strong>按钮。</p>
<p><strong>build.gradle</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.1.1'</span></span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>当你同步Gradle配置时，可能需要联网下载JUnit依赖。</p>
</blockquote>
<hr>
<h2 id="4-创建第一个单元测试">4.创建第一个单元测试</h2><p>现在，万事俱备，让我们开始写第一个测试吧。首先，创建一个非常简单的被测类：Calculator类。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-20cce1345b5076de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p>
<p>然后，向类中添加一些基本的算术运算方法，比如加法和减法。将下列代码复制到编辑器中。不用担心实际的实现，暂时让所有的方法返回0。</p>
<p><strong>Calculator.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testing.testingexample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">substract</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">divide</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">multiply</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Android Studio提供了一个快速创建测试类的方法。只需在编辑器内右键点击Calculator类的声明，选择<strong>Go to &gt; Test</strong>，然后<strong>“Create a new test…”</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-729c021ff61b0dc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p>
<p>在打开的对话窗口中，选择<strong>JUnit4</strong>和”<strong>setUp/@Before</strong>“，同时为所有的计算器运算生成测试方法。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-19f96a03d2fa811a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">   </p>
<p>这样，就会在正确的文件夹内<code>(app/src/test/java/com/example/testing/testingexample)</code>生成测试类框架，在框架内填入测试方法即可。下面是一个示例：</p>
<p><strong>Calculator.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testing.testingexample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Calculator mCalculator;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mCalculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSum</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//expected: 6, sum of 1 and 5</span></span><br><span class="line">        assertEquals(<span class="number">6</span>d, mCalculator.sum(<span class="number">1</span>d, <span class="number">5</span>d), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSubstract</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">1</span>d, mCalculator.substract(<span class="number">5</span>d, <span class="number">4</span>d), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDivide</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">4</span>d, mCalculator.divide(<span class="number">20</span>d, <span class="number">5</span>d), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultiply</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">10</span>d, mCalculator.multiply(<span class="number">2</span>d, <span class="number">5</span>d), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>请将代码复制到编辑器或者使用JUnit框架提供的断言来编写自己的测试。</p>
<hr>
<h2 id="5-运行单元测试">5.运行单元测试</h2><p>终于到运行测试的时候了！右键点击<code>CalculatorTest</code>类，选择<strong>Run &gt; CalculatorTest</strong>。也可以通过命令行运行测试，在工程目录内输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<p>无论如何运行测试，都应该看到输出显示4个测试都失败了。这是预期的结果，因为我们还没有实现运算操作。<br><img src="http://upload-images.jianshu.io/upload_images/580359-00a07e968baebccc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p>
<p>让我们修改Calculator类中的<code>sum(double a, double b)</code>方法返回一个正确的结果，重新运行测试。你应该看到4个测试中的3个失败了。</p>
<p><strong>Calculator.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>作为练习，你可以实现剩余的方法使所有的测试通过。</p>
<blockquote>
<p>可能你已经注意到了Android Studio从来没有让你连接设备或者启动模拟器来运行测试。那是因为，位于<code>src/tests</code>目录下的测试是运行在本地电脑Java虚拟机上的单元测试。编写测试，实现功能使测试通过，然后再添加更多的测试…这种工作方式使快速迭代成为可能，我们称之为<strong>测试驱动开发</strong>。<br>值得注意的是，当在本地运行测试时，Gradle为你在环境变量中提供了包含Android框架的android.jar包。但是它们功能不完整（所以，打个比方，你不能单纯调用<code>Activity</code>的方法并指望它们生效）。推荐使用<a href="http://mockito.org/" target="_blank" rel="external">Mockito</a>等mocking框架来mock你需要使用的任何Android方法。对于运行在设备上，并充分利用Android框架的测试，请继续阅读本篇教程的下个部分。</p>
</blockquote>
<hr>
<h2 id="6-配置支持Instrumentation测试的工程">6.配置支持Instrumentation测试的工程</h2><p>虽然在Android框架内支持运行instrumentation测试，但是目前开发重心主要集中在刚刚发布的作为<strong>Android Testing Support Library</strong>一部分的新的<code>AndroidJUnitRunner</code>。测试库包含<em>Espresso</em>，用于运行功能UI测试的框架。让我们通过编辑<code>build.gradle</code>的相关部分来把它们添加进我们的工程。</p>
<p><strong>build.gradle</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">22</span></span><br><span class="line">    buildToolsVersion <span class="string">"22.0.1"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.example.testing.testingexample"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">22</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ADD THIS LINE:</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ADD THESE LINES:</span></span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">        <span class="keyword">exclude</span> <span class="string">'LICENSE.txt'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.0.0'</span> <span class="comment">//← MAKE SURE IT’S 22.0.0</span></span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ADD THESE LINES:</span></span><br><span class="line">    androidTestCompile <span class="string">'com.android.support.test:runner:0.2'</span></span><br><span class="line">    androidTestCompile <span class="string">'com.android.support.test:rules:0.2'</span></span><br><span class="line">    androidTestCompile <span class="string">'com.android.support.test.espresso:espresso-core:2.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>重要</strong>：由于一些依赖版本冲突，你需要确认<code>com.android.support:appcompat-v7</code>库的版本号是<code>22.0.0</code>，像上面的代码片段一样。<br>另外，Android Studio可能会提醒你<code>Build Tools 22.0.1</code>没有安装。你应该接受修复建议，Studio会为你安装Build Tools或者在build.gradle中把这行修改成已经安装在你电脑的版本。</p>
</blockquote>
<p>上面的工作完成后，在<strong>Build Variants</strong>窗口内切换成<strong>Android Instrumentation Tests</strong>，你的工程应该自动同步。如果没有，点击<strong>Gradle sync</strong>按钮。</p>
<hr>
<h2 id="7-为app添加简单的交互">7.为app添加简单的交互</h2><p><img src="http://upload-images.jianshu.io/upload_images/580359-40a6436d81203a3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p>
<p>在使用Espresso进行UI测试前，让我们为app添加一些Views和简单的交互。我们使用一个用户可以输入名字的EditText，欢迎用户的Button和用于输出的TextView。打开<code>res/layout/activity_main.xml</code>，粘贴如下代码：<br><strong>activity_main.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span> <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> <span class="attribute">android:paddingLeft</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingRight</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingBottom</span>=<span class="value">"@dimen/activity_vertical_margin"</span> <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/textView"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"@string/hello_world"</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">        <span class="attribute">android:hint</span>=<span class="value">"Enter your name here"</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/editText"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_below</span>=<span class="value">"@+id/textView"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"Say hello!"</span></span><br><span class="line">        <span class="attribute">android:layout_below</span>=<span class="value">"@+id/editText"</span></span><br><span class="line">        <span class="attribute">android:onClick</span>=<span class="value">"sayHello"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>还需要在<code>MainActivity.java</code>中添加onClick handler：</p>
<p><strong>MainActivity.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">    TextView textView = (TextView) findViewById(R.id.textView);</span><br><span class="line">    EditText editText = (EditText) findViewById(R.id.editText);</span><br><span class="line">    textView.setText(<span class="string">"Hello, "</span> + editText.getText().toString() + <span class="string">"!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在可以运行app并确认一切工作正常。在点击<strong>Run</strong>按钮之前，确认你的<em>Run Configuration</em>没有设置为运行测试。如需更改，点击下拉选项，选择<strong>app</strong>。</p>
<hr>
<h2 id="8-创建并运行Espresso测试">8.创建并运行Espresso测试</h2><p><img src="http://upload-images.jianshu.io/upload_images/580359-182d42c3cc27596a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p>
<p>在工程的整体视图上，找到以（<code>androidTest</code>）后缀结尾的包名并创建一个新的Java类。可以将它命名为<code>MainActivityInstrumentationTest</code>，将如下代码粘贴过去。</p>
<p><em>** MainActivityInstrumentationTest.java</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testing.testingexample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.test.InstrumentationRegistry;</span><br><span class="line"><span class="keyword">import</span> android.support.test.espresso.action.ViewActions;</span><br><span class="line"><span class="keyword">import</span> android.support.test.rule.ActivityTestRule;</span><br><span class="line"><span class="keyword">import</span> android.support.test.runner.AndroidJUnit4;</span><br><span class="line"><span class="keyword">import</span> android.test.ActivityInstrumentationTestCase2;</span><br><span class="line"><span class="keyword">import</span> android.test.suitebuilder.annotation.LargeTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.Espresso.onView;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.action.ViewActions.click;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.action.ViewActions.closeSoftKeyboard;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.action.ViewActions.typeText;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.assertion.ViewAssertions.matches;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.matcher.ViewMatchers.withId;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.support.test.espresso.matcher.ViewMatchers.withText;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@RunWith</span>(AndroidJUnit4.class)</span><br><span class="line"><span class="annotation">@LargeTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityInstrumentationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STRING_TO_BE_TYPED = <span class="string">"Peter"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivityTestRule&lt;MainActivity&gt; mActivityRule = <span class="keyword">new</span> ActivityTestRule&lt;&gt;(</span><br><span class="line">        MainActivity.class);</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        onView(withId(R.id.editText)).perform(typeText(STRING_TO_BE_TYPED), closeSoftKeyboard()); <span class="comment">//line 1</span></span><br><span class="line"></span><br><span class="line">        onView(withText(<span class="string">"Say hello!"</span>)).perform(click()); <span class="comment">//line 2</span></span><br><span class="line"></span><br><span class="line">        String expectedText = <span class="string">"Hello, "</span> + STRING_TO_BE_TYPED + <span class="string">"!"</span>;</span><br><span class="line">        onView(withId(R.id.textView)).check(matches(withText(expectedText))); <span class="comment">//line 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试类通过<strong>AndroidJUnitRunner</strong>运行，并执行<code>sayHello()</code>方法。下面将逐行解释都做了什么：</p>
<ul>
<li>1.首先，找到ID为<code>editText</code>的view，输入<code>Peter</code>，然后关闭键盘；</li>
<li>2.接下来，点击<code>Say hello!</code>的View，我们没有在布局的XML中为这个Button设置id，因此，通过搜索它上面的文字来找到它；</li>
<li>3.最后，将<code>TextView</code>上的文本同预期结果对比，如果一致则测试通过；</li>
</ul>
<p>你也可以右键点击域名运行测试，选择<strong>Run&gt;MainActivityInstrume…</strong>（第二个带Android图标的）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-86da68654bd41cb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p>
<p>这样就会在模拟器或者连接的设备上运行测试，你可以在手机屏幕上看到被执行的动作（比如在<code>EditText</code>上打字）。最后会在Android Studio输出通过和失败的测试结果。</p>
<p><a href="https://github.com/dongdaqing/TestingExample" target="_blank" rel="external">Github下载测试源码</a></p>
<hr>
<h2 id="9-祝贺">9.祝贺</h2><p>我们希望你能喜欢本篇教程，并且开始着手测试你的应用程序。接着你可以学习如下内容：</p>
<ul>
<li>了解更多关于<a href="https://developer.android.com/training/testing/unit-testing/index.html" target="_blank" rel="external">单元测试和instrumentation测试的区别</a>；</li>
<li>了解更多关于设置<a href="https://developer.android.com/tools/testing-support-library/index.html" target="_blank" rel="external">Android Testing Support Library</a>；</li>
<li><p>观看下面非常棒的有关Android Studio的视频：</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=K2dodTXARqc" target="_blank" rel="external">Introduction to Android Studio</a></li>
<li><a href="https://www.youtube.com/watch?v=cD7NPxuuXYY" target="_blank" rel="external">Introducing Gradle (Ep 2, Android Studio)</a></li>
<li><a href="http://www.youtube.com/watch?v=JLLnhwtDoHw" target="_blank" rel="external">Layout Editor (Ep 3, Android Studio)</a></li>
<li><a href="http://www.youtube.com/watch?v=2I6fuD20qlY" target="_blank" rel="external">Debugging and testing in Android Studio (Ep 4, Android Studio)</a></li>
</ul>
</li>
<li>在<a href="https://github.com/googlesamples/android-testing/" target="_blank" rel="external">Github下载Google测试示例代码</a></li>
</ul>
<blockquote>
<p>译文链接：<a href="http://www.jianshu.com/p/03118c11c199" target="_blank" rel="external">在Android Studio中进行单元测试和UI测试</a><br>本篇教程翻译自<a href="https://events.google.com/io2015/" target="_blank" rel="external">Google I/O 2015</a>中关于测试的codelab，掌握科学上网的同学请点击这里阅读：<a href="https://io2015codelabs.appspot.com/codelabs/android-studio-testing#1" target="_blank" rel="external">Unit and UI Testing in Android Studio</a>。能力有限，如有翻译错误，请批评指正。如需转载，请注明出处。<br><a href="https://github.com/dongdaqing/TestingExample" target="_blank" rel="external">Github下载测试源码</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-概述">1.概述</h2><p>在这个codelab中，你将学习如何在Android Studio中配置工程用于测试，在开发机器上编写并运行单元测试，以及如何在手机上做功能UI测试。</p>
<p><strong>你会学到什么</strong></p>
<ul>
<li>更新包含JUnit和Android Testing Support Library的Gradle构建文件</li>
<li>编写运行在本机Java虚拟机上的单元测试</li>
<li>编写运行在手机或者虚拟机上的Espresso测试</li>
</ul>
<p><strong>你需要什么</strong></p>
<ul>
<li><a href="https://developer.android.com/sdk/installing/studio.html">Android Studio</a> v1.2+</li>
<li>Android 4.0+的测试设备]]>
    
    </summary>
    
      <category term="测试" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="单元测试" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何使用Android Studio把自己的Android library分享到jCenter和Maven Central]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/25/how-to-upload-library-to-jcenter-maven-central-as-dependency/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/25/how-to-upload-library-to-jcenter-maven-central-as-dependency/</id>
    <published>2015-06-24T16:00:00.000Z</published>
    <updated>2015-07-11T16:07:39.000Z</updated>
    <content type="html"><![CDATA[<p>如果你想在Android Studio中引入一个library到你的项目，你只需添加如下的一行代码到模块的build.gradle文件中。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>就是如此简单的一行代码，你就可以使用这个library了。</p>
<p>酷呆了。不过你可能很好奇Android Studio是从哪里得到这个library的。这篇文章将详细讲解这是怎么回事，包括如何把你的库发布出去分享给世界各地的其他开发者，这样不仅可以让世界更美好，还可以耍一次酷。<br><a id="more"></a></p>
<h2 id="Android_studio_是从哪里得到库的？">Android studio 是从哪里得到库的？</h2><p>先从这个简单的问题开始，我相信不是每个人都完全明白Android studio 是从哪里得到这些library的。莫非就是Android studio 从google搜索然后下载了一个合适的给我们？</p>
<p>呵呵，没那么复杂。Android Studio是从build.gradle里面定义的Maven 仓库服务器上下载library的。Apache Maven是Apache开发的一个工具，提供了用于贡献library的文件服务器。总的来说，只有两个标准的Android library文件服务器：jcenter 和  Maven Central。</p>
<h2 id="jcenter">jcenter</h2><p>jcenter是一个由 bintray.com维护的Maven仓库 。你可以在<a href="http://jcenter.bintray.com/" target="_blank" rel="external">这里</a>看到整个仓库的内容。</p>
<p>我们在项目的build.gradle 文件中如下定义仓库，就能使用jcenter了：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Maven_Central">Maven Central</h2><p>Maven Central 则是由<a href="https://sonatype.org/" target="_blank" rel="external">sonatype.org</a>维护的Maven仓库。你可以在<a href="https://oss.sonatype.org/content/repositories/releases/" target="_blank" rel="external">这里</a>看到整个仓库。  </p>
<p>注：不管是jcenter还是Maven Central ，两者都是Maven仓库</p>
<p>我们在项目的build.gradle 文件中如下定义仓库，就能使用Maven Central了：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><span style="color: rgb(255, 0, 0);">注意，虽然jcenter和Maven Central 都是标准的 android library仓库，但是它们维护在完全不同的服务器上，由不同的人提供内容，两者之间毫无关系</span>。在jcenter上有的可能 Maven Central 上没有，反之亦然。</p>
<p>除了两个标准的服务器之外，如果我们使用的library的作者是把该library放在自己的服务器上，我们还可以自己定义特有的Maven仓库服务器。Twitter的Fabric.io 就是这种情况，它们在<a href="https://maven.fabric.io/public" target="_blank" rel="external">https://maven.fabric.io/public</a>上维护了一个自己的Maven仓库。如果你想使用Fabric.io的library，你必须自己如下定义仓库的url。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">repositories</span> &#123;</span><br><span class="line">    <span class="title">maven</span> &#123; <span class="title">url</span> <span class="string">'https://maven.fabric.io/public'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在里面使用相同的方法获取一个library。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">dependencies</span> &#123;</span><br><span class="line">    <span class="title">compile</span> <span class="string">'com.crashlytics.sdk.android:crashlytics:2.2.4<span class="variable">@aar</span>'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是将library上传到标准的服务器与自建服务器，哪种方法更好呢？当然是前者。<span style="color: rgb(0, 112, 192);">如果将我们的library公开，其他开发者除了一行定义依赖名的代码之外不需要定义任何东西。因此这篇文章中，我们将只关注对开发者更友好的jcenter 和 Maven Central</span> 。</p>
<p>实际上可以在Android Studio上使用的除了Maven 仓库之外还有另外一种仓库：<a href="http://ant.apache.org/ivy/" target="_blank" rel="external">Ivy 仓库</a> 。但是根据我的经验来看，我还没看到任何人用过它，包括我，因此本文就直接忽略了。</p>
<h2 id="理解jcenter和Maven_Central">理解jcenter和Maven Central</h2><p>为何有两个标准的仓库？</p>
<p>事实上两个仓库都具有相同的使命：提供Java或者Android library服务。上传到哪个（或者都上传）取决于开发者。</p>
<p>起初，Android Studio 选择Maven Central作为默认仓库。如果你使用老版本的Android Studio创建一个新项目，mavenCentral()会自动的定义在build.gradle中。</p>
<p>但是Maven Central的最大问题是对开发者不够友好。上传library异常困难。上传上去的开发者都是某种程度的极客。同时还因为诸如安全方面的其他原因，Android Studio团队决定把默认的仓库替换成jcenter。正如你看到的，一旦使用最新版本的Android Studio创建一个项目，jcenter()自动被定义，而不是mavenCentral()。</p>
<p>有许多将Maven Central替换成jcenter的理由，下面是几个主要的原因。</p>
<ul>
<li><p>jcenter通过CDN发送library，开发者可以享受到更快的下载体验。</p>
</li>
<li><p>jcenter是全世界最大的Java仓库，因此在Maven Central 上有的，在jcenter上也极有可能有。换句话说jcenter是Maven Central的超集。</p>
</li>
<li><p>上传library到仓库很简单，不需要像在 Maven Central上做很多复杂的事情。</p>
</li>
<li><p>友好的用户界面</p>
</li>
<li><p>如果你想把library上传到 Maven Central ，你可以在bintray网站上直接点击一个按钮就能实现。</p>
</li>
</ul>
<p>基于上面的原因以及我自己的经验，可以说替换到jcenter是明智之举。</p>
<p>所以我们这篇文章将把重心放在jcenter，反正如果你能成功把library放在jcenter，转到 Maven Central 是非常容易的事情。</p>
<h2 id="gradle是如何从仓库上获取一个library的？">gradle是如何从仓库上获取一个library的？</h2><p>在讨论如何上传library到jcenter之前，我们先看看gradle是如何从仓库获取library的。比如我们在 build.gradle输入如下代码的时候，这些库是如果奇迹般下载到我们的项目中的。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></span><br></pre></td></tr></table></figure></p>
<p>一般来说，我们需要知道library的字符串形式，包含3部分<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">GROUP_ID</span><span class="symbol">:ARTIFACT_ID</span><span class="symbol">:VERSION</span></span><br></pre></td></tr></table></figure></p>
<p>上面的例子中，GROUP_ID是com.inthecheesefactory.thecheeselibrary ，ARTIFACT_ID是fb-like，VERSION是0.9.3。</p>
<p>GROUP_ID定义了library的group。有可能在同样的上下文中存在多个不同功能的library。如果library具有相同的group，那么它们将共享一个GROUP_ID。通常我们以开发者包名紧跟着library的group名称来命名，比如com.squareup.picasso。然后ARTIFACT_ID中是library的真实名称。至于VERSION，就是版本号而已，虽然可以是任意文字，但是我建议设置为x.y.z的形式，如果喜欢还可以加上beta这样的后缀。</p>
<p>下面是Square library的一个例子。你可以看到每个都可以很容易的分辨出library和开发者的名称。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="keyword">compile</span> <span class="string">'com.squareup:otto:1.3.7'</span></span><br><span class="line">  <span class="keyword">compile</span> <span class="string">'com.squareup.picasso:picasso:2.5.2'</span></span><br><span class="line">  <span class="keyword">compile</span> <span class="string">'com.squareup.okhttp:okhttp:2.4.0'</span></span><br><span class="line">  <span class="keyword">compile</span> <span class="string">'com.squareup.retrofit:retrofit:1.9.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么在添加了上面的依赖之后会发生什么呢？简单。Gradle会询问Maven仓库服务器这个library是否存在，如果是，gradle会获得请求library的路径，一般这个路径都是这样的形式：GROUP_ID/ARTIFACT_ID/VERSION_ID。比如可以在<a href="http://jcenter.bintray.com/com/squareup/otto/1.3.7" target="_blank" rel="external">http://jcenter.bintray.com/com/squareup/otto/1.3.7</a> 和  <a href="https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/" target="_blank" rel="external">https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/</a></p>
<p>下获得com.squareup:otto:1.3.7的library文件。</p>
<p>然后Android Studio 将下载这些文件到我们的电脑上，与我们的项目一起编译。整个过程就是这么简单，一点都不复杂。</p>
<p>我相信你应该清楚的知道从仓库上下载的library只是存储在仓库服务器上的jar 或者aar文件而已。有点类似于自己去下载这些文件，拷贝然后和项目一起编译。但是使用gradle依赖管理的最大好处是你除了添加几行文字之外啥也不做。library一下子就可以在项目中使用了。</p>
<h2 id="了解aar文件">了解aar文件</h2><p>等等，我刚才说了仓库中存储的有两种类型的library：jar 和 aar。jar文件大家都知道，但是什么是aar文件呢？</p>
<p>aar文件时在jar文件之上开发的。之所以有它是因为有些Android Library需要植入一些安卓特有的文件，比如AndroidManifest.xml，资源文件，Assets或者JNI。这些都不是jar文件的标准。</p>
<p>因此aar文件就时发明出来包含所有这些东西的。总的来说它和jar一样只是普通的zip文件，不过具有不同的文件结构。jar文件以classes.jar的名字被嵌入到aar文件中。其余的文件罗列如下：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> /<span class="constant">AndroidManifest</span>.xml (mandatory)</span><br><span class="line"></span>-<span class="ruby"> /classes.jar (mandatory)</span><br><span class="line"></span>-<span class="ruby"> /res/ (mandatory)</span><br><span class="line"></span>-<span class="ruby"> /<span class="constant">R</span>.txt (mandatory)</span><br><span class="line"></span>-<span class="ruby"> /assets/ (optional)</span><br><span class="line"></span>-<span class="ruby"> /libs/*.jar (optional)</span><br><span class="line"></span>-<span class="ruby"> /jni/&lt;abi&gt;<span class="regexp">/*.so (optional)</span><br><span class="line"></span></span>-<span class="ruby"> /proguard.txt (optional)</span><br><span class="line"></span>-<span class="ruby"> /lint.jar (optional)</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到.aar文件是专门为安卓设计的。因此这篇文章将教你如何创建与上传一个aar形式的library。</p>
<h2 id="如何上传library到jcenter">如何上传library到jcenter</h2><p>我相信你已经知道了仓库系统的大体工作原理。现在我们来开始最重要的部分：上传。这个任务和如何上传library文件到<a href="http://jcenter.bintray.com/" target="_blank" rel="external">http://jcenter.bintray.com</a>一样简单。如果做到，这个library就算发布了。好吧，有两个需要考虑：如何创建aar文件以及如何上传构建的文件到仓库。</p>
<p>虽然需要若干步骤，但是我还是想强调这事并不复杂，因为已经准备好了所有事情。整个过程如下图：</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150619/1434678347320974.png" alt="blob.png" title="1434678347320974.png"></p>
<p>因为细节比较多，我分为7部分，一步一步的详细解释清楚。</p>
<h2 id="第一部分：在bintray上创建package">第一部分：在bintray上创建package</h2><p>首先，你需要在bintray上创建一个package。为此，你需要一个bintray账号，并在网站上创建一个package。</p>
<p>第一步：在<a href="https://bintray.com/" target="_blank" rel="external">bintray.com</a>上注册一个账号。（注册过程很简单，自己完成）</p>
<p>第二步：完成注册之后，登录网站，然后点击maven。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150619/1434678368900440.png" alt="blob.png" title="1434678368900440.png"></p>
<p>第三步：点击Add New Package，为我们的library创建一个新的package。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150619/1434707028338100.png" alt="maven2"></p>
<p>第四步：输入所有需要的信息</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150619/1434707031430619.png" alt="maven3"></p>
<p>虽然如何命名包名没有什么限定，但是也有一定规范。所有字母应该为小写，单词之间用－分割，比如，fb-like。</p>
<p>当每项都填完之后，点击Create Package。</p>
<p>第五步：网页将引导你到 Package编辑页面。点击 Edit Package文字下的Package名字，进入Package详情界面。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150619/1434707035128807.png" alt="maven4"></p>
<p>完工！现在你有了自己在Bintray上的Maven仓库，可以准备上传library到上面了。 </p>
<p><img src="http://www.jcodecraeer.com/uploads/20150619/1434707039327170.png" alt="maven5"></p>
<p>Bintray账户的注册就完成了。下一步是Sonatype，Maven Central 的提供者。</p>
<h2 id="第二部分：为Maven_Central创建个Sonatype帐号">第二部分：为Maven Central创建个Sonatype帐号</h2><p>注：如果你不打算把library上传到Maven Central，可以跳过第二和第三部分。不过我建议你不要跳过，因为仍然有许多开发者在使用这个仓库。</p>
<p>和jcenter一样，如果你想通过Maven Central,贡献自己的library，你需要在提供者的网站Sonatype上注册一个帐号。</p>
<p>你需要知道的就是这个帐号，你需要在Sonatype网站上创建一个IRA Issue Tracker 帐号。请到<a href="https://issues.sonatype.org/secure/Dashboard.jspa" target="_blank" rel="external">Sonatype Dashboard</a> 注册这个帐号。</p>
<p>完成之后。你需要请求得到贡献library到Maven Central的权限。不过这个过程对我来说有点无厘头，因为你需要做的就是在JIRA中创建一个issue，让它们允许你上传匹配Maven Central提供的GROUP_ID的library。</p>
<p>要创建上述所讲到的issue，访问<a href="https://issues.sonatype.org/secure/Dashboard.jspa" target="_blank" rel="external">Sonatype Dashboard</a>，用创建的帐号登录。然后点击顶部菜单的Create。</p>
<p>填写如下信息：</p>
<p>Project: Community Support - Open Source Project Repository Hosting</p>
<p>Issue Type: New Project</p>
<p>Summary: 你的 library名称的概要，比如The Cheese Library。</p>
<p>Group Id: 输入根GROUP_ID，比如，com.inthecheeselibrary 。一旦批准之后，每个以com.inthecheeselibrary开始的library都允许被上传到仓库，比如com.inthecheeselibrary.somelib。</p>
<p>Project URL: 输入任意一个你想贡献的library的URL，比如， <a href="https://github.com/nuuneoi/FBLikeAndroid" target="_blank" rel="external">https://github.com/nuuneoi/FBLikeAndroid</a>。</p>
<p>SCM URL: 版本控制的URL，比如 <a href="https://github.com/nuuneoi/FBLikeAndroid.git" target="_blank" rel="external">https://github.com/nuuneoi/FBLikeAndroid.git</a>。</p>
<p>其余的不用管，然后点击Create。现在是最难的部分…耐心等待…平均大概1周左右，你会获准把自己的library分享到 Maven Central。</p>
<p>最后一件事是在<a href="https://bintray.com/profile/edit" target="_blank" rel="external">Bintray Profile</a>的帐户选项中填写自己的Sonatype OSS用户名。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150621/1434820514748752.png" alt="sonatypeusername"></p>
<p>点击Update，完成。</p>
<h2 id="第三部分：启用bintray里的自动注册">第三部分：启用bintray里的自动注册</h2><p>就如我上面提到的，我们可以通过jcenter上传library到Maven Central ，不过我们需要先注册这个library。bintray提供了通过用户界面让library一旦上传后自动注册的机制。</p>
<p>第一步是使用下面的命令行产生一个key。（如果你用的是windows，请在<a href="https://www.cygwin.com/" target="_blank" rel="external">cygwin</a>下做这件事情）<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg <span class="comment">--gen-key</span></span><br></pre></td></tr></table></figure></p>
<p>有几个必填项。部分可以采用默认值，但是某些项需要你自己输入恰当的内容，比如，你的真实名字，密码 等等。</p>
<p>创建了key之后，调用如下的命令查看被创建key的信息。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --<span class="keyword">list</span>-<span class="built_in">keys</span></span><br></pre></td></tr></table></figure></p>
<p>如果没没问题的话，可以看到下面的信息：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pub   2048R/01ABCDEF <span class="number">2015-03-07</span></span><br><span class="line">uid   Sittiphol Phanvilai &lt;yourmail@email.com&gt;</span><br><span class="line">sub   2048R/<span class="number">98765432 201</span>5-03-07</span><br></pre></td></tr></table></figure></p>
<p>现在你需要把key上传到keyserver让它发挥作用。为此，请调用如下的命令并且将其中的PUBLIC_KEY_ID替换成上面pub一行中2048R/ 后面的 8位16进制值，譬如本例是01ABCDEF。<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">gpg</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">keyserver</span> <span class="comment">hkp://pool</span><span class="string">.</span><span class="comment">sks</span><span class="literal">-</span><span class="comment">keyservers</span><span class="string">.</span><span class="comment">net</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">send</span><span class="literal">-</span><span class="comment">keys</span> <span class="comment">PUBLIC_KEY_ID</span></span><br></pre></td></tr></table></figure></p>
<p>然后，使用如下的命令以ASCII形式导出公共和私有的key，请将yourmail@email.com替换成你前面用于创建key的email。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg -<span class="tag">a</span> --export yourmail@email<span class="class">.com</span> &gt; public_key_sender<span class="class">.asc</span></span><br><span class="line">gpg -<span class="tag">a</span> --export-secret-key yourmail@email<span class="class">.com</span> &gt; private_key_sender.asc</span><br></pre></td></tr></table></figure></p>
<p>打开Bintray的<a href="https://bintray.com/profile/edit" target="_blank" rel="external">Edit Profile</a>页面点击GPG 注册。分别在Public Key和 Private Key中填入上一步导出的public_key_sender.asc和 private_key_sender.asc文件中的内容。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1434992443352430.png" alt="1434992443352430.png" title="1434992443352430.png"></p>
<p>点击Update保存这些key。</p>
<p>最后一步就是启用自动注册。到<a href="https://bintray.com/" target="_blank" rel="external">Bintray</a>的主页点击maven。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1434992792183444.png" alt="blob.png" title="1434992792183444.png"></p>
<p>点击编辑</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1434992817106843.png" alt="blob.png" title="1434992817106843.png"></p>
<p>勾选中GPG Sign uploaed files automatically以启用自动注册。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1434992984179141.png" alt="blob.png" title="1434992984179141.png"></p>
<p>点击Update保存这些步骤。完成。现在只需点击一下，每个上传到我们Maven仓库的东西都会自动注册并做好转向Maven Central 。</p>
<p>请注意这是一次性的操作，以后创建的每一个library都要应用此操作。</p>
<p>Bintray和Maven Central 已经准备好了。现在转到Android Studio部分。</p>
<h2 id="第四部分：准备一个Android_Studio项目">第四部分：准备一个Android Studio项目</h2><p>很多情况下，我们需要同时上传一个以上的library到仓库，也可能不需要上传东西。因此我建议最好将每部分分成一个Module。最好分成两个module，一个Application Module一个Library Module。Application Module用于展示库的用法，Library Module是library的源代码。如果你的项目有一个以上的library，尽管创建另外的module：1个 module对应1 个library。  </p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435029593473349.png" alt="blob.png" title="1435029593473349.png"></p>
<p>我相信大家知道如何创建一个新的module，因此就不会深入讲解这个问题了。其实很简单，基本就是选择creating an Android Library module ，然后就完了。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435029727305525.png" alt="blob.png" title="1435029727305525.png"></p>
<p>下一步是把bintray插件应用在项目中。我们需要修改项目的build.gradle文件中的依赖部分，如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.2.3'</span></span><br><span class="line">    <span class="keyword">classpath</span> <span class="string">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'</span></span><br><span class="line">    <span class="keyword">classpath</span> <span class="string">'com.github.dcendents:android-maven-plugin:1.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><span style="color: rgb(255, 0, 0);">有一点非常重要，那就是gradle build tools的版本设置成1.1.2以上，因为以前的版本有严重的bug，我们将使用的是最新的版本1.2.3</span>。</p>
<p>接下来我们将修改local.properties。在里面定义api key的用户名以及被创建key的密码，用于bintray的认证。之所以要把这些东西放在这个文件是因为这些信息时比较敏感的，不应该到处分享，包括版本控制里面。幸运的是在创建项目的时候local.properties文件就已经被添加到.gitignore了。因此这些敏感数据不会被误传到git服务器。</p>
<p>下面是要添加的三行代码：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bintray.<span class="variable">user=</span>YOUR_BINTRAY_USERNAME</span><br><span class="line">bintray.<span class="variable">apikey=</span>YOUR_BINTRAY_API_KEY</span><br><span class="line">bintray.gpg.<span class="variable">password=</span>YOUR_GPG_PASSWORD</span><br></pre></td></tr></table></figure></p>
<p>bintray username 放在第一行， API Key放在第二行， API Key可以在<a href="https://bintray.com/profile/edit" target="_blank" rel="external">Edit Profile</a>页面的API Key 选项卡中找到。</p>
<p>最后一行是创建 GPG key的密码。保存并关闭这个文件。</p>
<p>最后要修改的是module的build.gradle文件。注意前面修改的是项目的build.gradle文件。打开它，在apply plugin: ‘com.android.library’之后添加这几行，如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="symbol">'com</span>.android.library'</span><br><span class="line">  </span><br><span class="line">ext &#123;</span><br><span class="line">    bintrayRepo = <span class="symbol">'mave</span>n'</span><br><span class="line">    bintrayName = <span class="symbol">'fb</span>-like'</span><br><span class="line">  </span><br><span class="line">    publishedGroupId = <span class="symbol">'com</span>.inthecheesefactory.thecheeselibrary'</span><br><span class="line">    libraryName = <span class="symbol">'FBLik</span>e'</span><br><span class="line">    artifact = <span class="symbol">'fb</span>-like'</span><br><span class="line">  </span><br><span class="line">    libraryDescription = <span class="symbol">'A</span> wrapper <span class="keyword">for</span> <span class="type">Facebook</span> <span class="type">Native</span> <span class="type">Like</span> <span class="type">Button</span> (<span class="type">LikeView</span>) on <span class="type">Android</span>'</span><br><span class="line">  </span><br><span class="line">    siteUrl = <span class="symbol">'https</span>:<span class="comment">//github.com/nuuneoi/FBLikeAndroid'</span></span><br><span class="line">    gitUrl = <span class="symbol">'https</span>:<span class="comment">//github.com/nuuneoi/FBLikeAndroid.git'</span></span><br><span class="line">  </span><br><span class="line">    libraryVersion = <span class="symbol">'0</span>.9.3'</span><br><span class="line">  </span><br><span class="line">    developerId = <span class="symbol">'nuuneo</span>i'</span><br><span class="line">    developerName = <span class="symbol">'Sittiphol</span> <span class="type">Phanvilai</span>'</span><br><span class="line">    developerEmail = <span class="symbol">'sittiphol</span><span class="annotation">@gmail</span>.com'</span><br><span class="line">  </span><br><span class="line">    licenseName = <span class="symbol">'The</span> <span class="type">Apache</span> <span class="type">Software</span> <span class="type">License</span>, <span class="type">Version</span> <span class="number">2.0</span>'</span><br><span class="line">    licenseUrl = <span class="symbol">'http</span>:<span class="comment">//www.apache.org/licenses/LICENSE-2.0.txt'</span></span><br><span class="line">    allLicenses = [<span class="string">"Apache-2.0"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>bintrayRepo使用默认的，即maven。bintrayName修改成你上面创建的 package name。其余的项也修改成和你library信息相匹配的值。有了上面的脚本，每个人都能通过下面的一行gradle脚本使用这个library。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></span><br></pre></td></tr></table></figure></p>
<p>最后在文件的后面追加两行如下的代码来应用两个脚本，用于构建library文件和上传文件到bintray（为了方便，我直接使用了github上连接到相关文件的链接）：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="keyword">from</span>: <span class="string">'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'</span></span><br><span class="line">apply <span class="keyword">from</span>: <span class="string">'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'</span></span><br></pre></td></tr></table></figure></p>
<p>完成！你的项目现在设置好了，准备上传到bintray吧！</p>
<h2 id="第五部分：把library上传到你的bintray空间">第五部分：把library上传到你的bintray空间</h2><p>现在是上传library到你自己的bintray仓库上的时候了。请到Android Studio的终端（Terminal）选项卡。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435031390224841.png" alt="terminal" title="terminal"></p>
<p>第一步是检查代码的正确性，以及编译library文件（aar，pom等等），输入下面的命令：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradlew <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p>
<p>如果没有什么问题，会显示：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BUILD </span>SUCCESSFUL</span><br></pre></td></tr></table></figure></p>
<p>现在我们已经成功一半了。下一步是上传编译的文件到bintray，使用如下的命令：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">gradlew</span> bintrayUpload</span><br></pre></td></tr></table></figure></p>
<p>如果显示如下你就大喊一声eureka吧！<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUCCESSFUL</span><br></pre></td></tr></table></figure></p>
<p>在bintray的网页上检查一下你的package。你会发现在版本区域的变化。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435032943140911.png" alt="blob.png" title="1435032943140911.png"></p>
<p>点击进去，进入Files选项卡，你会看见那里有我们所上传的library文件。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435033005347653.png" alt="blob.png" title="1435033005347653.png"></p>
<p>恭喜，你的library终于放在了互联网上，任何人都可以使用了！</p>
<p>不过也别高兴过头，library现在仍然只是在你自己的Maven仓库，而不是在jcenter上。如果有人想使用你的library，他必须定义仓库的url，如下：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">repositories</span> &#123;</span><br><span class="line">    <span class="title">maven</span> &#123;</span><br><span class="line">        <span class="title">url</span> <span class="string">'https://dl.bintray.com/nuuneoi/maven/'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="title">compile</span> <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>译者注：前面都没怎么看懂，看到上面的代码之后一下子全懂了，呵呵。</p>
<p>你可以在bintray的web界面找到自己Maven仓库的url，或者直接吧nuuneoi替换成你的bintray用户名（因为前面部分其实都是一样的）。我还建议你直接访问那个链接，看看里面到底是什么。</p>
<p>但是，就如我们前面所讲的那样，让开发者去定义url这种复杂的事情并不是分享library的最佳方式。想象一下，使用10个library不得添加10个url？所以为了更好的体验，我们把library从自己的仓库传到jcenter上。</p>
<h2 id="第六部分：同步bintray用户仓库到jcenter">第六部分：同步bintray用户仓库到jcenter</h2><p>把library同步到jcenter非常容易。只需访问网页并点击Add to JCenter</p>
<p><span style="box-sizing: border-box; font-weight: 700; color: rgb(64, 64, 64); font-family: Lora, 'Times New Roman', serif; font-size: 20px; line-height: 30px; background-color: rgb(255, 255, 255);"><br></span></p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435033973124955.png" alt="blob.png" title="1435033973124955.png"></p>
<p>什么也不做直接点击Send。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435033989118978.png" alt="blob.png" title="1435033989118978.png"></p>
<p>现在我们所能做的就是等待bintray团队审核我们的请求，大概2-3个小时。一旦同步的请求审核通过，你会收到一封确认此更改的邮件。现在我们去网页上确认，你会在 Linked To 部分看到一些变化。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435034011137594.png" alt="blob.png" title="1435034011137594.png"></p>
<p>从此之后，任何开发者都可以使用jcenter() repository 外加一行gradle脚本来使用我们的library了<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></span><br></pre></td></tr></table></figure></p>
<p>想检查一下自己的library在jcenter上是否存在？你可以直接访问<a href="http://jcenter.bintray.com/" target="_blank" rel="external">http://jcenter.bintray.com</a>，然后进入和你library的group id 以及artifact id匹配的目录。在本例中就是com -&gt; inthecheesefactory -&gt; thecheeselibrary -&gt; fb-like -&gt; 0.9.3。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435034049131913.png" alt="blob.png" title="1435034049131913.png"></p>
<p>请注意链接到jcenter是一个只需做一次的操作。如果你对你的package做了任何修改，比如上传了一个新版本的binary，删除了旧版本的binary等等，这些改变也会影响到jcenter。不过毕竟你自己的仓库和jcenter在不同的地方，所以需要等待2－3分钟让jcenter同步这些修改。</p>
<p>同时注意，如果你决定删除整个package，放在jcenter仓库上的library不会被删除。它们会像僵尸一样的存在，没有人再能删除它了。因此我建议，如果你想删除整个package，请在移除package之前先在网页上删除每一个版本。</p>
<h2 id="第七部分：上传library到Maven_Central">第七部分：上传library到Maven Central</h2><p>并不是每个安卓开发者都使用jcenter。仍然有部分开发者还在使用mavenCentral() ，因此让我们也把library上传到Maven Central 吧。</p>
<p>要从jcenter到Maven Central，首先需要完成两个任务：</p>
<p>1) Bintray package 已经连接到jcenter。</p>
<p>2) Maven Central上的仓库已经认证通过</p>
<p>如果你已经通过了这些授权，上传library package到Maven Central就异常简单了，只需在package的详情页面点击Maven Central 的链接。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435034730371235.png" alt="syncmavencentral"></p>
<p>输入你的Sonatype用户名和密码并点击Sync。  </p>
<p><img src="http://www.jcodecraeer.com/uploads/20150623/1435034732252381.png" alt="syncmavencentral2"></p>
<p>如果成功，在Last Sync Status中会显示Successfully synced and closed repo（见图），但是如果遇到任何问题，则会在Last Sync Errors显示出来。你需要根据情况修复问题，能上传到Maven Central 的library的条件是相当严格的，比如+ 号是不能在ibrary版本的依赖定义中使用的。</p>
<p>完成之后，你可以在  <a href="https://oss.sonatype.org/content/repositories/releases/" target="_blank" rel="external">Maven Central Repository</a> 上找到你的library。在那些匹配你ibrary的group id以及artifact id的目录中。比如本例中就是com -&gt; inthecheesefactory -&gt; thecheeselibrary -&gt; fb-like -&gt; 0.9.3。</p>
<p>恭喜！虽然需要许多步骤，但是每一步都很简单。而且大部分操作都是一劳永逸的。</p>
<p>如此长篇的文章！希望对你有所帮助。我的英语也许有点晦涩，不过希望至少内容是可以理解的。</p>
<p>期待能在上面看到你的library大作！</p>
<blockquote>
<p>英文原文：<a href="http://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en" target="_blank" rel="external">How to distribute your own Android library through jCenter and Maven Central from Android Studio</a><br>译文原文：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html" target="_blank" rel="external">如何使用Android Studio把自己的Android library分享到jCenter和Maven Central</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你想在Android Studio中引入一个library到你的项目，你只需添加如下的一行代码到模块的build.gradle文件中。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>就是如此简单的一行代码，你就可以使用这个library了。</p>
<p>酷呆了。不过你可能很好奇Android Studio是从哪里得到这个library的。这篇文章将详细讲解这是怎么回事，包括如何把你的库发布出去分享给世界各地的其他开发者，这样不仅可以让世界更美好，还可以耍一次酷。<br>]]>
    
    </summary>
    
      <category term="AndroidStudio" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/AndroidStudio/"/>
    
      <category term="AndroidIDE" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/AndroidIDE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[探索新的Android Material Design支持库]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/24/exploring-the-new-android-design-support-library/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/24/exploring-the-new-android-design-support-library/</id>
    <published>2015-06-23T16:00:00.000Z</published>
    <updated>2015-07-11T15:58:38.000Z</updated>
    <content type="html"><![CDATA[<p>Android Material Design支持库提供了一些新组件，我们在这里简要的介绍一下这些组件，以及如何使用这些组件。</p>
<p>我是Material Design的粉丝，它使应用程序更具有一致性和整体性,而且看起来更美观，更容易使用。<br>Google I / O大会2015年引进一些很棒的新Android特性，包括新的Material Design支持库。<br>Material Design的介绍： <a href="http://www.google.com/design/spec/material-design/introduction.html#" target="_blank" rel="external">Material Design Guidelines</a> (译注：请自备梯子)<br>让我们一起来看看这些我们现在能用的新组件。<br><a id="more"></a></p>
<h2 id="Snackbar">Snackbar</h2><video loop video="" autoplay class="graf-image" data-image-id="1*xwgvwuq2GD426XDp_zeZBw.gif" data-width="388" data-height="690"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*xwgvwuq2GD426XDp_zeZBw.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*xwgvwuq2GD426XDp_zeZBw.mp4" type="video/mp4"></video>

<p>Snackbar是带有动画效果的快速提示条，它只会出现在屏幕底部。<br>它基本上继承了Toast的方法和属性，但与Toast不同的是，Snackbar上可以带有按钮，<br>当Snackbar出现时，用户可以点击按钮做相应的处理；<br>Snackbar支持滑动消失，类似通知栏的消息；<br>如果用户没做任何操作，Snackbar在到达设定的时间后也会自动消失。<br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*O3WtW1Xi7SpMS2tk9ihzHQ.png" alt=""></p>
<p>对开发者来说，我们只要简单的几行代码就可以实现Snackbar<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Snackbar.make(mDrawerLayout, <span class="string">"Your message"</span>, Snackbar.LENGTH_SHORT)</span><br><span class="line">    .setAction(getString(R.string.text_undo), <span class="keyword">this</span>)</span><br><span class="line">    .show();</span><br></pre></td></tr></table></figure></p>
<p><em>注意:</em> 不能同时显示多个Snackbar</p>
<h2 id="Floating_Action_Button">Floating Action Button</h2><p><a href="http://www.google.co.uk/design/spec/components/buttons-floating-action-button.html" target="_blank" rel="external">Floating Action Button</a> (FAB)是一个悬浮按钮, 它主要用于一些重要的操作，比如在列表界面上新增按钮。<br>现在我们可以在程序里很容易实现Floating Action Button，不再需要其他三方库的支持。</p>
<p>这个按钮我们使用时一般用以下2中尺寸:<br><strong>Normal</strong> (56dp) — 大部分情况下使用<br><strong>Mini</strong> (40dp) — 只有在与屏幕上其他组件保持一致性的时候使用</p>
<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*htO3x82bq7HWSZab-70v4A.png" alt=""><br>Normal (left) 和 Mini (right) FAB 按钮</p>
<p>FAB按钮默认会使用主题中定义的背景色，但我们也可以很容易的修改背景色，以下是一些我们一般会修改的属性：</p>
<ul>
<li>fabSize - 设定FAB的大小 (‘normal’ or ‘mini’)</li>
<li>backgroundTint - 设置边框大小</li>
<li>rippleColor - 设定按下时的颜色</li>
<li>src - 设定在FAB中显示的图标</li>
<li>layout_anchor - 设置显示坐标的锚点</li>
<li>layout_anchorGravity - 设置锚点的对齐方式</li>
</ul>
<p>我们只要简单加入以下代码，就可以实现FAB:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.FloatingActionButton</span></span><br><span class="line">     <span class="attribute">android:id</span>=<span class="value">”@+id</span>/<span class="attribute">fab_normal</span>”</span><br><span class="line">     <span class="attribute">android:layout_width</span>=<span class="value">”wrap_content”</span></span><br><span class="line">     <span class="attribute">android:layout_height</span>=<span class="value">”wrap_content”</span></span><br><span class="line">     <span class="attribute">android:src</span>=<span class="value">”@drawable</span>/<span class="attribute">ic_plus</span>”</span><br><span class="line">     <span class="attribute">app:fabSize</span>=<span class="value">”normal”</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="EditText_Floating_Labels">EditText Floating Labels</h2><p>TextInputLayout主要用于包含EditText，会默认生成一个浮动的Label, 当我们选择EditText时, EditText中设置的hint会上浮到EditText的左上角.<br>这对提交用户数据很有用。</p>
<video loop video="" autoplay class="graf-image" data-image-id="1*cHpl5ROayZZjEh_7ZExEPw.gif" data-width="388" data-height="175"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*cHpl5ROayZZjEh_7ZExEPw.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*cHpl5ROayZZjEh_7ZExEPw.mp4" type="video/mp4">Your browser does not support the video tag.</video>

<p>实现很简单，只要包含EditText就可以了:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.TextInputLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/edit_text_email"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:inputType</span>=<span class="value">"textEmailAddress"</span></span><br><span class="line">        <span class="attribute">android:hint</span>=<span class="value">"@string/hint_email"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.TextInputLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>它同时支持显示错误信息, 我们主要加入如下代码即可:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setErrorEnabled(<span class="keyword">true</span>);</span><br><span class="line">setError(getString(R.string.text_error_message));</span><br></pre></td></tr></table></figure></p>
<video loop video="" autoplay class="graf-image" data-image-id="1*qnatfYsUcN_4s5ar1KZAnA.gif" data-width="388" data-height="199"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*qnatfYsUcN_4s5ar1KZAnA.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*qnatfYsUcN_4s5ar1KZAnA.mp4" type="video/mp4">Your browser does not support the video tag.</video>

<p><em>注意:</em> 设置错误信息需要在setErrorEnabled标志之后，这样可以保证在错误出现时layout大小不发生变化</p>
<h2 id="Navigation_View">Navigation View</h2><p>Navigation Drawer在现在的APP中很常见, 以前实现一直不怎么容易，<br>现在提供的NavigationView组件可以直接放在DrawerLayout中，<br>通过设置menu resource就能显示菜单项了。</p>
<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*AsV0mMvJ21ni3aoSQqQ5LA.png" alt=""><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v4.widget.DrawerLayout</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/drawer_layout"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:fitsSystemWindows</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">FrameLayout</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/main_content_frame"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.NavigationView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/navigation_view"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"start"</span></span><br><span class="line">        <span class="attribute">app:headerLayout</span>=<span class="value">"@layout/navigation_header"</span></span><br><span class="line">        <span class="attribute">app:menu</span>=<span class="value">"@menu/drawer"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这个View有两个主要属性:</p>
<h3 id="Header_Layout">Header Layout</h3><p>headerLayout是一个可选得属性，通过设置它我们可以在导航栏上面增加一个Header,通用的做法我们在上面显示用户信息。</p>
<h3 id="Menu">Menu</h3><p>menu属性用来定义需要引用的menu resource。</p>
<p><img src="https://d262ilb51hltx0.cloudfront.net/max/2000/1*mBoN5QvKq6mZE5tLNo0Khg.png" alt=""><br>如下所示, NavigationView menus我们一般有两张用法，第一种是使用标准的单选模式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">menu</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span>    </span><br><span class="line">    <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">group</span> <span class="attribute">android:checkableBehavior</span>=<span class="value">"single"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">item</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/navigation_item_1"</span></span><br><span class="line">            <span class="attribute">android:checked</span>=<span class="value">"true"</span></span><br><span class="line">            <span class="attribute">android:icon</span>=<span class="value">"@drawable/ic_android"</span></span><br><span class="line">            <span class="attribute">android:title</span>=<span class="value">"@string/navigation_item_1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">item</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/navigation_item_2"</span></span><br><span class="line">            <span class="attribute">android:icon</span>=<span class="value">"@drawable/ic_android"</span></span><br><span class="line">            <span class="attribute">android:title</span>=<span class="value">"@string/navigation_item_2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样菜单项只是简单的罗列，所有的菜单项都属于同一个分组。</p>
<p>第二种用法也是相似的，不过我们可以进行分组，给每一个分组定义标题，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">menu</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span>                       </span><br><span class="line">    <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">group</span> <span class="attribute">android:checkableBehavior</span>=<span class="value">"single"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">item</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/navigation_subheader"</span></span><br><span class="line">            <span class="attribute">android:title</span>=<span class="value">"@string/nav_header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">menu</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Menu items go here --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">menu</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样我们就可以把我们的菜单项进行分组，这还是很有用得，我们可以按功能把菜单项进行分组。</p>
<p>还有一些重要属性的属性我们可以设置，如下:</p>
<ul>
<li>itemBackground — 设置菜单项的背景</li>
<li>itemIconTint — 设置菜单项的图标</li>
<li>itemTextColor — 这只菜单项目的文本颜色</li>
</ul>
<p>我们可以通过实现OnNavigationItemSelectedListener方法，处理菜单项的点击事件。</p>
<p><em>注意</em>: For API21+, the NavigationView automatically takes care of scrim protection for the status bar.</p>
<h2 id="TabLayout">TabLayout</h2><p>TabLayout可以很容易地在APP中添加Tab分组功能</p>
<p>我们有好几种方式来使用它:</p>
<ul>
<li><p>固定Tabs，根据View的宽度适配<br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*pmTCUt3WtAEXWh0vUX1Tsw.png" alt=""></p>
</li>
<li><p>固定Tabs, 在View中居中显示<br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*xGCDe6ARHeHk2v9pnXS_bA.png" alt=""></p>
</li>
<li><p>可滑动的Tabs</p>
<video loop video="" autoplay class="graf-image" data-image-id="1*CiuC-A6TxcOJvn_hMVr0jA.gif" data-width="388" data-height="57"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*CiuC-A6TxcOJvn_hMVr0jA.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*CiuC-A6TxcOJvn_hMVr0jA.mp4" type="video/mp4"></video>

</li>
</ul>
<p>要实现上述效果，首先我们需要加入TabLayout:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.TabLayout</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/sliding_tabs"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">app:tabMode</span>=<span class="value">"fixed"</span></span><br><span class="line">    <span class="attribute">app:tabGravity</span>=<span class="value">"fill"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后, 我们可以通过以下这些属性调整TabLayout的外观:</p>
<ul>
<li>tabMode - TabLayoutd模式，可以选择 <strong>fixed</strong> 或 <strong>scrollable</strong></li>
<li>tabGravity - Tab的对齐方式, 可以选择 <strong>fill</strong> 或 <strong>centre</strong></li>
<li>setText() - 设置Tab上的文字</li>
<li>setIcon() - 设置Tab上的图标</li>
</ul>
<p>我们还可以给TabLayout设置一些Listener:</p>
<ul>
<li>OnTabSelectedListener - Tab被选中时，触发的Listener</li>
<li>TabLayoutOnPageChangeListener</li>
<li>ViewPagerOnTabSelectedListener</li>
</ul>
<p>我们添加好TabLayout后, 我们只需要通过setupWithViewPager方法加入viewpager:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ViewPager pager = (ViewPager)rootView.findViewById(R.id.viewPager);</span><br><span class="line">pager.setAdapter(<span class="keyword">new</span> MyPagerAdapter(getActivity().getSupportFragmentManager()));</span><br><span class="line"></span><br><span class="line">TabLayout tabLayout = (TabLayout) rootView.findViewById(R.id.sliding_tabs);</span><br><span class="line">tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"Tab One"</span>));</span><br><span class="line">tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"Tab Two"</span>));</span><br><span class="line">tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"Tab Three"</span>));</span><br><span class="line">tabLayout.setupWithViewPager(pager);</span><br></pre></td></tr></table></figure></p>
<h2 id="Coordinator_Layout">Coordinator Layout</h2><p>CoordinatorLayout是组织它的子views之间协作的一个Layout，它可以给子View切换提供动画效果。<br>要使用这个组件，请升级其他support library中的组件到最新版本，比如我需要把RecyclerView升级到22.2.0。</p>
<ul>
<li><strong>Floating Action Button</strong></li>
</ul>
<p>我们刚才已经知道Snackbar可以显示在其他UI组件的上面，不过我们可以让FloatingActionButton不被Snackbar覆盖，<br>当Snackbar出现时，FAB上移，Snackbar消失时，FAB下移。</p>
<video loop video="" autoplay class="graf-image" data-image-id="1*aquWj6YbdiBpURPkmor_ww.gif" data-width="388" data-height="144"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*aquWj6YbdiBpURPkmor_ww.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*aquWj6YbdiBpURPkmor_ww.mp4" type="video/mp4">Your browser does not support the video tag.</video>

<p>要实现如上的效果，FloatingActionBar必须包含在CoordinatorLayout中，<br>接着我们需要设置<strong>layout_anchor</strong> 和 <strong>layout_anchorGravity</strong>属性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.CoordinatorLayout</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/main_content"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Your other views --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.FloatingActionButton</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">”@+id</span>/<span class="attribute">fab_normal</span>”</span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">”wrap_content”</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">”wrap_content”</span></span><br><span class="line">        <span class="attribute">android:src</span>=<span class="value">”@drawable</span>/<span class="attribute">ic_plus</span>”</span><br><span class="line">        <span class="attribute">app:layout_anchor</span>=<span class="value">"@id/main_content"</span></span><br><span class="line">        <span class="attribute">app:layout_anchorGravity</span>=<span class="value">"bottom|right"</span></span><br><span class="line">        <span class="attribute">app:fabSize</span>=<span class="value">”normal”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>最后, 在我们构造Snackbar时, 我们需要把CoordinatorLayout作为View参数传递过去, 如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Snackbar.make(mCoordinator, <span class="string">"Your message"</span>, Snackbar.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure></p>
<h3 id="App_Bar">App Bar</h3><p>CoordinatorLayout我们让我们根据滚动事件来调整子View的布局，比如在滚动内容时，我们可以隐藏Toolbar。</p>
<p>要实现这个效果，首先我们需要设置<strong>layout_scrollFlags</strong>属性，这个属性用来控制跟随View滚动还是固定在最上面，<br>这个属性可以设置为以下几种值：</p>
<ul>
<li>enterAlways - 实现quick return效果, 当向下移动时，显示View（比如Toolbar)</li>
</ul>
<video loop video="" autoplay class="graf-image" data-image-id="1*HJUrvQWhZLHpIGd6s8pw2g.gif" data-width="388" data-height="690"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*HJUrvQWhZLHpIGd6s8pw2g.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*HJUrvQWhZLHpIGd6s8pw2g.mp4" type="video/mp4">Your browser does not support the video tag.</video>

<ul>
<li>enterAlwaysCollapsed - 当你的View已经设置minHeight属性又使用此标志时，你的View只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。</li>
</ul>
<video loop video="" autoplay class="graf-image" data-image-id="1*p3LUCtXT7Zxyqja6Ildi7Q.gif" data-width="388" data-height="690"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*p3LUCtXT7Zxyqja6Ildi7Q.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*p3LUCtXT7Zxyqja6Ildi7Q.mp4" type="video/mp4">Your browser does not support the video tag.</video>

<ul>
<li>exitUntilCollapsed - 向上滚动时收缩View，但可以固件Toolbar一直在上面</li>
</ul>
<video loop video="" autoplay class="graf-image" data-image-id="1*B978QTrWe-bNLcdnNRgGxw.gif" data-width="388" data-height="690"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*B978QTrWe-bNLcdnNRgGxw.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*B978QTrWe-bNLcdnNRgGxw.mp4" type="video/mp4">Your browser does not support the video tag.</video>

<p><em>注意</em>: 设置<em>scroll</em>标志的View必须在没有设置的之前定义，这样可以确保设置过的View都从上面移出, 只留下那些固定的View在下面。</p>
<p>如下代码所示, 我们的recycler view设置了<strong>layout_behavior</strong>属性，<br>当我们的recycler view滑动时，就会触发设置了layout_scrollFlags的控件发生状态的改变。<br>不过我们没有设置TabLayout的layout_scrollFlags属性, 所以TabLayout会固定在屏幕最上方。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.CoordinatorLayout</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.v7.widget.RecyclerView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">app:layout_behavior</span>=</span><br><span class="line">        "@<span class="attribute">string</span>/<span class="attribute">appbar_scrolling_view_behavior</span>" /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.AppBarLayout</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span><br><span class="line">            <span class="attribute">...</span></span><br><span class="line">            <span class="attribute">app:layout_scrollFlags</span>=<span class="value">"scroll|enterAlways"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.design.widget.TabLayout</span></span><br><span class="line">            <span class="attribute">...</span></span><br><span class="line">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="ToolBars">ToolBars</h3><p>现在我们可以使用CollapsingToolbarLayout，它可以实现当屏幕内容滚动时，收缩Toolbar<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.AppBarLayout</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"192dp"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.CollapsingToolbarLayout</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">app:layout_scrollFlags</span>=<span class="value">"scroll|exitUntilCollapsed"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span><br><span class="line">                <span class="attribute">android:layout_height</span>=<span class="value">"?attr/actionBarSize"</span></span><br><span class="line">                <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">                <span class="attribute">app:layout_collapseMode</span>=<span class="value">"pin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当我们使用这个组件时, <strong>layout_collapseMode</strong>必须设置, 它有两个选项：</p>
<ul>
<li><p><strong>Pin -</strong> 设置为这个模式时，当CollapsingToolbarLayout完全收缩后，Toolbar还可以保留在屏幕上</p>
<video loop video="" autoplay class="graf-image" data-image-id="1*rDsxrspi35eM6yRgqnHZig.gif" data-width="388" data-height="462"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*rDsxrspi35eM6yRgqnHZig.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*rDsxrspi35eM6yRgqnHZig.mp4" type="video/mp4">Your browser does not support the video tag.</video></li>
<li><strong>Parallax</strong> - 设置为这个模式时，在内容滚动时，CollapsingToolbarLayout中的View（比如ImageView)也可以同时滚动，实现视差滚动效果.<br>可以通过<em>layout_collapseParallaxMultiplier*</em>设置视差因子。</li>
</ul>
<video loop video="" autoplay class="graf-image" data-image-id="1*dHI4V_uRApsDJidhvUTwvg.gif" data-width="388" data-height="482"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*dHI4V_uRApsDJidhvUTwvg.ogv" type="video/ogg"><source src="https://d262ilb51hltx0.cloudfront.net/max/800/1*dHI4V_uRApsDJidhvUTwvg.mp4" type="video/mp4">Your browser does not support the video tag.</video>

<p>通过CollapsingToolbarLayout的setText()方法，我们就可以实现让文字大小随着缩放慢慢变小。</p>
<h3 id="Custom_Views">Custom Views</h3><p>我们还可以给自定义View定义Behaviour, 在onDependentViewChanged()方法中做相应的回调处理，这可以更好处理touch事件, 手势操作和子View之间的依赖关系。</p>
<p>那么你还在等什么呢? 加入这个Material Design支持库，赶紧试试吧！<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:design:22.2.0'</span></span><br></pre></td></tr></table></figure></p>
<p>本文译自：<a href="https://medium.com/ribot-labs/exploring-the-new-android-design-support-library-b7cda56d2c32" target="_blank" rel="external">Exploring the new Android Design Support Library</a></p>
<blockquote>
<p>英文原文：<a href="https://medium.com/ribot-labs/exploring-the-new-android-design-support-library-b7cda56d2c32" target="_blank" rel="external">Exploring the new Android Design Support Library</a><br>译文原文：<a href="http://www.aswifter.com/2015/06/21/andorid-material-design-support-library/" target="_blank" rel="external">探索新的Android Material Design支持库</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android Material Design支持库提供了一些新组件，我们在这里简要的介绍一下这些组件，以及如何使用这些组件。</p>
<p>我是Material Design的粉丝，它使应用程序更具有一致性和整体性,而且看起来更美观，更容易使用。<br>Google I / O大会2015年引进一些很棒的新Android特性，包括新的Material Design支持库。<br>Material Design的介绍： <a href="http://www.google.com/design/spec/material-design/introduction.html#">Material Design Guidelines</a> (译注：请自备梯子)<br>让我们一起来看看这些我们现在能用的新组件。<br>]]>
    
    </summary>
    
      <category term="SupportLibrary" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/SupportLibrary/"/>
    
      <category term="材料设计" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E6%9D%90%E6%96%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="翻译" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="材料设计" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E7%BF%BB%E8%AF%91/%E6%9D%90%E6%96%99%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我们是如何实现一个Android铡刀菜单的]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/23/how-we-developed-the-guillotine-menu-animation-for-android/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/23/how-we-developed-the-guillotine-menu-animation-for-android/</id>
    <published>2015-06-22T16:00:00.000Z</published>
    <updated>2015-07-11T15:49:27.000Z</updated>
    <content type="html"><![CDATA[<p>你可能已经阅读了关于设计师Vitaly Rubtsov 和ios开发者Maksym Lazebnyi 创建独特的top bar动画的<a href="http://yalantis.com/blog/how-we-created-guillotine-menu-animation/" target="_blank" rel="external">故事</a>，这个动画菜单被取了一个不吉利的名字 － 铡刀（断头台用的）菜单（你可以在<a href="https://dribbble.com/shots/2018249-Guillotine-Menu?list=users&amp;offset=11" target="_blank" rel="external">Dribbble</a> 和 <a href="https://github.com/Yalantis/GuillotineMenu" target="_blank" rel="external">GitHub</a>上看到这个ios动画）。很快，我们的安卓开发工程师Dmytro Denysenko接受了在安卓上实现相同动画的挑战（可在<a href="https://github.com/Yalantis/GuillotineMenu-Android" target="_blank" rel="external">GitHub</a>上查看）。牛逼的是，他甚至都不知道自己会面临什么样的困难，也不知道自己要做多深的研究才能解决这个问题。<br><a id="more"></a><br><img src="http://www.jcodecraeer.com/uploads/20150618/1434565628830943.gif" alt=""></p>
<h2 id="牛吃南瓜是如何开始的?">牛吃南瓜是如何开始的?</h2><p>最开始，我想采用传统的方法来实现这个控件，毕竟，第一眼看上去是完全可能的。我打算使用ObjectAnimation来实现navigation view的旋转，还准备添加一个默认的BounceInterpolator来达到菜单触到屏幕左边沿时的来回反弹的效果。但是 BounceInterpolator似乎让反弹有点过头了，就像足球的反弹，不是我们要的金属铡刀的效果。</p>
<p>默认的BounceInterpolator没有提供任何自定义属性，因此我除了写一个自己的interpolator之外别无选择。除了反弹效果之外，还应该创建一个自由落体的加速效果来让动画更自然。</p>
<p>这个铡刀控件包含了铡刀的旋转，铡刀的反弹，以及actionbar的反弹。另外，我还用了两个自定义的interpolator来分别实现自由落体加速效果和反弹效果。</p>
<p>现在我们来讲讲开发过程。</p>
<p>如何实现铡刀菜单的旋转<br> 关于旋转的动画，我需要做两件事：找到旋转的中心，然后实现一个ObjectAnimation来做旋转的实际工作。</p>
<p>在计算旋转中心之前，我们需要将布局放到屏幕中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUpOpeningView</span><span class="params">(<span class="keyword">final</span> View openingView)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (mActionBarView != <span class="keyword">null</span>) &#123;</span><br><span class="line">       mActionBarView.getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="annotation">@Override</span></span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">mActionBarView.getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">mActionBarView.getViewTreeObserver().removeGlobalOnLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               mActionBarView.setPivotX(calculatePivotX(openingView));</span><br><span class="line">               mActionBarView.setPivotY(calculatePivotY(openingView));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">calculatePivotY</span><span class="params">(View burger)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> burger.getTop() + burger.getHeight() / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">calculatePivotY</span><span class="params">(View burger)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> burger.getTop() + burger.getHeight() / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>完了之后，我们只需要添加几行代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator rotationAnimator = ObjectAnimator.ofFloat(mGuillotineView, <span class="string">"rotation"</span>, GUILLOTINE_OPENED_ANGLE, GUILLOTINE_CLOSED_ANGLE);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* setting duration, listeners, interpolator, etc. */</span></span><br><span class="line"> </span><br><span class="line">rotationAnimator.start();</span><br></pre></td></tr></table></figure>
<p>旋转的中心启示就是汉堡菜单（三根横线）的中心。这个动画需要两个汉堡图标：一个在主 action bar上，另一个在铡刀布局上。为了让动画看起来更自然，两个汉堡需要一致并且使用相同的坐标体系。</p>
<p>为此，我在toolbar上创建了一个汉堡图标（看不见），然后将它与铡刀菜单汉堡图标的中心重合。</p>
<h2 id="如何实现自由落体和反弹">如何实现自由落体和反弹</h2><p>为了在iOS上实现铡刀菜单动画，我的同事Maksym Lazebnyi 使用了一个默认的UIDynamicItemBehavior类，该类自定义了弹力和阻力两个属性。但是，在安卓上可没那么简单。</p>
<p>ps 在安卓上似乎任何事情都没那么简单。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150618/1434565654842777.jpg" alt=""></p>
<p>[标准的 Android 插值]</p>
<p>就如刚刚我提到的，我本可以使用默认的BounceInterpolator实现布局的旋转，但是好像这个东西的反弹效果看起来过于柔和了（就好像我们的铡 刀是个球样，－－哈哈哈）。所以我试图自定义一个插值器（interpolation）。我们应该在动画上添加一个加速器（acceleration）。</p>
<p>插值器（interpolation）的比率是从0到1。而我的情况中，旋转的角度是从0°到 90° （顺时针方向）。这就意味着在0°的时候interpolation的比率应该是”0″（起点） ，而在角度为90°的时候，interpolation的比率应该是”1″（终点）。</p>
<p>我们的插值器有一个二次方程，可以同时用于Vitaly动画的屏幕截图中的反弹和下降效果。</p>
<p>我得回忆一下高中数学课程中关于创建自定义插值器的知识。在经过一番思考之后，我画了一个演示对象属性随时间变化的函数曲线图。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20150618/1434566628217826.png" alt=""></p>
<p>[自定义的插值器]</p>
<p>我写了三个遵循图示的二次方程</p>
<p><img src="http://www.jcodecraeer.com/uploads/allimg/150618/0S3251H3-0.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuillotineInterpolator</span> <span class="keyword">implements</span> <span class="title">TimeInterpolator</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> ROTATION_TIME = <span class="number">0.46667f</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> FIRST_BOUNCE_TIME = <span class="number">0.26666f</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> SECOND_BOUNCE_TIME = <span class="number">0.26667f</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">GuillotineInterpolator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (t &lt; ROTATION_TIME) <span class="keyword">return</span> rotation(t);</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; ROTATION_TIME + FIRST_BOUNCE_TIME) <span class="keyword">return</span> firstBounce(t);</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">return</span> secondBounce(t);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">rotation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">4.592f</span> * t * t;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">firstBounce</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">2.5f</span> * t * t - <span class="number">3f</span> * t + <span class="number">1.85556f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">secondBounce</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0.625f</span> * t * t - <span class="number">1.08f</span> * t + <span class="number">1.458f</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="如何实现actionbar的反弹">如何实现actionbar的反弹</h2><p>现在我们的铡刀菜单可以下落并且在碰撞到屏幕左边缘的时候可以反弹了，但是我们还需要实现一个反弹。</p>
<p>当铡刀菜单回到初始状态的时候，碰到actionbar产生一个反弹效果。为此，我们还需要一个interpolator。</p>
<p>下面是初始和终点在0° 的曲线，不过二次方程是基于和前面相同规则的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionBarInterpolator</span> <span class="keyword">implements</span> <span class="title">TimeInterpolator</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> FIRST_BOUNCE_PART = <span class="number">0.375f</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> SECOND_BOUNCE_PART = <span class="number">0.625f</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (t &lt; FIRST_BOUNCE_PART) &#123;</span><br><span class="line">           <span class="keyword">return</span> (-<span class="number">28.4444f</span>) * t * t + <span class="number">10.66667f</span> * t;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; SECOND_BOUNCE_PART) &#123;</span><br><span class="line">           <span class="keyword">return</span> (<span class="number">21.33312f</span>) * t * t - <span class="number">21.33312f</span> * t + <span class="number">4.999950f</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (-<span class="number">9.481481f</span>) * t * t + <span class="number">15.40741f</span> * t - <span class="number">5.925926f</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这 样我们就得到了三个ObjectAnimation实例：铡刀的打开和关闭，actionbar的旋转，以及两个插值器：铡刀的下落和actionbar 的反弹。我们需要做的只是为动画设置适当的插值器，在菜单关闭的时候立即开始actionbar的反弹，并且将动画和汉堡图的tap事件标绑定。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator rotationAnimator = initAnimator(ObjectAnimator.ofFloat(mGuillotineView, ROTATION, GUILLOTINE_CLOSED_ANGLE, GUILLOTINE_OPENED_ANGLE));</span><br><span class="line">rotationAnimator.setInterpolator(mInterpolator);</span><br><span class="line">rotationAnimator.setDuration(mDuration);</span><br><span class="line">rotationAnimator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;...&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这就是整个过程。虽然创建一个动画是一个不小的挑战，但是值得。现在我们的铡刀菜单就可以在两个平台通用了。</p>
<p>你也可以看看这篇文章: <a href="http://yalantis.com/blog/how-we-created-flip-view-pager-animation-on-android/" target="_blank" rel="external">How we created FlipViewPager animation for Android</a>。</p>
<h2 id="计划中的特性">计划中的特性</h2><p>我计划在铡刀菜单动画中添加一些新特性。包括swipe transition，支持从右到左的布局，以及横屏布局。请关注我们的更新。</p>
<p>你可以在这里找到项目的例子和设计图：</p>
<p><a href="https://github.com/Yalantis/GuillotineMenu-Android" target="_blank" rel="external">GitHub</a> 、<a href="https://dribbble.com/shots/2018249-Guillotine-Menu?list=users&amp;offset=11" target="_blank" rel="external">Dribbble</a>。</p>
<blockquote>
<ul>
<li>原文链接：[How We Developed the Guillotine Menu Animation for Android]<a href="http://yalantis.com/blog/how-we-developed-the-guillotine-menu-animation-for-android/?utm_source=github" target="_blank" rel="external">How We Developed the Guillotine Menu Animation for Android</a></li>
<li>译文链接：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0618/3086.html" target="_blank" rel="external">我们是如何在Android上实现铡刀菜单(Guillotine Menu)动画的</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>你可能已经阅读了关于设计师Vitaly Rubtsov 和ios开发者Maksym Lazebnyi 创建独特的top bar动画的<a href="http://yalantis.com/blog/how-we-created-guillotine-menu-animation/">故事</a>，这个动画菜单被取了一个不吉利的名字 － 铡刀（断头台用的）菜单（你可以在<a href="https://dribbble.com/shots/2018249-Guillotine-Menu?list=users&amp;offset=11">Dribbble</a> 和 <a href="https://github.com/Yalantis/GuillotineMenu">GitHub</a>上看到这个ios动画）。很快，我们的安卓开发工程师Dmytro Denysenko接受了在安卓上实现相同动画的挑战（可在<a href="https://github.com/Yalantis/GuillotineMenu-Android">GitHub</a>上查看）。牛逼的是，他甚至都不知道自己会面临什么样的困难，也不知道自己要做多深的研究才能解决这个问题。<br>]]>
    
    </summary>
    
      <category term="特效" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E7%89%B9%E6%95%88/"/>
    
      <category term="其他" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[向产品宣战——开发者眼中的Android UI Design]]></title>
    <link href="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/22/the-product-war-in-the-eyes-of-developers-android-ui-design/"/>
    <id>http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/2015/06/22/the-product-war-in-the-eyes-of-developers-android-ui-design/</id>
    <published>2015-06-21T16:00:00.000Z</published>
    <updated>2015-07-11T15:47:04.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>准备了半个月，思考产品设计、交互设计，见证了公司的产品、UE和开发的撕逼，将自己的思考、感悟，整理成下文，谨代表广大程序猿，向设计狮、产品X开战。希望广大程序猿能够坚持贯彻Google的Material Design，切实认真负责的执行Android的设计思想，将MD设计带到产品中去，不做中国特色的App，将Android的开发风气带到正轨，树立正确的开发观、设计观。</p>
<p><strong>希望广大程序猿朋友在博客后面留言、签名，规范Android设计、树立Android开发风气，需要你们的力量——Android need YOU。</strong></p>
<p><img src="http://img.blog.csdn.net/20150609140523025" alt="这里写图片描述"></p>
</blockquote>
<a id="more"></a>
<h2 id="基本元素">基本元素</h2><p>移动端的App界面，不论是iOS还是Android，一般由四个元素组成，分别是：状态栏(status bar)、导航栏(navigation)、主菜单栏(submenu)、内容区域(content)。</p>
<ul>
<li>状态栏：显示信号、运营商、电量等显示手机状态的区域</li>
<li>导航栏：显示当前界面的名称，包含相应的功能或者页面间的跳转按钮</li>
<li>主菜单栏：类似于页面的主菜单，提供整个应用的分类内容的快速跳转</li>
<li>内容区域：展示应用提供的相应内容</li>
</ul>
<p>不同的是，由于Android在4.0之后移除了实体键而使用屏幕下方的虚拟键，所以，Android将iOS中的主菜单从下方移动到了上方，从而避免误操作虚拟键。</p>
<blockquote>
<p>其实很多Android、iOS的UI差异性，都是由于iOS的闭源导致的，由于它的商业化，导致很多设计被申请了专利，Android在很多地方都必须有所不同，说的最多的就是iOS的弹性滚动，其实Android的ScrollView要实现这样的效果，只需要修改一个参数的值即可，但是由于这个效果iOS申请的专利，所以Android就无法使用了。</p>
</blockquote>
<h2 id="布局差异性">布局差异性</h2><h3 id="导航栏位置与风格">导航栏位置与风格</h3><p><strong>iOS</strong><br>iOS通常使用经典的Tab页面来进行页面的布局，也是最早最经典的布局方式。<br><strong>Android</strong><br>Android官方提供了两种页面切换方式：Actionbar和可滑动的Tab。Actiobar给用户提供了导航标题和触控按钮，如下：<br><img src="http://img.blog.csdn.net/20150531204743348" alt="这里写图片描述"><br>或者：<br><img src="http://img.blog.csdn.net/20150531210007267" alt="这里写图片描述"><br>通过滑动的方式来展示Tab页面。</p>
<p><strong>展示数据</strong></p>
<p>当一个选项具有多种数据可选信息的适合，Android通常使用spinner的方式来展示可选数据项，而iOS则喜欢使用segments：</p>
<p><img src="http://img.blog.csdn.net/20150531213506678" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20150531220210291" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20150531220225657" alt="这里写图片描述"></p>
<h3 id="Back键">Back键</h3><p><strong>iOS</strong><br>从iOS的布局上我们可以发现，由于iOS设备没有返回键，所以页面不得不在一页中显示或者在页面上提供返回按钮。<br><strong>Android</strong><br>Android的返回操作相比iOS就更加丰富，它不仅可以返回上个页面，更可以返回上一次的操作，例如打开、收起键盘。<br>另外，从Android 4.0开始，Google也提出了一个“向上”的概念：<br><img src="http://img.blog.csdn.net/20150531210449337" alt="这里写图片描述"><br>就是导航栏标题前面的一个小箭头，点击这个箭头，是回到该页面的上一个层级，而不是单纯的向上一页返回。</p>
<h3 id="搜索">搜索</h3><p>iOS中的搜索通常以控件的形式展现出来。而Android中的搜索，大多以search widget的形式展现，在点击后显示搜索框：<br><img src="http://img.blog.csdn.net/20150531213746297" alt="这里写图片描述"></p>
<h3 id="按钮">按钮</h3><p>iOS中的按钮基本会带有明显的边框，而在Android MD中，按钮通常不需要边框，并带以涟漪效果来展示边界。</p>
<hr>
<h2 id="平台差异性">平台差异性</h2><h3 id="交互架构">交互架构</h3><p>iOS的标准交互架构是第一层导航在底部，左上角返回，右上角操作，右进左出，默认垂直滚动。不得不说，这套架构运用得到成熟，很彻底，最后在这套架构上和各种进化也很优秀。</p>
<p>Android标准交互架构的混乱很多，但是，不好用的自然会消失，看看G1的实体按键还有几个。search没了，menu越来越少用了，顶部导航少了。各种移植现象也让交互越来越iOS化。但是Android的特点在back上。iOS的优秀在于app内部，缺点却是app外部，app之间的切换非常弱。而android，因为back物理按钮的存在，应用之间的接口非常灵活。以栈的方式来管理活动，而不是以应用来管理活动，这就让开发者对全局的把握更加轻松。</p>
<h3 id="widget">widget</h3><p>两个系统都包含主屏幕，但iOS的主屏幕只能显示应用列表，而Android的主屏幕不仅可以显示应用列表，还可以自定义各种widget，这是很好的入口。不光是主屏幕上，甚至是锁屏界面上，Android也可以自定义widget，这个功能，是Android相比iOS最闪光的UI元素。</p>
<h3 id="Notification">Notification</h3><p>Notification同样是Android UI元素中非常重要的一环，适当的使用，会给用户提供非常便利的应用入口。但是，如果滥用通知，同样会让用户非常反感。</p>
<h3 id="ScreenLock交互界面">ScreenLock交互界面</h3><p>与iOS不同，Android的锁屏界面可以显示的元素更加丰富。也支持锁屏控件的自定义，通知的自定义、显示级别的自定义。</p>
<p><img src="http://img.blog.csdn.net/20150609102841931" alt="这里写图片描述"></p>
<p>这里的显示效果与通知的显示风格基本相同。</p>
<p><img src="http://img.blog.csdn.net/20150609103025244" alt="这里写图片描述"></p>
<h2 id="设计建议">设计建议</h2><p>很多人把用户体验看成是单纯的设计或可用性问题，过于狭隘。用户体验的组成是多个方面的，产品基础功能、新技术、内容、交互体验、UI视觉、性能其实都是体验的构成。有时候产品的成功不是一两处就能决定的，甚至牺牲其中一些关键环节，如果能保证满足其它更好的需求，也是值得的。</p>
<p>而对于开发者, 尤其是跨平台开发者而言, 分别遵循不同平台的设计规范会为设计带来更大的压力 —— 对于大部分应用而言, 需要设计多一套视觉样式 (对于很多设计师/开发者而言, 还需要重新设计一套交互逻辑 —— 尽管这是毫无必要的), 必然会增加工作量. 但是, 遵循平台设计规范能够让开发者更好的发挥一个平台的实力 (调用自带标准控件节省性能, 不需调用外部库实现模仿 iOS 的视觉/交互效果, 标准布局更容易实现, 等等)。</p>
<h3 id="针对平台特性去设计同一功能的不同元素">针对平台特性去设计同一功能的不同元素</h3><blockquote>
<p>创建一个跨平台的设计，最需要考虑的方案就是这两个平台上展现同一功能的元素是不同的。所以设计应当尊重原生UI的标准，让用户保持同一的操作习惯。</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150531214450681" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20150531214549228" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20150531214826610" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20150531214755588" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20150531214936270" alt="这里写图片描述"></p>
<p>最需要遵循的就是不要刻意模仿其他平台的显示特性。</p>
<h3 id="最好不要共用一套UI">最好不要共用一套UI</h3><p>现在在开发中，大多使用一套UI来设计Android和iOS两个平台的主要原因，其实还是因为移动互联网的版本节奏太快，两套UI设计与维护的成本过大会导致效率降低，这是采取两平台完全一致的最关键因素。同一个产品在两个终端并行，设计资源会严重紧缺，两平台功能同步设计不同步的情况使得项目进行得相当缓慢。从团队的效率看这么做确实无可厚非，其实也就是在争取时间成本。</p>
<p>但是，设计师应该把自己的设计当做自己的儿子，比如乔布斯，他肯定希望自己的儿子像自己，如果长得像爱因斯坦一样，虽然绝顶聪明，但是却显得和父亲格格不入，设计也是这样，保持系统本身的特点，是对系统本身最起码的尊重。</p>
<p>如果说Android的设计风格不完美，但这肯定不是使用iOS风格的理由，因为iOS风格的Android应用只会让界面看起来更差劲，不伦不类，Android Design 就算再怎么不完美，总比iOS风格要适合Android。如果说Android Design 不完美，或者是不够漂亮，那么Android Play上面那么多界面精美的应用都是怎么做出来的呢？</p>
<p>如果说两个平台用同一个界面是为了提升效率，节省时间，那为什么Windows Phone 又是另外的界面？为了一个占有率80%的平台你去“节省时间”，为了一个占有率2%的平台你去“花费时间“，说得通？Windows Phone 之所以不是iOS风格的，是因为微软压根就让你做不成iOS风格的，要能照搬你会不照搬吗？所以，大部分的App以2%为理由，拒不支持WP。</p>
<h3 id="UI可以一样，但是操作方式绝对不能一样">UI可以一样，但是操作方式绝对不能一样</h3><p>即使我们退一步，UI做成一套，这个很多人也还可以接受，但是最无法忍受的是整个操作都是以iOS方式进行、并且Android的优点都全部去掉的设计。举个例子，很多人认为Android左上角也有返回，但是那只是看起来像返回，实际上是向上，用过Windows资源管理器的人都知道，虽然有时候返回和向上都是回到同一个文件夹，但是很多时候又是不一样的，那么你在左上角做返回，能不能把功能改成向上？Android 4.1支持富通知，为什么微信来了多条消息还是只能显示发来XX条消息，而不能直接显示消息内容？</p>
<p>这也是官方制定规范的意义之一，让各个开发团队了解系统生态的初衷和导向，让用户在同一个系统生态下能得到尽可能一致的体验；同时也减少独立开发者的工作成本。<br>而现状是 Android 上经常出现 iOS 式操作，让人觉得非常混乱……</p>
<h3 id="不要以用户的学习成本为借口">不要以用户的学习成本为借口</h3><p>说到用户的学习成本，有多少用户是两个平台都用的？恐怕远小于只用一个平台的。一个Android手机用户，大多数软件都是Android Design 的，他用习惯了，然后装了一个微信，突然发现是肾6风格的，这要不要学习成本？有多少用户是在不同的平台间来回切换的？请问是一个用惯了Android Design 应用然后安装了一个肾风格的微信的用户多，还是用惯了肾机换到Android的用户多？明显是前者多，难道腾讯只照顾后者的学习成本，不照顾前者？何况用惯了肾机，反过来用Android，没了返回就不会用了？用户都是弱智？返回在上面会用，在下面就不会用了？这种智商，基本也就不会聊天了，还用微信干什么。既然Android用户转到肾机，能学会按上面的返回，肾机转到Android，反而学不会按下面的返回，这是什么道理？歧视肾机用户智商？</p>
<p>真正好的设计，是两个平台看起来差不多，操作基本上一样，但是又能把不同平台的特色体现出来，界面布局基本相同，iOS平台用圆角矩形，Android平台用直角矩形，既可以触摸切换标签，又可以滑动切换标签，一个人来了消息能显示，两个人来了消息也可以显示，不再是只显示数量了，把上面的返回改成看似返回实则向上的按钮，这样操作起来也差不多，现在微信如果要回到主界面，需要点多次返回，并且配上时间很长的过渡动画，操作极其繁琐，把返回按钮改成向上，不仅符合规范了，操作也大大方便了。</p>
<h3 id="不要以Google放浪形骸为借口">不要以Google放浪形骸为借口</h3><p>在天朝，各种应用坚持不按照Material Design设计标准的原因，还是在于Google 对于生态环境的放任自流，不想管，也管不了，即使不让上架Google Play，虽然我们现在也上不了，但是还有那么多play商店，91、豌豆荚、百度、360，所以，Google无法控制App的设计和质量。</p>
<p>而且，对应手机ROM厂商，更是为了自己的利益、让自己的ROM能够跟其他ROM有所区分，提出各种所谓的设计主题，什么三星的touchwizard，HTC的Sense，试问有哪个所谓的主题在体验上比的过原生系统，算了不说了，怒气值要满了，大招不能白放。</p>
<h2 id="设计思想">设计思想</h2><p>不得不说，有太多的设计师误把技术当艺术、把漂亮当设计了，真正重要的交互部分反而被忽略，你可以看看，一大批的产品都是近乎静态的，许多操作诡异至极，诸如你想添加一个条目到列表里，它就生硬的出现在那;你想删除，它就直接消失。这样的产品设计，你们到底有没有考虑过用户的感受，有没有考虑过产品的感受。</p>
<p>交互真正革命性的意义在于，它把时间这一魔幻般的属性带入静态的产品之中，通过对动作、速度、显现等等的定义，让产品的操作体现出真实感，使得用户能自然而然的理解每一个动作的含义。</p>
<h3 id="动效、动效、动效">动效、动效、动效</h3><p>App的动效设计，不管是在iOS还是在Android上，都是系统极力推崇的。特别是在Material Design中，如何利用时间特性来设计合理的动效，是一门非常大的学问。</p>
<p>下面我们看一个动效的设计图：</p>
<p><img src="http://devstorepic.qiniudn.com/Fl915mir3LQa8xvdW750PuTemjTi" alt="这里写图片描述"></p>
<p>这是一个线性的动画实例，线性的动画虽然给出了交互，但是却是非常生硬的交互。</p>
<p><img src="http://devstorepic.qiniudn.com/Fk3F-w1QHwIZh9X0fczWzVCuIAbq" alt="这里写图片描述"></p>
<p><img src="http://devstorepic.qiniudn.com/FvRkvMkFhe3JKAZhpoqT3QkgVpzP" alt="这里写图片描述"></p>
<p>非线性的动画更加真实的模拟了动画的运行效果，让用户的体验，更加真实。这就是使用时间特性来改变交互特性的最简单实例。</p>
<p>下面这个例子也是一样，我们模拟一个简单的插入、删除效果：</p>
<p><img src="http://devstorepic.qiniudn.com/Fow8JvJNsi7DNdNUxk5a5BTE41ba" alt="这里写图片描述"></p>
<p>这个例子没有经过任何动效处理。生硬的展示，粗糙的交互设计。</p>
<p><img src="http://devstorepic.qiniudn.com/FqgWo0w1NqNQ_wMYhutsH56dty15" alt="这里写图片描述"></p>
<p><img src="http://devstorepic.qiniudn.com/FinQM09e2MjvkPp-lKg5ih3nxAoB" alt="这里写图片描述"></p>
<p>而上面这两个例子，则使用动效，让插入、删除的动画效果更加逼真，且拟合自然状态。</p>
<p>one more，我们再来看一个切换的效果：</p>
<p><img src="http://devstorepic.qiniudn.com/FpenmErH3pDUZt3ZmPxMR1b3IU2T" alt="这里写图片描述"></p>
<p>又是一个非常生硬的切换，仅仅是画面的过渡。</p>
<p>我们使用Material Design来武装这个例子：</p>
<p><img src="http://devstorepic.qiniudn.com/Fgwlzgme2SOT79KlhKQ3Of_vcsIc" alt="这里写图片描述"></p>
<p><img src="http://devstorepic.qiniudn.com/FruRrX7vysWdLBbbbvHCDBKZevSp" alt="这里写图片描述"></p>
<p>Android在Material Design中提出的Activity的四种状态切换方式，正是希望使用这种方式来改变这种生硬的设计。</p>
<h3 id="动效产品实例">动效产品实例</h3><p><img src="http://devstorepic.qiniudn.com/FvwjU8Yn4KYzOXimq_EB_LixRAPW" alt="这里写图片描述"></p>
<h3 id="Material_Design_Guide">Material Design Guide</h3><p>请所有的设计师、程序猿，一定要每日拜读Material Design Guide，前面我们只学习了Material Design Guide中的冰山一角——动效设计，就让整个App完成了逆袭。如果参透了整个Material Design Guide，可想而知，其效果绝不亚于九阴真经、九阳神功、易筋经、葵花宝典，而其最大的好处是每人都能拿到一份copy而不用抢。</p>
<p>很多设计指导，我们就不详细写出来了，毕竟我们是代码攻城狮，以此奠基：</p>
<p><strong><a href="http://developer.android.com/design/index.html" target="_blank" rel="external">http://developer.android.com/design/index.html</a></strong></p>
<p>顺便贴几个gif，展示MD设计的强大。</p>
<p><img src="http://img.my.csdn.net/uploads/201506/09/1433829705_2637.gif" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20150609135927891" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20150609140057725" alt="这里写图片描述"></p>
<h2 id="设计实例">设计实例</h2><h3 id="MD规范">MD规范</h3><p><strong>镇楼</strong></p>
<p><a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">http://www.google.com/design/spec/material-design/introduction.html</a></p>
<h3 id="Dribbble">Dribbble</h3><p>不解释，设计师、程序猿、爱不释手的地方。</p>
<p>但是，<strong>警告设计师，里面不是所有特性都是很好实现的，请不要让拿个特性就让程序猿来实现！！！</strong></p>
<p><a href="https://dribbble.com/" target="_blank" rel="external">https://dribbble.com/</a></p>
<h3 id="UI中国">UI中国</h3><p>还可以吧，国内的一些比较不错的设计。</p>
<p><a href="http://www.ui.cn/" target="_blank" rel="external">http://www.ui.cn/</a></p>
<h3 id="INSTAGRAM_with_Material_Design">INSTAGRAM with Material Design</h3><iframe height="498" width="510" src="http://share.vrs.sohu.com/my/v.swf&amp;topBar=1&amp;id=72152128&amp;autoplay=false&amp;from=page" allowfullscreen></iframe>

<p>上面的这段视频是设计师Emmanuel Pacamalan放出的Instagram安卓L版本的概念视频，这段视频更清晰地描述出了Material Design的方方面面。Material Design的动画非常丰富，每一个操作之间都有动画衔接，简约而又活泼。而App内各个界面之前的切换，也很好地表达出了“层级”的概念。总的来说，安卓L的App设计规范对比之前安卓4.×时代的Holo进步良多。</p>
<h3 id="WeChat_with_Material_Design">WeChat with Material Design</h3><p><img src="http://img.blog.csdn.net/20150609133225987" alt="这里写图片描述"></p>
<p>上面是微信with Material Design的设计图，可以明显的感觉到Android Material Design的设计风格。相比现在的微信客户端，差距不言而喻。<br>下面再来个简图：</p>
<p><img src="http://img.blog.csdn.net/20150609133040416" alt="这里写图片描述"></p>
<h2 id="设计参考教程">设计参考教程</h2><h3 id="跨平台_UI/UX_设计示例_——_Android_&amp;_iOS_篇">跨平台 UI/UX 设计示例 —— Android &amp; iOS 篇</h3><p><a href="http://www.phonekr.com/cross-platform-android-ios-1/" target="_blank" rel="external">http://www.phonekr.com/cross-platform-android-ios-1/</a></p>
<p><a href="http://www.phonekr.com/cross-platform-android-ios-2/" target="_blank" rel="external">http://www.phonekr.com/cross-platform-android-ios-2/</a></p>
<h3 id="Material_Design_研究会">Material Design 研究会</h3><p><a href="http://www.phonekr.com/" target="_blank" rel="external">http://www.phonekr.com/</a></p>
<h3 id="Material_Design_in_Action_—_以猿题库为例">Material Design in Action — 以猿题库为例</h3><p><a href="http://www.phonekr.com/yuan-ti-ku-redesign/" target="_blank" rel="external">http://www.phonekr.com/yuan-ti-ku-redesign/</a></p>
<h3 id="Android_Design_in_Action_—_以知乎为例">Android Design in Action — 以知乎为例</h3><p><a href="http://www.geekpark.net/topics/186387" target="_blank" rel="external">http://www.geekpark.net/topics/186387</a></p>
<h3 id="Android_Design_in_Action_—_以微信为例">Android Design in Action — 以微信为例</h3><p><a href="http://www.geekpark.net/topics/186657" target="_blank" rel="external">http://www.geekpark.net/topics/186657</a></p>
<h2 id="矛盾的原因">矛盾的原因</h2><blockquote>
<p>以下内容可能过于偏激，有部分知乎的评论。<strong>请谨慎观看。</strong></p>
</blockquote>
<h3 id="Google工程师、理科生思维">Google工程师、理科生思维</h3><p>Google的纯粹逻辑思维设计（某些时候为了简洁而简洁，某些时候只看逻辑不看体验和认知）是工程师式的思维。从逻辑和道理上说都是对的，比如常用APP放桌面，不常用放抽屉，看似很有道理，但是小白理解不了（他们只在一个地方找APP，就是他们第一眼看到的桌面），或许在几十年之后，智能手机对每一个人类，就像遇到奶嘴就自然地会去吮吸时，Android Design的思路才是对的。找APP这个具体设计点，可以做一个“关于储物”的类比。人类初始阶段的储物，是在屋子内随处乱放的，在人类对空间和物品储存思路足够熟悉、物品足够多足够复杂后，才有储物柜、分门别类的抽屉的做法。谷歌的设计就是略过了前面阶段，直接到了后面（从科学/工程师/纯理性/逻辑的角度来说，后面的做法当然是更对更先进的，但用户就是暂时接受不了）。</p>
<p>前面提到的国外的不同，其实就在于国外的发达国家的人们更利于尝试、更喜欢尝鲜，学习/接受速度更快。给第三世界的国家像中国市场一样足够大的市场、激烈的竞争环境、较低水平的国民教育程度和理解能力（和公司/企业无关），这些国家的互联网/移动互联网产品的设计，也一定会趋于以触摸、直观、逻辑层级浅、逻辑维度少的设计风格和标准（也就是iOS设计标准之于Android设计标准）。</p>
<p>或许过几年/几十年之后，人类对手机交互天然就会包括“滑动”这个操作（现在人类对手机交互的无前置认知只有触摸/点击，这是从几千年的实物操作中总结来的基因和经验）。到那时，大量采用滑动操作的设计才能被无前置教育的人快速接受。</p>
<p>而在此之前，更保守、直观、逻辑层级更浅、逻辑维度更少的iOS设计标准，始终要比逻辑正确、思维超前、追求简洁大于易理解、追求效率快大于好接受的Android设计标准，要好得多（好的标准是更受主流用户的接受、使用和喜欢）。</p>
<h3 id="规范来的太晚">规范来的太晚</h3><p>Google直到Android L才第一次在设计语言和规范上超越了Apple。Material Design在视觉结构（Layout和Structure）、视觉层次（感谢Google意识到了Shadow的重要并充分运用）、色彩标准（Color Scheme，妈妈再也不用担心我的配色）、字体排布（Typography和全新Roboto字体）、过渡动画（Transition和Animation）上完全超越了Apple的HIG。</p>
<p>而M上的Material Design，让设计不仅仅是一种艺术，而且是一门科学。完全规范的文档和设计资源，已经可以让开发者、设计师完全实践Material Design。</p>
<h3 id="模仿、山寨">模仿、山寨</h3><blockquote>
<p>曾经有个段子，说乔布斯死之前，投资了几十个中国ROM厂家，以至于每次中国ROM发布会，都把自己的ROM与iOS进行对比，不知不觉，大家都发现，所有的厂商都他X说iOS是最好的，自己的ROM怎么怎么马上就跟上它了。iOS真的应该感谢这些中国厂商给你们做的宣传。</p>
</blockquote>
<p>虽然对于大部分国内用户而言, 他们是不知道也很难意识到 Android 和 iOS 在设计上有什么差别的. 而国内主流的 ROM (我说的是 MIUI，流氓而且山寨的代表) 在 UI 上也模仿了非常多 iOS 特色, 在这样的大环境下, 用户很难意识到两个平台设计规范的差异。</p>
<p>但是人是会进步的. 而国外优秀应用大部分都遵循着平台规范, 国内的新晋应用和开发者也渐渐都开始遵循规范, 当用户用过了更优秀, 符合平台规范的应用之后, 他们中的一部分会渐渐意识到规范的优越性, 体会到遵循规范的应用具有更高的一致性. 而不同的平台毕竟是不同的平台, 一个平台的应用会渐渐趋于遵循一致的视觉规范 —— 只要这个规范”具有足够的说服力”, 平台内应用间统一感会不断增强.</p>
<p>用户不需要规范，用户只想使用好的App。用户角度看一个应用是否用着顺手就是一个习惯问题，用户看到的只是结果；而产品背后的细节需要由设计师和开发者把握好，才能给用户一个最佳的结果。<br>所以，如果是资质一般般的团队或者想走大众普适路线的团队还是遵守规范比较好，近期远期都是有利的；<br>如果是特别牛比的团队，那么你可以忽略官方规范自定义一套特别的交互规范，比如 Flipboard、Facebook Paper。但是这些公司现在也在遵循Material Design。</p>
<p>但我目前看到的更多优秀的 APP 都是在遵守规范的基础上，表现自己的设计理念，比如：Expedia、 Timely，还有国内一些新秀App，例如知乎、网易的各大App，大家可以去看看他们的App，Material Design的设计是不是让他们的App更加受欢迎。</p>
<h3 id="公司利益">公司利益</h3><p>从一个公司的角度来说，从一个 App 是否遵守规范就可以大致判断出这个产品团队的工作态度。那些从产品发布初期就遵守规范做出双平台产品的团队，我觉得仅这一点细节的关注上就说明他们不会太水太二，即使他们是个初创团队他们的产品还有很多不足，因为第一步就为今后产品良好快速的迭代打下了基础。而且，可以从一个团队的设计规范上来看出一个公司是业务驱动技术，还是技术驱动业务。</p>
<blockquote>
<p>很多时候，产品的借口都是用户已经熟悉了我们这套UI，如果换成新的设计风格，用户可能难以接受。可是，Apple刚刚提出扁平化设计的时候，网上有多少人在骂，可是后面大家不还是都去用了，以前被骂成X的扁平化竟然成了竞相模仿的对象，如何解释？其实很简单，<strong>优秀的设计，总会被时间所证明。</strong></p>
</blockquote>
<p>就推广而言，一个遵守规范同时又有自身产品亮点的应用，无论是 App Store 还是 Google Play 都是欢迎并推崇的。国外的Google Play是绝对不会feature一个iOS设计风格的App的，App Store也同理。<br>所以，我认为一个负责任、用心的团队应该遵守平台规范，如果可以，再加以自身的风格和理念，就是锦上添花了。</p>
<h2 id="最后">最后</h2><p>文章很长，也写了很久，希望设计师看见这篇博客，能够真的去反思如何从程序猿的角度来设计产品，虽然这可能并没有什么卵用，但请你一定这样去做。希望程序猿看见这篇博客，可以真的去思考如何把技术运用到产品，Material Design并不是仅仅给设计师看的，程序猿同样需要。程序猿的最高境界，就是一个会设计的程序猿，不光是设计程序、架构，更是设计UI、UE。与大家共勉。</p>
<p>最后，希望大家能把这篇文章顶起来，有不足、写的不对的地方，请指出，撕逼也可以，目的只有一个，让所有人——程序猿、设计师，都能够反思，如何做一个好的Android App。</p>
<p>以上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>准备了半个月，思考产品设计、交互设计，见证了公司的产品、UE和开发的撕逼，将自己的思考、感悟，整理成下文，谨代表广大程序猿，向设计狮、产品X开战。希望广大程序猿能够坚持贯彻Google的Material Design，切实认真负责的执行Android的设计思想，将MD设计带到产品中去，不做中国特色的App，将Android的开发风气带到正轨，树立正确的开发观、设计观。</p>
<p><strong>希望广大程序猿朋友在博客后面留言、签名，规范Android设计、树立Android开发风气，需要你们的力量——Android need YOU。</strong></p>
<p><img src="http://img.blog.csdn.net/20150609140523025" alt="这里写图片描述"></p>
</blockquote>]]>
    
    </summary>
    
      <category term="材料设计" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/tags/%E6%9D%90%E6%96%99%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="其他" scheme="http://likebamboo.com/AndroidBloghttp://likebamboo.com/AndroidBlog/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>